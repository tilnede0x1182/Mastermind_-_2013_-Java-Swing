# Credits.java

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import javax.swing.JButton;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

/* Affiche les noms des créateurs du jeu */

public class Credits extends JFrame {
	Container3 p1;

	public Credits () {
		super("Crédits");
		
		p1 = new Container3 (this);
		
		this.add(p1);
	
		this.setMinimumSize(new Dimension(300, 300));
		//this.setPreferredSize(new Dimension(30, 30));
		this.setLocationRelativeTo(null);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setVisible(true);		
		pack ();
	}
	
	public static void main (String [] args) {
		Credits f = new Credits ();
	}

}

/* class qui contient les autres classe d'affichage pour<br>la fenetre Crédits*/

class Container3 extends JPanel {
	Credits f;
	int i;
	JButton bouton;
	Clique clique;

	Color couleur;
	
	String s;
	
	JTextArea label;
		
	public Container3 (Credits f) {
		super ();
		
		couleur = new Color(-15756264);
		
		s = "Mastermind : \n\n\n" +
				"Paul Jeanmaire, Sampath Karthik,\n" +
				"\nIbrahima Timera, Cyrille de Gasquet.\n\n\n2013.";
		
		Font font = new Font("Serif", Font.PLAIN, 14);

		bouton = new JButton ("Ok");

		clique = new Clique (0);

		bouton.addActionListener(clique);

		this.add(bouton);		
		
		label = new JTextArea();
		label.setText(s);
		label.setFont(font);
		label.setEditable(false);
		label.setBackground(couleur);
		
		label.setForeground(Color.BLACK);
		
		label.setWrapStyleWord(true);
		
		this.add(label);
		
		this.f = f;
	}
	
	public void paintComponent (Graphics g) {
		int getWidth = this.getWidth();
		int getHeight = this.getHeight();
		
		g.setColor(couleur);	
		g.fillRect(0,0,getWidth,getHeight);
		
		label.setBounds(30,15,5000,5000);
		bouton.setBounds(getWidth/2-80/2,getHeight-40-12,80,40);

		//System.out.println("OK.");
		
		this.setPreferredSize(new Dimension(getWidth,getHeight));
	}

	/* Listener de la classe*/

	class Clique implements ActionListener {
		int n;
		
		int i;
		public Clique(int n) {
			this.n = n;
		}

		public void actionPerformed(ActionEvent e) {
			if (n==0) { //Principe du jeu
				f.dispose();
			}
		}
	}
}

# EnregistrementFichiers.java

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.FileReader;
import java.io.BufferedReader;

/* Classe qui contient les fonction<br>qui enregistrent les fichiers.*/

class EnregistrementFichiers extends LectureFichiers {

	static UtilDate d1;

	public EnregistrementFichiers () {
		d1 = new UtilDate ();
	}

	public void sauveFichier (String s1) {
		int n = 1, g=0;

		File f = new File("Fichier "+n+".txt");

		try{
			if(f.createNewFile()==false){
				while (f.createNewFile()==false && g<500) {
					n++;
					f = new File("Fichier "+n+".txt");

					g++;
				}
			}
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
		}

		try {
			PrintWriter pw = new PrintWriter(new FileWriter(f));
		   	pw.println(s1);
			pw.flush();
			pw.close();
	
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : écriture dans le fichier.");
		}
	}

	public void sauveFichier2 (String s1, String s) {
		int n = 1, g=0;

		File f = new File(s);

		try{
			if(f.createNewFile()==false){
				while (f.createNewFile()==false && g<500) {
					n++;
					f = new File(s+"("+n+")");

					g++;
				}
			}
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
		}

		try {
			PrintWriter pw = new PrintWriter(new FileWriter(f));
		   	pw.println(s1);
			pw.flush();
			pw.close();
	
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : écriture dans le fichier.");
		}
	}

	public static int SauvegardePartie (int n, int [][] tcoups, int [][] reponses, int [][] couleurs, int [] tcode, int [] tParametres) {
		creeRepertoires();

		File f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n+".txt");
		String s1 = "";
		int g=0;

		try{
			if(f.createNewFile()==false){
				while (f.createNewFile()==false && g<500) {
					n++;
					f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n+".txt");

					g++;
				}
				if (g==500) return -1;
			}
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
			return -1;
		}

		s1 = s1+d1.convertitDateNombres ()+"\n";

		s1 = s1+sauveTableau2 (tcoups,"coups",',',':');

		s1=s1+"\n;\n\n";


		s1=s1+sauveTableau2 (couleurs,"couleurs",',',':');

		s1=s1+"\n;\n\n";


		s1=s1+sauveTableauInt(encode(4564,2165,tcode),"tcode",',');

		s1=s1+"\n;\n\n";


		s1=s1+sauveTableau2 (reponses,"reponses",',',':');

		s1=s1+"\n;\n\n";

		s1=s1+sauveTableauInt(tParametres,"tParametres",',');


		try {
			PrintWriter pw = new PrintWriter(new FileWriter(f));
		   	pw.println(s1);
			pw.flush();
			pw.close();
	
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : écriture dans le fichier.");
			return -1;
		}

		return n;	
	}

	public static boolean tabVide (int [] t) {
		int i;

		for (i=0; i<t.length; i++) if (t[i]!=0) return false;

		return true;
	}

	public static int classeSauvegardes () {
		int i=0, j;

		int [] t = new int [1000];

		creeRepertoires();

		File f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+i+".txt");

		while (i<1000) {
			i++;

			f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+i+".txt");

			if (f.exists()) t[i] = i;	
		}

		if (tabVide(t)) System.out.println("La fonction "+'"'+"detecteSauvegardes"+'"'+" dit : aucune sauvegarde détectée.");

		int [][] t1 = new int [calcNombreOccurenceFichierNonClasses(t)][2];

		System.out.println("calcNombreOccurenceFichierNonClasses(t) = "+calcNombreOccurenceFichierNonClasses(t));

		for (i=0; i<t.length; i++) if (t[i]!=0) System.out.println("t["+i+"] = "+t[i]);

		if (!tabVide(t)) {

			i=0;

			while (!fichiersClasses(t) && i<t1.length) {
				int a = calculOccurencePlacement(t);
				int b = premiereOccurencePlacement(t);


				System.out.println("i = "+i);
	
				t[a] = t[b];
				t[b] = 0;
				
				t1[i][0] = b;
	
				t1[i][1] = a;
	
				if (i<t1.length) i++;
				else System.out.println("Erreur : limite atteinte (classement fichiers).");
			}

			for (i=0; i<t.length; i++) if (t[i]!=0) System.out.println("t["+i+"] = "+t[i]);

			for (i=0; i<t1.length; i++) for (j=0; j<t1[i].length; j++) System.out.println("t1["+i+"]["+j+"] = "+t1[i][j]);
	
			for (i=0; i<t1.length; i++) renomePartie(t1[i][0],t1[i][1]);

		}

		return (calculOccurencePlacement(t)-1);
	}

	public static String [] detecteParties () {
		int i;

		creeRepertoires();

		String [] s = new String[1];

		s[0] = "";

		int w = classeSauvegardes ();

		System.out.println("w = "+w);

		if (w!=1000 && w>0) {
			s = new String[w];
		
			for (i=0; i<w; i++) s[i]=lireSauvegardeDate(i+1);
		}

		return s;
	}

	public static int calcNombreOccurenceFichierNonClasses (int [] t) {
		int i, cmp=0, a1=0;
		boolean a = false;

		for (i=1; i<t.length-1; i++) {
			if (t[i]==0) {
				a = true;
				a1=i++;
				i=t.length-1;
			}
		}

		if (a) for (i=a1; i<t.length; i++) if (t[i]!=0) cmp++;

		return cmp;
	}

	public static boolean fichiersClasses (int [] t) {
		int i, i1=0;
		boolean a = false;

		for (i=1; i<t.length-1; i++) {
			if (t[i]==0) {
				a = true;
				i1=i++;
				i=t.length-1;
			}
		}

		if (a) for (i=i1; i<t.length; i++) if (t[i]!=0) return false;

		return false;
	}

	public static int premiereOccurencePlacement (int [] t) {
		int i, i1=0;
		boolean a = false;

		for (i=1; i<t.length-1; i++) {
			if (t[i]==0) {
				a = true;
				i1=i++;
				i=t.length-1;
			}
		}

		if (a) for (i=i1; i<t.length; i++) if (t[i]!=0) return i;

		System.out.println("Le tableau est classé.");

		return t.length-1;
	}

	public static int calculOccurencePlacement (int [] t) {
		int i;

		for (i=1; i<t.length-1; i++) {
			if (t[i]==0) return i;
		}

		System.out.println('"'+"calculOccurencePlacement"+'"'+" dit : Il n'y a plus de place i="+t.length+".");

		return -1;
	}

	public static int detecteSauvegardes () {
		int i=0;

		creeRepertoires();

		File f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+i+".txt");

		while (!f.exists() && i<1000) {
			i++;

			f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+i+".txt");		
		}

		if (i==1000) System.out.println("La fonction ''detecteSauvegardes'' dit : i = 1000.");

		return i;
	}

	public void SauveParametresFichier (int n, int a, int b, int c, int m, int d, int ndco, int nombreDePartiesJouées, boolean coupsIllimités, boolean premierCoups, boolean tourEnCours, boolean clm, int he, int mi, int se, int tailleDesPolices,int avanceeDuTour,int calculTemps, int x) { //a<s<b,n : nombre de cases, c : nombre de coups, m : mode de jeu, d : difficulté, ndco : nombre de couleurs.
		String s = "";
		String s1 ="Sauvegardes"+File.separatorChar+"Parametres.txt";
		int [] t;

		creeRepertoires();

		t = sauveParametres(n,a,b,c,m,d,ndco,nombreDePartiesJouées,coupsIllimités,premierCoups,tourEnCours,clm,he,mi,se,tailleDesPolices,avanceeDuTour,calculTemps,x);

		File f = new File(s1);

		if (f.exists()) effaceFichier(s1);

		s = sauveTableauInt(t,"tparametres",',');

		sauveFichier2(s,s1);		 
	}

	public static boolean effacePartie (int n) {
		creeRepertoires();

		File f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n+".txt");

		try{
			return (f.delete());
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Exception à l'effacement du fichier");
			return false;
		}
	}

	public static void renomePartie (int n5, int n6) {
		renomeFichier("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n5+".txt","Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n6+".txt");
	}

	public static void renomeFichier (String s1, String s0) {
		creeRepertoires();

		try{
			File source=new File(s1); 
			source.renameTo(new File(s0)); 

			//return true;
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Erreur lors du changement de nom du fichier "+'"'+s1+'"'+".");
			//return false;
		}
	}

	public static boolean detectePartie (int n) {
		int i=0;

		creeRepertoires();

		File f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n+".txt");

		return (f.exists());
	}

	public static int [] sauveParametres (int n, int a, int b, int c, int m, int d, int ndco, int nombreDePartiesJouées, boolean coupsIllimités, boolean premierCoups, boolean tourEnCours, boolean clm, int he, int mi, int se, int tailleDesPolices,int avanceeDuTour,int calculTemps, int x) { //a<s<b,n : nombre de cases, c : nombre de coups, m : mode de jeu, d : difficulté, ndco : nombre de couleurs.
		int [] t = new int [19];

		int icoupsIllimités = 0;
		
		if (coupsIllimités) icoupsIllimités = 1;

		int ipremierCoups = 0;
		
		if (premierCoups) ipremierCoups = 1;

		int itourEnCours = 0;
		
		if (tourEnCours) itourEnCours = 1;

		int iclm = 0;
		
		if (clm) iclm = 1;		

		t[0]=n;
		t[1]=a;
		t[2]=b;
		t[3]=c;
		t[4]=m;
		t[5]=d;
		t[6]=ndco;
		t[7]=nombreDePartiesJouées;
		t[8]=icoupsIllimités;
		t[9]=ipremierCoups;
		t[10]=itourEnCours;
		t[11]=iclm;
		t[12]=he;
		t[13]=mi;
		t[14]=se;
		t[15]=tailleDesPolices;
		t[16]=avanceeDuTour;
		t[17]=calculTemps;
		t[18]=x;

		return t;
	}

	public static void creeRepertoires () {
		File f;

		if (!detecteRepertoire("Sauvegardes")) {
			f=new File("Sauvegardes");
			f.mkdir();

		}

		if (!detecteRepertoire("Sauvegardes"+File.separatorChar+"Parties")) {
			f=new File("Sauvegardes"+File.separatorChar+"Parties");
			f.mkdir();
		}
	}

	/*public Object [] classStats (Object [][][][][][] t, int croissant, int [] parametres) {
		int [] i = new int [parametres.length];

		for (i[0] = ; i[0]<t.length
	}*/

	/*public static Object [] genereStatsAleatoires () {
		int i,j,k,l,m,o, n=0;

		
			|n|4 modes de jeu|3 difficultés|chronometre|Pseudo,score (nombre de coups),temps,date|

			Les items sont classés dans l'ordre croissant (n = 1,2,...,500|modes de jeu  = 1,2,3,4, etc...).

			chronomètre : 1 = pas de chrono, 0 = chrono.
		

		
		
	}*/

	public static int [] agrandieTabInt (int [] t) {
		int i;

		int [] t1 = new int[t.length+100];

		for (i=0; i<t.length; i++) t1[i]=t[i];

		t1[i+1]=-1346545;

		return t1;
	}

	public static String [] agrandieTabString (String [] s1) {
		int i;

		String [] s0 = new String [s1.length+100];

		for (i=0; i<s1.length; i++) s0[i]=s1[i];

		s0[i+1]="-1684685168168981";

		return s0;
	}

	public static int [] affTabInt (int [] t) {
		int i, cmp=0;

		for (i=0; i<t.length; i++) if (t[i]!=-1346545) cmp++;

		int [] t1 = new int [cmp];

		for (i=0; i<t1.length; i++) t1[i]=t[i];

		return t1;
	}

	public static String [] affTabString (String [] s1) {
		int i, cmp=0;

		for (i=0; i<s1.length; i++) if (!(s1[i].equals("-1684685168168981"))) cmp++;

		String [] s0 = new String[cmp];

		for (i=0; i<s0.length; i++) s0[i]=s1[i];

		return s0;
	}

	/*public static void sauveStatistiques () {
		creeRepertoires();

		File f1 = new File("Sauvegardes"+File.separatorChar+"Statistiques.txt");
		String s1 = "", s="";
		int g=0;

		boolean a;

		try{
			a = f1.exists();		
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
		}

		//int [][] t = new int [][];
		int [][] t1;

		if (a) {
			s1 = sauveTableau2(t,"t",',',':');
		}

		else {
			s = litSauvegarde("Sauvegardes"+File.separatorChar+"Statistiques.txt");

			t1 = litTableauInt2(s,',',':');

			//mise à jour...

			s1 = sauveTableau2(t1,"t",',',':');

			boolean d2 = effaceFichier("Sauvegardes"+File.separatorChar+"Statistiques.txt");

			try{
				boolean b = f1.createNewFile();		
			}
	
			catch(Exception e){
				e.printStackTrace();
				System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
			}
		}

		try {
			PrintWriter pw = new PrintWriter(new FileWriter(f1));
		   	pw.println(s1);
			pw.flush();
			pw.close();
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : écriture dans le fichier.");
		}
	}*/

	public static String litSauvegarde (String s0){
		String s="";

		try{
		    File f=new File(s0);

		    BufferedReader br=new BufferedReader(new FileReader(f));

		    String chainelue;

		    chainelue=br.readLine();

		    while(chainelue!=null){
				s=s+chainelue;
				chainelue=br.readLine();
		    }

		    //System.out.println("Fin de lecture");

		    br.close();
		}

		catch(Exception e){
		    System.out.println("Fichier introuvable.");
		}

		//System.out.println("Lire sauvegarde(fichier) = "+'"'+s+'"');

		return s;
	}

	public static String sauveTableauInt (int [] t1, String n, char c) {
		String s1="";
		int i;

		for (i=0; i<t1.length; i++)
			s1 = s1+n+"["+i+"] = "+t1[i]+c+"\n";

		return s1;
	}

	public static String sauveTableauString (String [] t1, String n, char c) {
		String s1="";
		int i;

		for (i=0; i<t1.length; i++)
			s1 = s1+n+"["+i+"] = "+t1[i]+c+"\n";

		return s1;
	}

	public static String sauveTableau2 (int [][] t1, String n, char c1, char c2) {
		String s1="";
		int i, j;

		for (i=0; i<t1.length; i++) {
			for (j=0; j<t1[i].length; j++) {
				s1 = s1+n+"["+i+"]["+j+"] = "+t1[i][j]+c2;

				if (j==t1[i].length-1) s1=s1+c1;

				s1=s1+"\n";
			}
		}

		return s1;
	}

	public static String SauveTableau3 (Object [][][] t1, String n, char c1, char c2, char c3) {
		String s1="";
		int i, j, k;

		for (i=0; i<t1.length; i++) {
			for (j=0; j<t1[i].length; j++) {
				for (k=0; k<t1[i][j].length; k++) {
					s1 = s1+n+"["+i+"]["+j+"]["+k+"] = "+t1[i][j][k]+c3;

					if (k==t1[i][j].length-1) s1=s1+c2;

					if (j==t1[i].length-1&&k==t1[i][j].length-1) s1=s1+c1;

					s1=s1+"\n";
				}
			}
		}

		return s1;
	}

	public static String SauveTableau4 (Object [][][][] t1, String n, char c1, char c2, char c3, char c4) {
		String s1="";
		int i, j, k,l;

		for (i=0; i<t1.length; i++) {
			for (j=0; j<t1[i].length; j++) {
				for (k=0; k<t1[i][j].length; k++) {
					for (l=0; l<t1[i][j][k].length; l++) {
						s1 = s1+n+"["+i+"]["+j+"]["+k+"]["+l+"] = "+t1[i][j][k][l]+c4;

						if (l==t1[i][j][k].length-1) s1=s1+c3;
	
						if (k==t1[i][j].length-1&&l==t1[i][j][k].length-1) s1=s1+c2;
	
						if (j==t1[i].length-1&&k==t1[i][j].length-1&&l==t1[i][j][k].length-1) s1=s1+c1;
	
						s1=s1+"\n";
					}
				}
			}
		}

		return s1;
	}

	public static String SauveTableau5 (Object [][][][][] t1, String n, char c1, char c2, char c3, char c4, char c5) {
		String s1="";
		int i, j, k,l,m;

		for (i=0; i<t1.length; i++) {
			for (j=0; j<t1[i].length; j++) {
				for (k=0; k<t1[i][j].length; k++) {
					for (l=0; l<t1[i][j][k].length; l++) {
						for (m=0; m<t1[i][j][k][l].length; m++) {
							s1 = s1+n+"["+i+"]["+j+"]["+k+"]["+l+"]["+m+"] = "+t1[i][j][k][l][m]+c5;
	
							if (m==t1[i][j][k][l].length-1) s1=s1+c4;

							if (l==t1[i][j][k].length-1&&m==t1[i][j][k][l].length-1) s1=s1+c3;
		
							if (k==t1[i][j].length-1&&l==t1[i][j][k].length-1&&m==t1[i][j][k][l].length-1) s1=s1+c2;
		
							if (j==t1[i].length-1&&k==t1[i][j].length-1&&l==t1[i][j][k].length-1&&m==t1[i][j][k][l].length-1) s1=s1+c1;
	
							s1=s1+"\n";
						}
					}
				}
			}
		}

		return s1;
	}

	public static String SauveTableau6 (Object [][][][][][] t1, String n, char c1, char c2, char c3, char c4, char c5, char c6) {
		String s1="";
		int i, j, k,l,m,o;

		for (i=0; i<t1.length; i++) {
			for (j=0; j<t1[i].length; j++) {
				for (k=0; k<t1[i][j].length; k++) {
					for (l=0; l<t1[i][j][k].length; l++) {
						for (m=0; m<t1[i][j][k][l].length; m++) {
							for (o=0; o<t1[i][j][k][l][m].length; o++) {
								s1 = s1+n+"["+i+"]["+j+"]["+k+"]["+l+"]["+m+"]["+o+"] = "+t1[i][j][k][l][m][o]+c6;
			
								if (o==t1[i][j][k][l][m].length-1) s1=s1+c5;
	
								if ((m==t1[i][j][k][l].length-1)&&(o==t1[i][j][k][l][m].length-1)) s1=s1+c4;
	
								if ((l==t1[i][j][k].length-1)&&(m==t1[i][j][k][l].length-1)&&(o==t1[i][j][k][l][m].length-1)) s1=s1+c3;
			
								if ((k==t1[i][j].length-1)&&(l==t1[i][j][k].length-1)&&(m==t1[i][j][k][l].length-1)&&(o==t1[i][j][k][l][m].length-1)) s1=s1+c2;
			
								if ((j==t1[i].length-1) && (k==t1[i][j].length-1) && (l==t1[i][j][k].length-1) && (m==t1[i][j][k][l].length-1) && (o==t1[i][j][k][l][m].length-1)) s1=s1+c1;
		
								s1=s1+"\n";

								System.out.println("i = "+i+" j = "+j+" k = "+k+" l = "+l);
							}
						}
					}
				}
			}
		}

		return s1;
	}

	public static String SauveTableau7 (Object [][][][][][][] t1, String n, char c1, char c2, char c3, char c4, char c5, char c6, char c7) {
		String s1="";
		int i, j, k,l,m,o,p;

		for (i=0; i<t1.length; i++) {
			for (j=0; j<t1[i].length; j++) {
				for (k=0; k<t1[i][j].length; k++) {
					for (l=0; l<t1[i][j][k].length; l++) {
						for (m=0; m<t1[i][j][k][l].length; m++) {
							for (o=0; o<t1[i][j][k][l][m].length; o++) {
								for (p=0; p<t1[i][j][k][l][m][o].length; p++) {
									s1 = s1+n+"["+i+"]["+j+"]["+k+"]["+l+"]["+m+"]["+o+"]["+p+"] = "+t1[i][j][k][l][m][o][p]+c7;
				
									if (p==t1[i][j][k][l][m][o].length-1) s1=s1+c6;
									
									if (o==t1[i][j][k][l][m].length-1&&p==t1[i][j][k][l][m][o].length-1) s1=s1+c5;
		
									if (m==t1[i][j][k][l].length-1&&o==t1[i][j][k][l][m].length-1&&p==t1[i][j][k][l][m][o].length-1) s1=s1+c4;
		
									if (l==t1[i][j][k].length-1&&m==t1[i][j][k][l].length-1&&o==t1[i][j][k][l][m].length-1&&p==t1[i][j][k][l][m][o].length-1) s1=s1+c3;
				
									if (k==t1[i][j].length-1&&l==t1[i][j][k].length-1&&m==t1[i][j][k][l].length-1&&o==t1[i][j][k][l][m].length-1&&p==t1[i][j][k][l][m][o].length-1) s1=s1+c2;
				
									if (j==t1[i].length-1&&k==t1[i][j].length-1&&l==t1[i][j][k].length-1&&m==t1[i][j][k][l].length-1&&o==t1[i][j][k][l][m].length-1&&p==t1[i][j][k][l][m][o].length-1) s1=s1+c1;
			
									s1=s1+"\n";
								}
							}
						}
					}
				}
			}
		}

		return s1;
	}

	public static int [] encode (int a, int b, int [] t1) {
		int i;

		int [] t2 = new int [t1.length];

		for (i=0; i<t1.length; i++) t2[i]=t1[i];

		for (i=0; i<t2.length; i++) t2[i]=t2[i]*b+a;

		return t2;
	}

	/*public static boolean detecteFichier (String s) {
		File f = new File(s);

		try {
			return (f.exists());
		}
		catch(Exception e) {
			return false;
		}
	}*/

	public static boolean detecteRepertoire (String s) {
		File f = new File(s);

		try {
			return(f.isDirectory());
		}
		catch(Exception e) {
			return false;
		}
	}
}


# EntrerNom.java

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

/* Classe qui demande à l'utilisateur<br>d'entrer son nom pour ensuite le<br>ranger dans le fichier contenant les <br>scores et les statistiques.*/

public class EntrerNom extends JFrame {
	
	Container5 p1;
	WindowAdapter wa;

	public EntrerNom (final int tailleDesPolices) {
		super("Statistiques : entrez votre nom : ");
		
		p1 = new Container5 (this,tailleDesPolices);
		
		this.add(p1);
	
		this.setMinimumSize(new Dimension(300, 300));
		//this.setPreferredSize(new Dimension(640, 480));
		this.setLocationRelativeTo(null);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setVisible(true);

		wa = new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				p1.enregistreLesStats (tailleDesPolices);
			}
		};

		this.addWindowListener(wa);		
	}

	public void afficheScoresNonTrouvés () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Aucun fichier de scores et statistiques n'a été trouvé.","Aucun fichier de scores et statistiques trouvé.", JOptionPane.INFORMATION_MESSAGE);
	}

	public void setTabSauveStats (int [] t) {
		p1.setTabSauveStats (t);
	}

	public String getS () {
		return p1.getS ();
	}
	
	public static void main (String [] args) {
		EntrerNom f = new EntrerNom (12);
	}
}

/* class qui contient les autres classe d'affichage pour<br>la fenetre.<br> il ne faut pas que ce nom se répète, car il existe d'autres classes dont la fonction est la même (dans Crédits et Scores).*/

class Container5 extends JPanel {
	EntrerNom f;
	Clique3 clique;
	int i;
	Color couleur;
	String s;
	UtilFichiers utilFichiers;
	int [] tabSauveStats;
	int tailleDesPolices;
	
	JTextArea label;
	
	JTextField champNom;
	
	JButton bouton;
	
	public Container5 (EntrerNom f, int tailleDesPolices) {
		super ();

		this.tailleDesPolices=tailleDesPolices;

		utilFichiers = new UtilFichiers ();

		tabSauveStats = new int [7];

		s = "";
		
		champNom = new JTextField ();
		this.add(champNom);
		
		label = new JTextArea ("Entrez votre nom : ");
		
		Font font = new Font("Serif", Font.PLAIN, 16);
		
		couleur = new Color(-26368);
		
		label.setFont(font);
		label.setEditable(false);
		label.setBackground(couleur);
		label.setForeground(Color.BLACK);
		label.setWrapStyleWord(true);
		this.add(label);
			
		bouton = new JButton("Ok");

		clique = new Clique3(1);
		bouton.addActionListener(clique);
		this.add(bouton);
			
		this.f = f;
	}
	
	public void paintComponent (Graphics g) {
		int getWidth = this.getWidth();
		int getHeight = this.getHeight();
		
		g.setColor(couleur);	
		g.fillRect(0,0,getWidth,getHeight);

		label.setBounds(getWidth/2-150/2,getHeight/2-50/2-35, 150,35);
		champNom.setBounds(getWidth/2-150/2,getHeight/2-50/2, 150,35);
		bouton.setBounds(getWidth/2-75/2,getHeight-50-15, 75,35);
		
		//System.out.println("OK.");
	
	}
	
	class Clique3 implements ActionListener {
		int n;
		
		int i;
		public Clique3(int n) {
			this.n = n;
		}
		public void actionPerformed(ActionEvent e) {
			if (n==1) { //Ok
				enregistreLesStats (tailleDesPolices);
			}
			

		}
	}

	public void enregistreLesStats (int tailleDesPolices) {
		s = champNom.getText();
		if (s.equals("")) {
			s="Inconnu";
			System.out.println("OK1.");
		}

		System.out.println(s);

		String s1 = utilFichiers.sauveStat1(s,tabSauveStats[0],tabSauveStats[1],tabSauveStats[2],tabSauveStats[3],tabSauveStats[4],tabSauveStats[5],tabSauveStats[6]);

		utilFichiers.StatsFichier (s1);

		f.dispose();

		File ff2 = new File ("Sauvegardes"+File.separatorChar+"Statistiques.txt");

		if (!ff2.exists ()) f.afficheScoresNonTrouvés ();
		else {
			Scores scores = new Scores (tabSauveStats[0],tabSauveStats[1],tabSauveStats[2],true,tailleDesPolices);
		}
	}

	public void setTabSauveStats (int [] t) {
		int i;

		tabSauveStats = new int [t.length];		

		for (i=0; i<t.length; i++) tabSauveStats [i] = t[i];
	}

	public String getS () {
		return s;
	}
}

# IaCalculsDifficile.java


public class IaCalculsDifficile {

	public int a;
	public int b;
	public int n;

	public int cmp;

	public int [] t1;
	public int [][] t10;	
	public int [] t11;	
	public int [][] t12;	
	public int [][] t15;

	public IaCalculsDifficile () {
	}	

	public IaCalculsDifficile (int n, int a, int b) {
		int i, j, c=puissance(b,n), d = puissance(2,n);

		this.a = a;		
		this.b = b;
		this.n = n;

		cmp = 0;

		t1 = new int [n];
		t10 = new int [c][n];
		t11 = new int [d];
		t12 = new int [c][n];

		t15 = new int [c][d];	
	}

	public int [] ia (int t2) {
		int i, j, h, min=0, max=0, c=puissance(b,n), d = puissance(2,n), indice=0;
		int [] t;

		while (t2<n) {
			if (cmp==0) {
				t10 = genereAleatPossibilite2(a,b,c,n);
				t11 = genereAleatPossibilite3(1,3,d,n);
			}

			if (cmp>0) {
				for (i=0; i<t10.length; i++)
					for (j=0; j<t10.length; j++)
						if (verifieDifficile(t1,t10[j])==t2) t12[i]=t10[j];

				indice=0;

				for (i=0; i<t10.length; i++)
					if (t12[i]!=null) indice++;

				t10 = new int [indice][n];
				
				j=0;
				for (i=0; i<t12.length; i++) {
					if (t12[i]!=null) {
						t10[j]=t12[i];
						j++;
					}
				}
			}
			
			for (i=0; i<t10.length; i++)
				for (j=0; j<t11.length; j++)
					for (h=0; h<t10.length; h++)
						if (verifieDifficile(t10[i],t10[h])==t11[j]) {
							c = t15[i][j]; c++;
							t15[i][j] = c;
						}

			t = new int [t10.length];

			for (i=0; i<t15.length; i++)
				for (j=0; j<t15[i].length; j++)
					t15[i][j] = t15.length-t15[i][j];


			for (i=0; i<t15.length; i++)
				t[i] = minValeur(t15[i]);

			max = max(t);

			for (i=0; i<n; i++) t1[i] = t10[max][i];

			cmp++;

			return t10[max];
		}

		return t10[max];
	}

	public int max (int [] t) {
		int i, c=0, v=0;

		for (i=0; i<t.length; i++)
			if (t[i]>v) { c=i; v=t[i]; }

		return c;
	}

	public int maxValeur (int [] t) {
		int i, c=0, v=0;

		for (i=0; i<t.length; i++)
			if (t[i]>v) { c=i; v=t[i]; }

		return v;
	}

	public int min (int [] t) {
		int i, c=0, v=1000000;

		for (i=0; i<t.length; i++)
			if (t[i]<v) { c=i; v=t[i]; }

		return c;
	}

	public int minValeur (int [] t) {
		int i, c=0, v=1000000;

		for (i=0; i<t.length; i++)
			if (t[i]<v) { c=i; v=t[i]; }

		return v;
	}

	public boolean compare1 (int [] t1, int [] t2) {
		int i;

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifie'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return false;
		}

		for (i=0; i<t1.length; i++) if (t1[i]!=t2[i]) return false;

		return true;
	}

	/**
		r1 : nombre de chiffres bien placés.
		r2 : nombre de chiffres bien placés.

		t1 = tableau des résultats.
		t2 = tableau à vérifier.
	**/

	public int verifieDifficile (int [] t1, int [] t2) {
		int i, j, r1=0, r2=0;

		int [][] t0 = new int [2][n];
		int [][] t3 = new int [2][n];

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieDifficile'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return 0;
		}
		
		for (i=0; i<n; i++) t0[0][i]=i+a;
		for (i=0; i<n; i++) t3[0][i]=i+a;

		
		for (i=0; i<n; i++) if (t1[i]==t2[i]) r1++;

		for (i=0; i<n; i++) for (j=0; j<n; j++) if (t1[i]==t3[0][j]) t3[1][j]++;

		for (i=0; i<n; i++) for (j=0; j<n; j++) if (t2[i]==t0[0][j]) t0[1][j]++;

		for (i=0; i<n; i++) if (t3[1][i]==t0[1][i]) r2++;

		return (r1+r2);
	}

	public boolean verifieDouble (int [] t, int n) {
		int i;

		for (i=0; i<t.length; i++) if (n==t[i]) return false;

		return true;
	}

	public int [] genereAleatPossibilite (int a, int b, int n) {
		int [] t = new int [n];
		int i, c=0;

		for (i=0; i<t.length; i++) {
			while (!verifieDouble(t,n)) c = (int)(Math.random()*b+a);       

			t[i]=c;
		}

		return t;
	}

	public boolean verifieDouble2 (int [][] t1, int [] t2) {
		int i, j, a = 0;

		for (i=0; i<t1.length; i++) {
			a=0;

			for (j=0; j<t1[i].length; j++) if (t2[j]==t1[i][j]) a++;

			if (a>=n) return false;
		}

		return true;
	}

	public int [][] genereAleatPossibilite2 (int a, int b, int n1, int n2) {
		int i, j;

		int [][] t = new int [n1][n2];

		for (i=0; i<t.length; i++) {
			int [] c = new int [n2];
	
			while (!verifieDouble2(t,c)) for (j=0; j<n2; j++) c[j] = (int)(Math.random()*b+a);
  
			t[i]=c;
		}

		return t;
	}

	public int [] genereAleatPossibilite3 (int a, int b, int n1, int n2) {
		int i, j;

		int [][] t = new int [n1][n2];
		int [] t1 = new int [n1];

		for (i=0; i<t.length; i++) {
			int [] c = new int [n2];
	
			while (!verifieDouble2(t,c)) for (j=0; j<n2; j++) c[j] = (int)(Math.random()*b+a);

  			for (j=0; j<c.length; j++) c[j] = c[j]-1;

			t[i]=c;
		}

		for (i=0; i<t.length; i++) t1[i] = compteResultat(t[i]);

		return t1;
	}

	public int compteResultat (int [] t1) {
		int r1=0, r2=0, i;
		int [] t2 = new int [2];

		for (i=0; i<t1.length; i++) {
			if (t1[i]==1) r1++;
			if (t1[i]==2) r2++;
		}

		t2[0]=r1;
		t2[1]=r2;

		return (r1+r2);
	}

	/**
		Calcule de a^b et renvoie le résultat.
	**/
	public int puissance (int a, int b){
		int c=1;

		for (int i=0; i<b; i++) c=c*a;

		return c;
	}
}

# IaCalculsFacile.java


public class IaCalculsFacile {

	public int a;
	public int b;
	public int n;

	public int cmp;

	public int [] t1;
	public int [][] t10;	
	public int [][] t11;	
	public int [][] t12;	
	public int [][] t15;	

	
	public IaCalculsFacile () {	
	}

	public IaCalculsFacile (int n, int a, int b) {
		int i, j, c=puissance(b,n), d = puissance(2,n);

		this.a = a;		
		this.b = b;
		this.n = n;

		//System.out.println("a = "+a+"\nb = "+b+"\nOk1");

		cmp = 0;

		t1 = new int [n];
		t10 = new int [c][n];
		t11 = new int [d][n];
		t12 = new int [c][n];

		t15 = new int [c][d];	
	}

	public int [] ia (int [] t2) {
		int i, j, h, min=0, max=0, c=puissance(b,n), d = puissance(2,n), indice=0;
		int [] t;

		//System.out.println("Ok2");

		while (t2[0]<n) {
			if (cmp==0) {
				//System.out.println("Ok2");

				t10 = genereAleatPossibilite2(a,b,c,n);

				//System.out.println("Ok3");

				t11 = genereAleatPossibilite3(1,3,d,n);

				//System.out.println("Ok4");
			}

			if (cmp>0) {

			//System.out.println("Ok1");

				for (i=0; i<t10.length; i++)
					for (j=0; j<t10.length; j++)
						if (compare1(VerifieFacileOrdi(t1,t10[j]),t2)) t12[i]=t10[j];

				indice=0;

				//System.out.println("Ok1");

				for (i=0; i<t10.length; i++)
					if (t12[i]!=null) indice++;

				t10 = new int [indice][n];
				
				j=0;
				for (i=0; i<t12.length; i++) {
					if (t12[i]!=null) {
						t10[j]=t12[i];
						j++;
					}
				}
			}

			//System.out.println("Ok1");
			
			for (i=0; i<t10.length; i++)
				for (j=0; j<t11.length; j++)
					for (h=0; h<t10.length; h++)
						if (compare1(VerifieFacileOrdi(t10[i],t10[h]),t11[j])) {
							c = t15[i][j]; c++;
							t15[i][j] = c;
						}

			t = new int [t10.length];

			for (i=0; i<t15.length; i++)
				for (j=0; j<t15[i].length; j++)
					t15[i][j] = t15.length-t15[i][j];


			for (i=0; i<t15.length; i++)
				t[i] = minValeur(t15[i]);

			max = max(t);

			for (i=0; i<n; i++) t1[i] = t10[max][i];

			cmp++;

			//System.out.println("Ok1");

			return t10[max];
		}

		return t10[max];
	}

	public int max (int [] t) {
		int i, c=0, v=0;

		for (i=0; i<t.length; i++)
			if (t[i]>v) { c=i; v=t[i]; }

		return c;
	}

	public int maxValeur (int [] t) {
		int i, c=0, v=0;

		for (i=0; i<t.length; i++)
			if (t[i]>v) { c=i; v=t[i]; }

		return v;
	}

	public int min (int [] t) {
		int i, c=0, v=1000000;

		for (i=0; i<t.length; i++)
			if (t[i]<v) { c=i; v=t[i]; }

		return c;
	}

	public int minValeur (int [] t) {
		int i, c=0, v=1000000;

		for (i=0; i<t.length; i++)
			if (t[i]<v) { c=i; v=t[i]; }

		return v;
	}

	public boolean compare1 (int [] t1, int [] t2) {
		int i;

		if (t1.length!=t2.length) {
			//System.out.println("La fonction ''verifie'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return false;
		}

		for (i=0; i<t1.length; i++) if (t1[i]!=t2[i]) return false;

		return true;
	}

	public static boolean Verifie2 (int [] t, int a){
		for (int i=0; i<t.length; i++) { if (t[i]==a) return true; }

		return false;
	}

	public int [] VerifieFacileOrdi (int [] t1, int [] t2){
		int [] t = new int [n];

		for (int i=0; i<t2.length; i++) {
			if (t1[i]==t2[i]) t[i]=1;
			if ((t1[i]!=t2[i]) && (Verifie2(t1,t2[i]))) t[i]=2;
			if ((t1[i]!=t2[i]) && (!Verifie2(t1,t2[i]))) t[i]=0;
		}

		return t;
	}

	public boolean verifieDouble (int [] t, int n) {
		int i;

		for (i=0; i<t.length; i++) if (n==t[i]) return false;

		return true;
	}

	public int [] genereAleatPossibilite (int a, int b, int n) {
		int [] t = new int [n];
		int i, c=0;

		for (i=0; i<t.length; i++) {
			while (!verifieDouble(t,n)) c = (int)(Math.random()*b+a);       

			t[i]=c;
		}

		return t;
	}

	public boolean verifieDouble2 (int [][] t1, int [] t2) {
		int i, j, a = 0;

		for (i=0; i<t1.length; i++) {
			a=0;

			for (j=0; j<t1[i].length; j++) if (t2[j]==t1[i][j]) a++;

			if (a>=n) return false;
		}

		return true;
	}

	public int [][] genereAleatPossibilite2 (int a, int b, int n1, int n2) {
		int i, j;

		int [][] t = new int [n1][n2];
			
		//System.out.println("a = "+a+"b = "+b);

		for (i=0; i<t.length; i++) {
			int [] c = new int [n2];
	
			while (!verifieDouble2(t,c)) {for (j=0; j<n2; j++) c[j] = (int)(Math.random()*b+a);


			//for (int h=0; h<c.length; h++) //System.out.println("t["+h+"] = "+c[h]);
			}
  
			t[i]=c;
		}

		return t;
	}

	public int [][] genereAleatPossibilite3 (int a, int b, int n1, int n2) {
		int i, j;

		int [][] t = new int [n1][n2];
			
		//System.out.println("a = "+a+"b = "+b);

		for (i=0; i<t.length; i++) {
			int [] c = new int [n2];
	
			while (!verifieDouble2(t,c)) {for (j=0; j<n2; j++) c[j] = (int)(Math.random()*b+a);


			//for (int h=0; h<c.length; h++) //System.out.println("t["+h+"] = "+c[h]);
			}

			for (j=0; j<c.length; j++) c[j] = c[j]-1;
  
			t[i]=c;
		}

		return t;
	}


	/**
		Calcule de a^b et renvoie le résultat.
	**/
	public int puissance (int a, int b){
		int c=1;

		for (int i=0; i<b; i++) c=c*a;

		return c;
	}
}

# IaCalculsMoyen.java


public class IaCalculsMoyen {

	public int a;
	public int b;
	public int n;

	public int cmp;

	public int [] t1;
	public int [][] t10;	
	public int [][] t11;	
	public int [][] t12;	
	public int [][] t15;	

	public IaCalculsMoyen () {
	}

	public IaCalculsMoyen (int n, int a, int b) {
		int i, j, c=puissance(b,n), d = puissance(2,n);

		this.a = a;		
		this.b = b;
		this.n = n;

		cmp = 0;

		t1 = new int [n];
		t10 = new int [c][n];
		t11 = new int [d][2];
		t12 = new int [c][n];

		t15 = new int [c][d];	
	}

	public int [] ia (int [] t2) {
		int i, j, h, min=0, max=0, c=puissance(b,n), d = puissance(2,n), indice=0;
		int [] t;

		while (t2[0]<n) {
			if (cmp==0) {
				t10 = genereAleatPossibilite2(a,b,c,n);
				t11 = genereAleatPossibilite3(1,3,d,n);
			}

			if (cmp>0) {
				for (i=0; i<t10.length; i++)
					for (j=0; j<t10.length; j++)
						if (compare1(verifieMoyen(t1,t10[j]),t2)) t12[i]=t10[j];

				indice=0;

				for (i=0; i<t10.length; i++)
					if (t12[i]!=null) indice++;

				t10 = new int [indice][n];
				
				j=0;
				for (i=0; i<t12.length; i++) {
					if (t12[i]!=null) {
						t10[j]=t12[i];
						j++;
					}
				}
			}
			
			for (i=0; i<t10.length; i++)
				for (j=0; j<t11.length; j++)
					for (h=0; h<t10.length; h++)
						if (compare1(verifieMoyen(t10[i],t10[h]),t11[j])) {
							c = t15[i][j]; c++;
							t15[i][j] = c;
						}

			t = new int [t10.length];

			for (i=0; i<t15.length; i++)
				for (j=0; j<t15[i].length; j++)
					t15[i][j] = t15.length-t15[i][j];


			for (i=0; i<t15.length; i++)
				t[i] = maxValeur(t15[i]);

			max = min(t);

			for (i=0; i<n; i++) t1[i] = t10[max][i];

			cmp++;

			return t10[max];					
		}

		return t10[max];
	}

	public int max (int [] t) {
		int i, c=0, v=0;

		for (i=0; i<t.length; i++)
			if (t[i]>v) { c=i; v=t[i]; }

		return c;
	}

	public int maxValeur (int [] t) {
		int i, c=0, v=0;

		for (i=0; i<t.length; i++)
			if (t[i]>v) { c=i; v=t[i]; }

		return v;
	}

	public int min (int [] t) {
		int i, c=0, v=1000000;

		for (i=0; i<t.length; i++)
			if (t[i]<v) { c=i; v=t[i]; }

		return c;
	}

	public int minValeur (int [] t) {
		int i, c=0, v=1000000;

		for (i=0; i<t.length; i++)
			if (t[i]<v) { c=i; v=t[i]; }

		return v;
	}

	public boolean compare1 (int [] t1, int [] t2) {
		int i;

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifie'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return false;
		}

		for (i=0; i<t1.length; i++) if (t1[i]!=t2[i]) return false;

		return true;
	}

	/**
		r1 : nombre de chiffres bien placés.
		r2 : nombre de chiffres bien placés.

		t1 = tableau des résultats.
		t2 = tableau à vérifier.
	**/

	public int [] verifieMoyen (int [] t1, int [] t2) {
		int i, j, r1=0, r2=0;

		int [] t4 = new int [2];
		int [][] t0 = new int [2][n];
		int [][] t3 = new int [2][n];

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieMoyen'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return t4;
		}
		
		for (i=0; i<n; i++) t0[0][i]=i+a;
		for (i=0; i<n; i++) t3[0][i]=i+a;

		
		for (i=0; i<n; i++) if (t1[i]==t2[i]) r1++;

		for (i=0; i<n; i++) for (j=0; j<n; j++) if (t1[i]==t3[0][j]) t3[1][j]++;

		for (i=0; i<n; i++) for (j=0; j<n; j++) if (t2[i]==t0[0][j]) t0[1][j]++;

		for (i=0; i<n; i++) if (t3[1][i]==t0[1][i]) r2++;

		t4[0]=r1;
		t4[1]=r2;

		return t4;
	}

	public boolean verifieDouble (int [] t, int n) {
		int i;

		for (i=0; i<t.length; i++) if (n==t[i]) return false;

		return true;
	}

	public int [] genereAleatPossibilite (int a, int b, int n) {
		int [] t = new int [n];
		int i, c=0;

		for (i=0; i<t.length; i++) {
			while (!verifieDouble(t,n)) c = (int)(Math.random()*a+b);       

			t[i]=c;
		}

		return t;
	}

	public boolean verifieDouble2 (int [][] t1, int [] t2) {
		int i, j, a = 0;

		for (i=0; i<t1.length; i++) {
			a=0;

			for (j=0; j<t1[i].length; j++) if (t2[j]==t1[i][j]) a++;

			if (a>=n) return false;
		}

		return true;
	}

	public int [][] genereAleatPossibilite2 (int a, int b, int n1, int n2) {
		int i, j;

		int [][] t = new int [n1][n2];

		for (i=0; i<t.length; i++) {
			int [] c = new int [n2];
	
			while (!verifieDouble2(t,c)) for (j=0; j<n2; j++) c[j] = (int)(Math.random()*b+a);
  
			t[i]=c;
		}

		return t;
	}

	public int [][] genereAleatPossibilite3 (int a, int b, int n1, int n2) {
		int i, j;

		int [][] t = new int [n1][n2];

		for (i=0; i<t.length; i++) {
			int [] c = new int [n2];
	
			while (!verifieDouble2(t,c)) for (j=0; j<n2; j++) c[j] = (int)(Math.random()*b+a);

			for (j=0; j<c.length; j++) c[j] = c[j]-1;
  
			t[i]=c;
		}

		for (i=0; i<t.length; i++) t[i] = compteResultat(t[i]);

		return t;
	}

	public int [] compteResultat (int [] t1) {
		int r1=0, r2=0, i;
		int [] t2 = new int [2];

		for (i=0; i<t1.length; i++) {
			if (t1[i]==1) r1++;
			if (t1[i]==2) r2++;
		}

		t2[0]=r1;
		t2[1]=r2;

		return t2;
	}

	/**
		Calcule de a^b et renvoie le résultat.
	**/
	public int puissance (int a, int b){
		int c=1;

		for (int i=0; i<b; i++) c=c*a;

		return c;
	}
}

# IaNivFacile.java



class IaNivFacile {

	public static int [][] t0;
	public static int [] t10;
	public static int [][] t11;

	public static int [] t1;
	public static int [] t2;
	public static int [] t4;

	public static int [] t5;

	public static int cmp;
	public static int cmp2;

	public static int a;
	public static int b;
	public static int n;

	public static int h;
	public static int bn;

	public static int g;



	public IaNivFacile (int n, int a, int b) {
		int i;

		if (n>b) bn=n; else bn=b;

		this.g = 1;
		this.h = 0;

		this.a = a;
		this.b = b;
		this.n = n;

		this.cmp = 0;
		this.cmp2 = 0;

		t0 = new int [2][bn];

		t1 = new int [bn];

		t5 = new int [n];

		for (i=0; i<b; i++) t0[0][i]=i+1;

	}

	public int compteOccurence (int [] t1, int j) {
		int i, cmp = 0;

		for (i=0; i<t1.length; i++) if (t1[i]==j) cmp++;

		return cmp;
	}

	public int [] recherche (int [] t1, int j) {
		int i, cmp = 0;

		int [] t2 = new int [t1.length];

		for (i=0; i<t1.length; i++) if (t1[i]==j) { t2[cmp]=i; cmp++; }

		int [] t3 = new int [cmp];

		for (i=0; i<cmp; i++) t3[i]=t2[i];

		return t3;
	}

	public int [] g1 () {
		int i, v=0;

		if (cmp>0) {
			for (i=0; i<n; i++) {
				if ((t2[i]==1) || (t2[i]==2)) {
					v = t4[i]-1;
					if (v<0) v=0;

					//System.out.println("t4["+i+"]-1 = "+(t4[i]-1));

					t0[1][v] = 1;

					//System.out.println("t0[1][v] = "+t0[1][v]);
				}
			}
		}

		for (i=0; i<n; i++) {		  
			if ((i+1+h)>b) t1[i]=b;   
			else t1[i]=i+1+h;	  
		}

		h=t1[n-1];

		if (h==b) {g=2; h=1; cmp=-1; } 		  

		for (i=0; i<n; i++) t5[i]=t1[i];  

		cmp++;

		return t5;
	}

	public int [] g2 () {
		int [] t14;
		int i, tmp=0, tmp2, v=0;

		if (cmp==0) {
			for (i=0; i<n; i++) {
				if ((t2[i]==1) || (t2[i]==2)) {
					v = t4[i]-1;
					if (v<0) v=0;

					//System.out.println("t4["+i+"]-1 = "+(t4[i]-1));

					t0[1][v] = 1;

					//System.out.println("t0[1][v] = "+t0[1][v]);
				}
			}

			t10 = new int [compteOccurence(t0[1],1)];
			t11 = new int [2][n];

			for (i=0; i<n; i++) t11[1][i] = -1;

			cmp2=0;
			
			for (i=0; i<b; i++) if (t0[1][i]==1) { t10 [tmp]=t0[0][i]; tmp++;}
		}
		
		for (i=0; i<n; i++) { 
			t1[i]=t10[cmp];
		}

		tmp2 = compteOccurence(t2,1);
		t14 = recherche(t2,1);

		//System.out.println("cmp2 = "+cmp2);
		//System.out.println("tmp2 = "+tmp2);

		for (i=0; i<tmp2; i++) {
			t11[0][cmp2+i] = t4[0];
			t11[1][cmp2+i] = t14[i];
		}

		if (cmp2+tmp2<n) cmp2 = cmp2+tmp2;

		cmp++;
							
		if (cmp==t10.length) {					
			g=3;
		}

		for (i=0; i<n; i++) t5[i]=t1[i];

		return t5;
	}

	public int [] g3 () {
		int i;

		for (i=0; i<n; i++) if (t11[1][i]!=-1) t1[t11[1][i]]=t11[0][i];
							   
		for (i=0; i<n; i++) t5[i]=t1[i];

		return t5;
	}

	/**
		Fonction qui appelle les autres fonctions de la classe.
	**/

	public int [] iAs1Facile (int [] t4, int [] t2) {
		int i;

		this.t2=t2;
		this.t4=t4;

		//for (i=0; i<n; i++) System.out.println("t4["+i+"] = "+t4[i]);
		//for (i=0; i<n; i++) System.out.println("t2["+i+"] = "+t2[i]);

		//for (i=0; i<b; i++) System.out.println("t0[1]["+i+"] = "+t0[1][i]);

		if (g>1 && cmp>0){ 
			//for (i=0; i<t11[0].length; i++) System.out.println("t11[0]["+i+"] = "+t11[0][i]);
			//for (i=0; i<t11[1].length; i++) System.out.println("t11[1]["+i+"] = "+t11[1][i]);
		}		

		/** Etape 1 **/

		if (g==1) {
			t5=g1 ();

			return t5;
		}

		/** Etape 2 **/

		if (g==2) {
			t5=g2 ();

			//for (i=0; i<b; i++) System.out.println("t4["+i+"] = "+t3[1][i]);

			return t5;
		}

		/** Etape 3 **/

		if (g==3){
			t5=g3 ();

			return t5;
		}

		for (i=0; i<n; i++) t5[i]=t1[i];

		return t5;
	}

}
# IaNivMoyen.java

// Ceci est la dernière version en classe (objet IA).

/**

   Voici le résumé de mon IA "semi-intelligente" (l'objectif) :  

   1) On tape tous les chiffres dans l'ordre (couleurs correspondantes)
   On enregistre les résultats dans un tableau : 2 bien placé, 3 mal placé, etc...
	
   2) On teste l'existence de chaque chiffre (couleur correspondante) en faisant une ligne de ce chiffre, puis on enregistre les chiffres existants dans la combinaison, et ceux qui n'y sont pas (séparément). On tient compte du nombre voulu (on s'arrête dès que le nombre de chiffres bons attendus (étape 2) a été atteint.

   3) On teste le placement des chiffres par rapport à ceux qui n'y sont pas (ordre), là aussi, en tenant compte des nombres existants dans le code (déterminés à l'étape 3) (on stocke le placement des chiffres dans un tableau).
   On s'arrête lorsqu'il reste 2 ou 3 chiffres à trouver pour passer directement à l'étape 5 (recherche de la combinaison gagnante) pour économiser deux ou trois tours en cas de chance.

   4) On entre les chiffres dans l'ordre établi à l'étape 4, puis on teste toutes 
   les possibilités restantes (2 s'il reste deux chiffres à placer, ou 3 s'il en reste trois) si la combinaison n'est pas bonne du premier coup.

   La bonne combinaison est trouvée !

   Signification des variables dans le code : 

   tabResultat : tableau des résultats envoyé par l'IA.
   tabPlacement : tableau contenant les valeurs des nombre de chiffres respectivement bien placés et mal placés au coup précédent.
   tabOccurence : tableau des occurences des chiffres dans le code à trouver (information trouvée au cours de l'étape 2 (Etape==2)).
   tabFinal : tableau que l'on renvoit au final (normalement c'est le tabResultat, mais il y une erreur à corriger : il doit contenir nbreChiffre cases et non valeurMax, donc, il faut corriger les fonctions qui utilisent tabResultat pour résoudre le problème).
   tabTrouves : tableau contenant la place des chiffres trouvé à l'étape 3 (Etape==3).

   i, j : variables pour les boucles.

   test : la variable testée à l'étape 3
   mauvaisChiffre : un chiffre qui n'est pas dans le code
   cmp : l'étape 3 s'arrete quand h==cmp
   cmp2 : la boucle de recherche d'un chiffre à tester dans le tableau tabOccurence s'arrete lorsque h==cmp2
   bn permet de jouer avec plus de 10 chiffres
   Etape = étape pour l'IA
   place : la place testée pour le chiffre test (étape 3)
   nn = compteur de tours pour la fon de l'étape 3.
   tmp : indique du chiffre test dans le tableau tabOccurence.

   valeurMin: valeur minimale d'un chiffre
   valeurMax : valeur maximale d'unn chiffre
   nbreChiffre : nombre de chiffres dans le code.



   Il reste deux problèmes à corriger.

   -Il faut que l'étape 2 prenne en compte les chiffres bien ou mal placés
   de l'étape 1 et s'arrête lorsqu'elle en trouve autant que dans l'intervalle de l'étape 1
   (s'il y en a 2 de 1 à 5, il faut que la fonction s'arrête quand elle en a trouvé 2 dans 
   cet intervalle et qu'elle passe directement à 6).

   -Il faut construire le tableau tabTrouves des placements des chiffres trouvés en fonction du nombre
   de chaque chiffre (s'il y a deux 2 dans la combinaison, il faut 2 cases pour stocker les emplacements des 2.
   Pour l'instant il y a une case par chiffre dans le tableau qui ne peut donc pas prendre en compte
   l'existance de doublons dans le code à résoudre.

**/
class IaNivMoyen {

    public static int [] tabResultat;
    public static int [] tabPlacement;
    public static int [][] tabOccurence;
    public static int [] tabFinal;	
    public static int [][] tabTrouves;

    public static int i;
    public static int j;
    int f;
    int d;
    public static int test;
    public static int mauvaisChiffre;
    public static int cmp;
    public static int cmp2;
    public static int cmp3;
    public static int cmp4;
    public static int bn;
    public static int Etape;
    public static int place;
    public static int nn;
    public static int tmp;

    public static int h;

    public static int valeurMin;
    public static int valeurMax;
    public static int nbreChiffre;
    public static int [][] tabfinal;
    /**

     **/

    public IaNivMoyen (int nbreChiffre, int valeurMin, int valeurMax) {
	if (valeurMax>nbreChiffre) bn=valeurMax; else bn=nbreChiffre;
		
	tabResultat = new int [bn];

	tabOccurence = new int [2][bn];
	tabFinal = new int [nbreChiffre];
	tabTrouves = new int [2][bn];

	f=0;
	d=0;

	i=0;
	j=0;
	test=0;
	mauvaisChiffre=0;
	cmp=0;
	cmp2=0;
	cmp3=0;
	cmp4=0;
	Etape=1;
	place=0;
	nn=0;
	tmp=-1;
	h=0;

	this.valeurMin=valeurMin;
	this.valeurMax=valeurMax;
	this.nbreChiffre=nbreChiffre;
    }
    /** 
     * cette fonction Etape1 essai la combinaison<br/>
     * Position1 =Couleur1<br/>
     * Position2 =Couleur2 <br/>
     * ...<br/>
     * Postion10 =Couleur10<br/>
     * On "perd" probablement deux coups si ca ne marche pas mais il se peut que l'on gagne à cette Etape1<br/>
     * Et tout le monde est content<br/>
     * @return un tableau qui pourrait probablement etre tabFinal si on gagne au Permier ou au 2e coup mais
     */
    public int [] Etape1 () {
	for (i=0; i<nbreChiffre; i++) {		  //Boucle for qui énumère les possibilités
	    if ((i+1+h)>valeurMax) tabResultat[i]=valeurMax;   //dans l'ordre et continue au coup suivant si nécssaire
	    else tabResultat[i]=i+1+h;	  //grâce à la valeur de h.
	}

	h=tabResultat[nbreChiffre-1];

	if (h==valeurMax) {Etape=2; h=1; cmp3=0;} 		  //On passe à l'étape 2 en attribuant à h la valeur 1 (on va le recycler à l'étape 2).

	for (i=0; i<nbreChiffre; i++) tabFinal[i]=tabResultat[i];  //Erreur à corriger (il ne faut pas que tabResultat.length>nbreChiffre normalement).

	return tabFinal;
    }

    /** 
     * cette fonction Etape2 essai trouver la bonne combinaison sans ordre<br/>
     * Position1 =Couleur1<br/>
     * Position2 =Couleur1 <br/>
     * ...<br/>
     * Postion10 =Couleur1<br/>
     * on récupere le nombre de fois que couleur1 apparaisse  puis on fait pareil pour couleur2,couleur3 ... couleur10<br/>
     * ainsi on saura exactement les couleurs exactes du code secret et leur occurences<br/>
     * ici on a utilisé un compteur cmp3 qui nous permet de ne pas perdre de coups des qu'on atteint le nbreChiffre du code on passe a Etape3<br/>
     *@return tabFinal le tableau final qui contient les coulers exactes du couleurs avec leur(s) occurence(s) respectives mais mal ordonné<br/>
     */

    public int [] Etape2 () { 


	for (i=0; i<nbreChiffre; i++) { 
	    tabResultat[i]=h;						
	}

	j=tabPlacement[0]+tabPlacement[1];							
		
	if (tabPlacement[0]>0 && h>=2) { tabOccurence[1][h-2]=tabPlacement[0]; cmp3+=tabPlacement[0]; }		
		
	for (i=0; i<tabOccurence[1].length; i++) System.out.println("tabOccurence["+1+"]["+i+"] = " + tabOccurence[1][i]);
		
	h++;
		
	if ((h>valeurMax+1) || cmp3>=nbreChiffre) {	
	    f=0; //variable de compatage des occurences pour l'étape 3.
	    d=0; //variable pour gérer l'avancement des tests dans l'étape 3.
						
	    Etape=3;
	    h=0;
	    cmp=0;
	    for (i=0; i<valeurMax; i++) if (tabOccurence[1][i]==tabPlacement[0]) cmp++; // On passe à l'étape 3 en préparant un compteur pour savoir combient il y a de chiffres trouvés dans tabOccurence (Si l'algo marche bien, il y en a toujours nbreChiffre).

	    int gg=0;

	    for (i=0; i<bn; i++) {
		if (tabOccurence[1][i]!=0) {
		    for (j=0; j<tabOccurence[1][i]; j++) {
			tabTrouves[0][gg] = tabOccurence[0][i];
			if (gg<tabTrouves[0].length) gg++;
		    }
		}
	    }

	    int [] ggg = new int [nbreChiffre];

	    j=0;

	    for (i=0; i<bn; i++) {
		if (tabTrouves[0][i]!=0) {
		    ggg[j] = tabTrouves[0][i];
		    if (j<nbreChiffre) j++;
		}
	    }

	    //trieDecroissant(ggg); //on trie ggg avant de mettre les valeurs dans tabTrouves.

	    for (i=0; i<bn; i++) System.out.println("tabTrouves[0]["+i+"] = "+tabTrouves[0][i]);

	    for (i=0; i<nbreChiffre; i++) System.out.println("ggg["+i+"] = "+ggg[i]);

	    tabTrouves = new int [2][nbreChiffre];

	    for (i=0; i<nbreChiffre; i++) {
		tabTrouves[0][i] = ggg[i]; //on copie le tableau dans tabTrouves[0].
		tabTrouves[1][i] = -1;
	    }

	    //for (i=0; i<tabOccurence.length; i++) for (j=0; j<tabOccurence[i].length; j++) System.out.println("tabOccurence["+i+"]["+j+"] = "+tabOccurence[i][j]);

	    //System.out.println();
	System.out.println("voici tabTrouves");
	afficher(tabTrouves);

	    //cmp4=0;

	    //Etape3 (); 
	}

	for (i=0; i<nbreChiffre; i++) tabFinal[i]=tabResultat[i];  //Erreur à corriger (il ne faut pas que tabResultat.length>nbreChiffre normalement).

	return tabFinal;
    }
    /** 
     * Cette fonction compte d'Occurences de chaque couleurs dans un tableau<br/>
     * @param [] t un tableau quelconque à une dimension <br/>
     * @param nbreChiffre le nombre de couleurs<br/>
     * @return valeurMin <br/>
     */
    public int compteOccurences (int [] t, int nbreChiffre) {
	int i, valeurMin=0;

	for (i=0; i<t.length; i++) if (t[i]==nbreChiffre) valeurMin++;
		
	return valeurMin;
    }

    /**
     * Cette fonction cherche la couleur qui est dans le code secret<br/>
     * @param [] t50 est un tableau <br/>
     * @param nbreChiffre le nombre de couleurs<br/>
     * @param occurences de chaque couleurs<br/>
     * @return -1<br/>
     */

    public static int chercheValeur (int [] t, int nbreChiffre, int occ) {
	int i, valeurMin=0;

	for (i=0; i<t.length; i++) {
	    if (t[i]==nbreChiffre) valeurMin++;
	    if (valeurMin>=occ) return i;
	}

	return -1;
    }

    public static boolean chercheOccurence (int [] t, int nbreChiffre) {
	int i;

	for (i=0; i<t.length; i++) if (t[i]==nbreChiffre) return true;

	return false;
    }

    public static boolean chercheOccurenceVal (int [] t, int nbreChiffre, int valeurMin) {
	int i;

	for (i=0; i<t.length; i++) {
	    if (t[i]==nbreChiffre) if (i==valeurMin) return true;
	}

	return false;
    }
	public static void afficher(int [][] tab){
	for (i=0; i<tab.length; i++) {
	    for (j=0; j<tab[i].length; j++) {
		System.out.print(tab[i][j]+"\t");
	    }
	    System.out.println();
	}
}

    public void verifieFinEtape3 () {
	int i;

	int hhh=0;

	for (i=0; i<tabTrouves[1].length; i++) if (tabTrouves[1][i]!=-1) hhh++;

	if (hhh>=nbreChiffre) Etape=4;
    }


    public static void trieDecroissant (int [] t) {
	int i, j, c=0;

	for (i=0; i<t.length; i++) for (j=i+1; j<t.length; j++) if (t[j]>t[i]) {
		    c=t[i];

		    t[i]=t[j];

		    t[j]=c;
		}
    }

    /** 
     * cette fonction Etape3 trouve le bon odre du tabfinal<br/>
     *cependant il y'a deux Methodes pour se faire
     * Methode 1: D'abord si on a une couleur qui a plusieurs occurences on commence par celle-ci<br/>
     * car Mathématiquement il est plus benefique pour nous de trouver les deux ou trois places d'une meme couleur qu(une seule d'unecouleur ********cette methode est moin intelligente mais moin chere pour nous en matiere de coups*********<br/>
     * si on trouve les 2 places par exemple et que par exemple on a 5 couleurs en tout bon il nous restera au plus 3 couleur pour 3 places qui ne depense au maximum que 6 coups, en tout on depense 16coups si on decide de faire ceci <br/>
     *  Methode 2: une autre possiblité c'est d'essayer de faire un tableau qui contient toutes les couleurs on regarde le nombre de couleurs bien placés<br/>
     * -**on echange 2 couleurs successifs (tabfinal[1][i] et tabfinal[1][i+1]) on regarde le nombre de bien placés si celui ci est:<br/>
     * > (superieur) au precedent
     * ----> on fait de meme pour tabfinal[1][i+1] et tabfinal[1][i+2] <br/>
     * sinon <=(inferieur) au precedent <br/>
     * ----> on retour au tableau precedent juste en echangeant tabfinal[1][i+1] et tabfinal[1][i]<br/>
     * puis on increment i, jusqu'à atteindre le bout du tableau, si on atteint pas la bonne combinaison on fait pareil tabfinal[1][i] et tabfinal[1][i+2], ainsi de suite on finira un jours par atteindre la bonne combinaison<br/>
     * ********cette methode est plus intelligente plus chere et pour nous en matiere de coups*********<br/>
     * @return [] t5 un tableau qui contient les differents couleurs
     */

    public int [] Etape3 () {
	//System.out.println("\ncmp = "+cmp);

	if (mauvaisChiffre==0) {	
	    for (i=0; i<valeurMax; i++){
		if (tabOccurence[1][i]==0) { mauvaisChiffre=tabOccurence[0][i]; i=valeurMax; } //Récupération d'un chiffre qui n'est pas dans la combinaison à trouver.
	    }
	}

	if (nn>0) {
	    place++;
	}

	if (nn>0){
	    if (tabPlacement[0]>=1) {
		tabTrouves[1][d+f]=place; //Enregistrement du résultat du coup précédant dans tabTrouves.

		f++;

		if (f>=compteOccurences(tabTrouves[0],tabTrouves[0][d])) {
		    d+=f;
		    f=0;
		    place=0;
		}		
	    }
	}
	//On incrémente la place si on a dépassé le premier coup.
	if (place>=nbreChiffre) {place=0; d+=f; }		  //Lorqu'on a testé toutes les places d'un nombre, on passe au nombre suivant grâce à h.						  
	//Il faudrait qu'on passe au coup suivant dès que l'on a trouvé la place d'un nombre 
	if (d>=tabTrouves[0].length) {Etape=4; Etape4();}	  //(s'il y a deux 2, par exemple, il faut attendre d'avoir trouvé les deux places de 2).

	cmp2=0;
	tmp=0;

	if (Etape==3) {								      //Si l'on a trouvé un nombre dans tabOccurence,
	    System.out.println("f = "+f+"\nd = "+d);
	    //h qui s'incrémente quand on finit de tester un nombre et cmp2 qui s'incrémente
	    test=tabTrouves[0][d];					//à chaque fois que l'on trouve un nombre dans le tableau et arrête la boucle quand cmp2==h.
			
	    for (i=0; i<place; i++) { 				//Attribution des chiffres à la combinaison envoyée (stokée dans tabResultat).
		tabResultat[i]=mauvaisChiffre;
	    }
			
	    tabResultat[place]=test;						//Valeur test à la place "place".
			
	    if (place<nbreChiffre-1){
		for (i=place+1; i<nbreChiffre; i++) { 
		    tabResultat[i]=mauvaisChiffre;
		}
	    }

	    nn++;				      //nn : numéro du tour (depuis le début de l'étape 3).
	}
		
	for (i=0; i<nbreChiffre; i++) tabFinal[i]=tabResultat[i];  //Erreur à corriger (il ne faut pas que tabResultat.length>nbreChiffre normalement).

	return tabFinal;
    }
    /** 
     * Fonction qui affiche les résulats en lisant les nombres et leur place dans le tableau tabTrouves.<br/>
     * @return [] t5 un tableau qui contient les differnts couleur
     */
 
    public int [] Etape4 () {
	for (i=0; i<tabTrouves[1].length; i++) tabTrouves[1][i]--;

	for (i=0; i<tabTrouves.length; i++) for (j=0; j<tabTrouves[i].length; j++) System.out.println("tabTrouves["+i+"]["+j+"] = "+tabTrouves[i][j]);

	for (i=0; i<nbreChiffre; i++) if (tabTrouves[1][i]>-1) tabResultat[tabTrouves[1][i]]=tabTrouves[0][i]; //On affiche les résulats en lisant
	//les nombres et leur place dans le tableau tabTrouves.
	for (i=0; i<nbreChiffre; i++) tabFinal[i]=tabResultat[i];

	return tabFinal;
    }

/**
       Fonction qui appelle les autres fonctions de la classe.<br/>
        * @param [] tabPlacement un tableau qui contient le nombre de couleurs bien placés et le nombre de couleurs mal placés<br/>
        * @return [] tabFinal un tableau qui contient les differents couleurs<br/>
	**/
    public int [] iAs1Moyen (int [] tabPlacement) {
	this.tabPlacement=tabPlacement;

	int [] tabFinal = new int [nbreChiffre];

	if ((Etape==2) && (h==1)) {
	    for (i=0; i<valeurMax; i++) tabOccurence[0][i]=i+1;
	}

	/** Etape 1 **/

	if (Etape==1) {
	    tabFinal=Etape1 ();

	    return tabFinal;
	}

	/** Etape 2 **/

	if (Etape==2) {
	    tabFinal=Etape2 ();
	    //for (i=0; i<b; i++) System.out.println("tabOccurence["+i+"] = "+tabOccurence[0][i]);
	    //for (i=0; i<valeurMax; i++) System.out.println("t4["+i+"] = "+tabOccurence[1][i]);

	    return tabFinal;
	}

	/** Etape 3 **/

	if (Etape==3) {
	    tabFinal=Etape3 ();
	    //for (i=0; i<valeurMax; i++) System.out.println("tabFinal["+i+"] = "+tabTrouves[0][i]);
	    //for (i=0; i<valeurMax; i++) System.out.println("tabTrouves["+i+"] = "+tabTrouves[1][i]);

	    return tabFinal;
	}

	/** Etape 4 **/

	if (Etape==4){
	    tabFinal=Etape4 ();

	    return tabFinal;
	}

	for (i=0; i<nbreChiffre; i++) tabFinal[i]=tabResultat[i];

	return tabFinal;
    }
}

# Instructions.java

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

public class Instructions extends JFrame {
	Container4 p1;

	public Instructions () {
		super("Instructions");
		
		p1 = new Container4 (this);
		
		this.add(p1);
	
		this.setMinimumSize(new Dimension(600, 400));
		this.setPreferredSize(new Dimension(640, 480));
		this.setLocationRelativeTo(null);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setVisible(true);		
		pack ();
	}
	
	public static void main (String [] args) {
		Instructions f = new Instructions ();
	}

}

class Container4 extends JPanel {
	Instructions f;
	Clique [] clique;
	int i;
	Color couleur;
	
	JTextArea [] label;
	
	JButton [] boutons;
	
	public Container4 (Instructions f) {
		super ();
		
		label = new JTextArea [4];
		
		String [] s = new String [4];
		
		for (i=0; i<s.length; i++) s[i] = "";
		
		s = contenuInstructions ();

		Font font = new Font("Serif", Font.PLAIN, 18);
		
		couleur = new Color(-16738048);
		
		for (i=0; i<4; i++) {
			label[i] = new JTextArea();
			label[i].setText(s[i]);
			label[i].setFont(font);
			label[i].setEditable(false);
			label[i].setBackground(couleur);
			label[i].setForeground(Color.WHITE);
			label[i].setWrapStyleWord(true);
			this.add(label[i]);
			label[i].setVisible(false);
		}
		
		clique = new Clique [8];
		
		boutons = new JButton [8];
		
		boutons[0] = new JButton("Principe du jeu");
		boutons[1] = new JButton("Comment jouer ?");
		boutons[2] = new JButton("Interphace graphique");
		boutons[3] = new JButton("Options et mode de jeu");
		boutons[4] = new JButton("Retour");
		boutons[5] = new JButton("Retour");
		boutons[6] = new JButton("Retour");
		boutons[7] = new JButton("Retour");
		
		
		for (i=0; i<boutons.length; i++) {
			clique[i] = new Clique(i);
			boutons[i].addActionListener(clique[i]);
			this.add(boutons[i]);
			if (i>3) boutons[i].setVisible(false);
		}
			
		this.f = f;
	}
	
	public void paintComponent (Graphics g) {
		int getWidth = this.getWidth();
		int getHeight = this.getHeight();
		
		g.setColor(couleur);	
		g.fillRect(0,0,getWidth,getHeight);
		
		for (i=0; i<4; i++) {
			boutons[i].setBounds(getWidth/12*6-250/2, getHeight/15*(2+3*i), 250,50);
			label[i].setBounds(getWidth/12*6-250/2, getHeight/15*(2), 450,250);
		}
		
		for (i=4; i<8; i++) boutons[i].setBounds(getWidth/12*6-250/2, getHeight/15*(11),250,50);
		
		//System.out.println("OK.");
		
		this.setPreferredSize(new Dimension(getWidth,getHeight));
	}
	
	public String [] contenuInstructions () {
		int i;
		String [] s = new String [4];
		
		for (i=0; i<s.length; i++) s[i] = "";
		
		s[0] = "Master mind est un jeu de tactique\n" +
				"dont le but du jeu sera de trouver\n" +
				"le plus rapidement possible\n" +
				"une combinaison de couleurs et de les placer\n" +
				"dans le bon ordre.";
		s[1] = "Pour vous aider, vous pourrez choisir\n" +
				"le nombre de chiffres, la difficulte, \n" +
				"le nombre de coups maximum \n"+
				"ainsi que le temps, si vous choisissez de jouer\n"+
				"en mode "+'"'+"contre la montre"+'"'+".";
		s[2] = "Pour jouer, il vous faudra, une fois\n" +
				"que vous aurez appuyé sur "+'"'+"Commencer"+'"'+", cliquez\n" +
				"sur les couleurs de votre choix et validez\n" +
				"la combinaison. Les réponses s'affichent sur\n" +
				"le côté droit du plateau de jeu : un pion\n" +
				"rouge signifie que la couleur est bien placée.\n" +
				"Un pion blanc signifie que la couleur est mal\n" +
				"placée dans la combinaison mais qu'elle existe\n" +
				"dans la solution. Enfin, un pion jaune signifie\n" +
				"que la couleur est bien ou mal placée.";
		s[3] = "Vous pouvez changer les couleurs\n" +
				"des pions du jeu avant de commencer une partie\n" +
				"en appuyant sur le bouton "+'"'+"Changer les\n" +
				"couleurs"+'"'+" et en cliquant sur les pions\n" +
				"de couleurs.";
		
		return s;
	}
	
	class Clique implements ActionListener {
		int n;
		
		int i;
		public Clique(int n) {
			this.n = n;
		}
		public void actionPerformed(ActionEvent e) {
			if (n==0) { //Principe du jeu
				for (i=0; i<4; i++) boutons[i].setVisible(false);
				label[0].setVisible(true);
				boutons[4].setVisible(true);
			}
			
			if (n==1) { //Comment jouer
				for (i=0; i<4; i++) boutons[i].setVisible(false);
				label[1].setVisible(true);
				boutons[5].setVisible(true);
			}
			
			if (n==2) { //
				for (i=0; i<4; i++) boutons[i].setVisible(false);
				label[2].setVisible(true);
				boutons[6].setVisible(true);
			}
			
			if (n==3) { //
				for (i=0; i<4; i++) boutons[i].setVisible(false);
				label[3].setVisible(true);
				boutons[7].setVisible(true);
			}
			
			if (n==4) { //Retour
				for (i=0; i<4; i++) boutons[i].setVisible(true);
				label[0].setVisible(false);
				boutons[4].setVisible(false);
			}
			
			if (n==5) { //Retour
				for (i=0; i<4; i++) boutons[i].setVisible(true);
				label[1].setVisible(false);
				boutons[5].setVisible(false);
			}
			
			if (n==6) { //Retour
				for (i=0; i<4; i++) boutons[i].setVisible(true);
				label[2].setVisible(false);
				boutons[6].setVisible(false);
			}
			
			if (n==7) { //Retour
				for (i=0; i<4; i++) boutons[i].setVisible(true);
				label[3].setVisible(false);
				boutons[7].setVisible(false);
			}
		}
	}
}

# javadoc/allclasses-frame.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>All Classes</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<h1 class="bar">All&nbsp;Classes</h1>
<div class="indexContainer">
<ul>
<li><a href="Mastermind.html" title="class in &lt;Unnamed&gt;" target="classFrame">Mastermind</a></li>
<li><a href="P1.html" title="class in &lt;Unnamed&gt;" target="classFrame">P1</a></li>
<li><a href="P2.html" title="class in &lt;Unnamed&gt;" target="classFrame">P2</a></li>
</ul>
</div>
</body>
</html>

# javadoc/allclasses-noframe.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:33 CEST 2017 -->
<title>All Classes</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<h1 class="bar">All&nbsp;Classes</h1>
<div class="indexContainer">
<ul>
<li><a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></li>
<li><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></li>
<li><a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a></li>
</ul>
</div>
</body>
</html>

# javadoc/constant-values.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>Constant Field Values</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Constant Field Values";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?constant-values.html" target="_top">Frames</a></li>
<li><a href="constant-values.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 title="Constant Field Values" class="title">Constant Field Values</h1>
<h2 title="Contents">Contents</h2>
</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?constant-values.html" target="_top">Frames</a></li>
<li><a href="constant-values.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/deprecated-list.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>Deprecated List</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Deprecated List";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li class="navBarCell1Rev">Deprecated</li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?deprecated-list.html" target="_top">Frames</a></li>
<li><a href="deprecated-list.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 title="Deprecated API" class="title">Deprecated API</h1>
<h2 title="Contents">Contents</h2>
</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li class="navBarCell1Rev">Deprecated</li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?deprecated-list.html" target="_top">Frames</a></li>
<li><a href="deprecated-list.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/help-doc.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:33 CEST 2017 -->
<title>API Help</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="API Help";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li class="navBarCell1Rev">Help</li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?help-doc.html" target="_top">Frames</a></li>
<li><a href="help-doc.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 class="title">How This API Document Is Organized</h1>
<div class="subTitle">This API (Application Programming Interface) document has pages corresponding to the items in the navigation bar, described as follows.</div>
</div>
<div class="contentContainer">
<ul class="blockList">
<li class="blockList">
<h2>Package</h2>
<p>Each package has a page that contains a list of its classes and interfaces, with a summary for each. This page can contain six categories:</p>
<ul>
<li>Interfaces (italic)</li>
<li>Classes</li>
<li>Enums</li>
<li>Exceptions</li>
<li>Errors</li>
<li>Annotation Types</li>
</ul>
</li>
<li class="blockList">
<h2>Class/Interface</h2>
<p>Each class, interface, nested class and nested interface has its own separate page. Each of these pages has three sections consisting of a class/interface description, summary tables, and detailed member descriptions:</p>
<ul>
<li>Class inheritance diagram</li>
<li>Direct Subclasses</li>
<li>All Known Subinterfaces</li>
<li>All Known Implementing Classes</li>
<li>Class/interface declaration</li>
<li>Class/interface description</li>
</ul>
<ul>
<li>Nested Class Summary</li>
<li>Field Summary</li>
<li>Constructor Summary</li>
<li>Method Summary</li>
</ul>
<ul>
<li>Field Detail</li>
<li>Constructor Detail</li>
<li>Method Detail</li>
</ul>
<p>Each summary entry contains the first sentence from the detailed description for that item. The summary entries are alphabetical, while the detailed descriptions are in the order they appear in the source code. This preserves the logical groupings established by the programmer.</p>
</li>
<li class="blockList">
<h2>Annotation Type</h2>
<p>Each annotation type has its own separate page with the following sections:</p>
<ul>
<li>Annotation Type declaration</li>
<li>Annotation Type description</li>
<li>Required Element Summary</li>
<li>Optional Element Summary</li>
<li>Element Detail</li>
</ul>
</li>
<li class="blockList">
<h2>Enum</h2>
<p>Each enum has its own separate page with the following sections:</p>
<ul>
<li>Enum declaration</li>
<li>Enum description</li>
<li>Enum Constant Summary</li>
<li>Enum Constant Detail</li>
</ul>
</li>
<li class="blockList">
<h2>Tree (Class Hierarchy)</h2>
<p>There is a <a href="overview-tree.html">Class Hierarchy</a> page for all packages, plus a hierarchy for each package. Each hierarchy page contains a list of classes and a list of interfaces. The classes are organized by inheritance structure starting with <code>java.lang.Object</code>. The interfaces do not inherit from <code>java.lang.Object</code>.</p>
<ul>
<li>When viewing the Overview page, clicking on "Tree" displays the hierarchy for all packages.</li>
<li>When viewing a particular package, class or interface page, clicking "Tree" displays the hierarchy for only that package.</li>
</ul>
</li>
<li class="blockList">
<h2>Deprecated API</h2>
<p>The <a href="deprecated-list.html">Deprecated API</a> page lists all of the API that have been deprecated. A deprecated API is not recommended for use, generally due to improvements, and a replacement API is usually given. Deprecated APIs may be removed in future implementations.</p>
</li>
<li class="blockList">
<h2>Index</h2>
<p>The <a href="index-all.html">Index</a> contains an alphabetic list of all classes, interfaces, constructors, methods, and fields.</p>
</li>
<li class="blockList">
<h2>Prev/Next</h2>
<p>These links take you to the next or previous class, interface, package, or related page.</p>
</li>
<li class="blockList">
<h2>Frames/No Frames</h2>
<p>These links show and hide the HTML frames.  All pages are available with or without frames.</p>
</li>
<li class="blockList">
<h2>All Classes</h2>
<p>The <a href="allclasses-noframe.html">All Classes</a> link shows all classes and interfaces except non-static nested types.</p>
</li>
<li class="blockList">
<h2>Serialized Form</h2>
<p>Each serializable or externalizable class has a description of its serialization fields and methods. This information is of interest to re-implementors, not to developers using the API. While there is no link in the navigation bar, you can get to this information by going to any serialized class and clicking "Serialized Form" in the "See also" section of the class description.</p>
</li>
<li class="blockList">
<h2>Constant Field Values</h2>
<p>The <a href="constant-values.html">Constant Field Values</a> page lists the static final fields and their values.</p>
</li>
</ul>
<span class="emphasizedPhrase">This help file applies to API documentation generated using the standard doclet.</span></div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li class="navBarCell1Rev">Help</li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?help-doc.html" target="_top">Frames</a></li>
<li><a href="help-doc.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/index-all.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>Index</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Index";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li class="navBarCell1Rev">Index</li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?index-all.html" target="_top">Frames</a></li>
<li><a href="index-all.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="contentContainer"><a href="#I:A">A</a>&nbsp;<a href="#I:B">B</a>&nbsp;<a href="#I:C">C</a>&nbsp;<a href="#I:D">D</a>&nbsp;<a href="#I:E">E</a>&nbsp;<a href="#I:F">F</a>&nbsp;<a href="#I:G">G</a>&nbsp;<a href="#I:H">H</a>&nbsp;<a href="#I:I">I</a>&nbsp;<a href="#I:J">J</a>&nbsp;<a href="#I:L">L</a>&nbsp;<a href="#I:M">M</a>&nbsp;<a href="#I:N">N</a>&nbsp;<a href="#I:O">O</a>&nbsp;<a href="#I:P">P</a>&nbsp;<a href="#I:Q">Q</a>&nbsp;<a href="#I:R">R</a>&nbsp;<a href="#I:S">S</a>&nbsp;<a href="#I:T">T</a>&nbsp;<a href="#I:U">U</a>&nbsp;<a href="#I:V">V</a>&nbsp;<a href="#I:W">W</a>&nbsp;<a href="#I:X">X</a>&nbsp;<a name="I:A">
<!--   -->
</a>
<h2 class="title">A</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#a">a</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#abt">abt</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#actb">actb</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#action">action</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#actionBT">actionBT</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#actionClique">actionClique</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Clique.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed(ActionEvent)</a></span> - Method in class <a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.CliqueOptions.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed(ActionEvent)</a></span> - Method in class <a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;">P1.CliqueOptions</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Clique.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed(ActionEvent)</a></span> - Method in class <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.Clique3.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed(ActionEvent)</a></span> - Method in class <a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#activ%C3%A9">activé</a></span> - Variable in class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheCoupsAvantAbandon-int-int-">afficheCoupsAvantAbandon(int, int)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheErreurCouleurs--">afficheErreurCouleurs()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#afficheErreurJouer1Partie--">afficheErreurJouer1Partie()</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#afficheErreurJouerPLusieursParties--">afficheErreurJouerPLusieursParties()</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheErreurNombreDeCases--">afficheErreurNombreDeCases()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheErreurNombreDeCouleurs--">afficheErreurNombreDeCouleurs()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheErreurNombreDeCouleursM12--">afficheErreurNombreDeCouleursM12()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheErreurPartieNonTrouv%C3%A9e--">afficheErreurPartieNonTrouvée()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.AfficheIA.html#AfficheIA--">AfficheIA()</a></span> - Constructor for class <a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;">P1.AfficheIA</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheJeuGagne-int-int-">afficheJeuGagne(int, int)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheJeuGagneContreLaMontre-java.lang.String-">afficheJeuGagneContreLaMontre(String)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheJeuGagneContreLaMontrePlus-int-int-java.lang.String-">afficheJeuGagneContreLaMontrePlus(int, int, String)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheMessage-java.lang.String-java.lang.String-char-">afficheMessage(String, String, char)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#affichePerdu--">affichePerdu()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#affichePerduContreLaMontre-java.lang.String-">affichePerduContreLaMontre(String)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#affichePerduContreLaMontreCoupsRestants-int-int-">affichePerduContreLaMontreCoupsRestants(int, int)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#afficheResultat--">afficheResultat()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#afficheResultat2--">afficheResultat2()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#afficheResultat3--">afficheResultat3()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#afficheScoresNonTrouv%C3%A9s--">afficheScoresNonTrouvés()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#afficheSolutions-int:A-">afficheSolutions(int[])</a></span> - Static method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#agrandieTab-P1.Coup:A-">agrandieTab(P1.Coup[])</a></span> - Static method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ajustH">ajustH</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ajustV">ajustV</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#aleatString-int-">aleatString(int)</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#attendGangne--">attendGangne()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#avanceeDuTour">avanceeDuTour</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:B">
<!--   -->
</a>
<h2 class="title">B</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#b">b</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#b1">b1</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#b1">b1</a></span> - Variable in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#b2">b2</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#bar">bar</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#barrePanel">barrePanel</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#bouton">bouton</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#boutons">boutons</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#Boutons-java.lang.String-">Boutons(String)</a></span> - Constructor for class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#boutons">boutons</a></span> - Variable in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#BoutonTransparentAction-int-">BoutonTransparentAction(int)</a></span> - Constructor for class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#box">box</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#box">box</a></span> - Variable in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:C">
<!--   -->
</a>
<h2 class="title">C</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#c">c</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#cacheInfo">cacheInfo</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#cacheInfoB">cacheInfoB</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#calculTemps--">calculTemps()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#calculTempsS--">calculTempsS()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#caseReponseVide">caseReponseVide</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#caseVide">caseVide</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#champNom">champNom</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#champNombre">champNombre</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#champTemps">champTemps</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#ChargerPartie-int-">ChargerPartie(int)</a></span> - Constructor for class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#chargeUnePartie-int-">chargeUnePartie(int)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#classTabDateC-java.lang.String:A-int:A-">classTabDateC(String[], int[])</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Clique.html#Clique-int-">Clique(int)</a></span> - Constructor for class <a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Clique.html#Clique-int-">Clique(int)</a></span> - Constructor for class <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#clique">clique</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#clique1">clique1</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#clique2">clique2</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.Clique3.html#Clique3-int-">Clique3(int)</a></span> - Constructor for class <a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#cliqueBInfo">cliqueBInfo</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.CliqueOptions.html#CliqueOptions-int-">CliqueOptions(int)</a></span> - Constructor for class <a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;">P1.CliqueOptions</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#cliquePanel">cliquePanel</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#CliqueSouris-int-">CliqueSouris(int)</a></span> - Constructor for class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#cliqueSouris">cliqueSouris</a></span> - Variable in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#CliqueSouris-int-">CliqueSouris(int)</a></span> - Constructor for class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#clm">clm</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#clm">clm</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#cmp5">cmp5</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#commenceTemps-int-">commenceTemps(int)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#compteReponses2-int-int-">compteReponses2(int, int)</a></span> - Static method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#compteReponses3-int-">compteReponses3(int)</a></span> - Static method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#Container1-P1.ChargerPartie-java.lang.String:A-int-">Container1(P1.ChargerPartie, String[], int)</a></span> - Constructor for class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#Container5-P1.TailleDesPolices-">Container5(P1.TailleDesPolices)</a></span> - Constructor for class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#couleur">couleur</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Clique.html#couleurBouton">couleurBouton</a></span> - Variable in class <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#couleurBouton">couleurBouton</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#CouleurDuLabel">CouleurDuLabel</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#couleurs">couleurs</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#couleurs3d">couleurs3d</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#couleursAleat-int-">couleursAleat(int)</a></span> - Static method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#couleursDyn">couleursDyn</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Coup.html#Coup-int-int-">Coup(int, int)</a></span> - Constructor for class <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#coups">coups</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#coupsIllimit%C3%A9s">coupsIllimités</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#coupsIllimit%C3%A9s">coupsIllimités</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#cp">cp</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:D">
<!--   -->
</a>
<h2 class="title">D</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#demandeEffacer1-java.lang.String-">demandeEffacer1(String)</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#demandeEffacerPlusieurs-int-">demandeEffacerPlusieurs(int)</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#demandeSauvegarde--">demandeSauvegarde()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#dessineCarreCouleurs">dessineCarreCouleurs</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#dessineCarreCouleurs-java.awt.Graphics-int-int-int-int-int-">dessineCarreCouleurs(Graphics, int, int, int, int, int)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.Dors.html#Dors--">Dors()</a></span> - Constructor for class <a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;">Mastermind.Dors</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Dors.html#Dors--">Dors()</a></span> - Constructor for class <a href="P1.Dors.html" title="class in &lt;Unnamed&gt;">P1.Dors</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:E">
<!--   -->
</a>
<h2 class="title">E</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#e">e</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#effacer">effacer</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#effacerPlusieurs">effacerPlusieurs</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#enregistrementFichiers">enregistrementFichiers</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#enregistreParametres--">enregistreParametres()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.TailleDesPolices.html#erreurEntier--">erreurEntier()</a></span> - Method in class <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#erreurOption-java.lang.String-int-int-">erreurOption(String, int, int)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.TailleDesPolices.html#erreurValeur--">erreurValeur()</a></span> - Method in class <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#estSelectionn%C3%A9--">estSelectionné()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#exit--">exit()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:F">
<!--   -->
</a>
<h2 class="title">F</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Container1.html#f">f</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#f">f</a></span> - Variable in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#f">f</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#f">f</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.PJeu.html#f">f</a></span> - Variable in class <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#ff1">ff1</a></span> - Variable in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#ff1">ff1</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ff1">ff1</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#finDuJeu--">finDuJeu()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#finJeuIA">finJeuIA</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:G">
<!--   -->
</a>
<h2 class="title">G</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#getActiv%C3%A9--">getActivé()</a></span> - Method in class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#getEffacerPlusieurs--">getEffacerPlusieurs()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#getHeight">getHeight</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#getJeuCommence--">getJeuCommence()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#getSelected--">getSelected()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#getWidth">getWidth</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#grandPionTransparent">grandPionTransparent</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:H">
<!--   -->
</a>
<h2 class="title">H</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#h">h</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#heures">heures</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:I">
<!--   -->
</a>
<h2 class="title">I</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Container1.Clique.html#i">i</a></span> - Variable in class <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#i">i</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#i">i</a></span> - Variable in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#i">i</a></span> - Variable in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.Clique3.html#i">i</a></span> - Variable in class <a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#i">i</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Coup.html#i">i</a></span> - Variable in class <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#i">i</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ia--">ia()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#iaCD">iaCD</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#iaCF">iaCF</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#iaCM">iaCM</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#iaSMF">iaSMF</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#iaSMM">iaSMM</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#imageB">imageB</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#imageCharg%C3%A9e">imageChargée</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#images">images</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#infosDuJeu">infosDuJeu</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#iTemps">iTemps</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:J">
<!--   -->
</a>
<h2 class="title">J</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Coup.html#j">j</a></span> - Variable in class <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#jeuCommence">jeuCommence</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.JeuPause.html#JeuPause--">JeuPause()</a></span> - Constructor for class <a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;">P1.JeuPause</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.PJeu.html#jeuPause">jeuPause</a></span> - Variable in class <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#jeuT">jeuT</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#jouer">jouer</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#jsp1">jsp1</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:L">
<!--   -->
</a>
<h2 class="title">L</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Container5.html#label">label</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#label">label</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ldpdt">ldpdt</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Coup.html#ldPJ">ldPJ</a></span> - Variable in class <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ldPJ">ldPJ</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:M">
<!--   -->
</a>
<h2 class="title">M</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#m11">m11</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#main-java.lang.String:A-">main(String[])</a></span> - Static method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><a href="Mastermind.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Mastermind</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#Mastermind-java.lang.String-">Mastermind(String)</a></span> - Constructor for class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Mastermind.Dors</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#maxTemps">maxTemps</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#metAJourInfos--">metAJourInfos()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#metAjourP1--">metAjourP1()</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#minutes">minutes</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked(MouseEvent)</a></span> - Method in class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked(MouseEvent)</a></span> - Method in class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked(MouseEvent)</a></span> - Method in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked(MouseEvent)</a></span> - Method in class <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered(MouseEvent)</a></span> - Method in class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered(MouseEvent)</a></span> - Method in class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered(MouseEvent)</a></span> - Method in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered(MouseEvent)</a></span> - Method in class <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseExited-java.awt.event.MouseEvent-">mouseExited(MouseEvent)</a></span> - Method in class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseExited-java.awt.event.MouseEvent-">mouseExited(MouseEvent)</a></span> - Method in class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseExited-java.awt.event.MouseEvent-">mouseExited(MouseEvent)</a></span> - Method in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseExited-java.awt.event.MouseEvent-">mouseExited(MouseEvent)</a></span> - Method in class <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mousePressed-java.awt.event.MouseEvent-">mousePressed(MouseEvent)</a></span> - Method in class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mousePressed-java.awt.event.MouseEvent-">mousePressed(MouseEvent)</a></span> - Method in class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mousePressed-java.awt.event.MouseEvent-">mousePressed(MouseEvent)</a></span> - Method in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.RedimBonus.html#mousePressed-java.awt.event.MouseEvent-">mousePressed(MouseEvent)</a></span> - Method in class <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased(MouseEvent)</a></span> - Method in class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased(MouseEvent)</a></span> - Method in class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased(MouseEvent)</a></span> - Method in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased(MouseEvent)</a></span> - Method in class <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:N">
<!--   -->
</a>
<h2 class="title">N</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#n">n</a></span> - Variable in class <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Clique.html#n">n</a></span> - Variable in class <a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.CliqueOptions.html#n">n</a></span> - Variable in class <a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;">P1.CliqueOptions</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Clique.html#n">n</a></span> - Variable in class <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#n">n</a></span> - Variable in class <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#n">n</a></span> - Variable in class <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.Clique3.html#n">n</a></span> - Variable in class <a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Coup.html#n">n</a></span> - Variable in class <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#n11">n11</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#nbreEl%C3%A9mentsS%C3%A9lectionn%C3%A9s--">nbreElémentsSélectionnés()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ndb">ndb</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ndco">ndco</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#ndlC">ndlC</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#niveauDeLIA">niveauDeLIA</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#nombreDePartiesJou%C3%A9es">nombreDePartiesJouées</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#nouveauCoup-int-">nouveauCoup(int)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:O">
<!--   -->
</a>
<h2 class="title">O</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Container1.html#okJouer--">okJouer()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:P">
<!--   -->
</a>
<h2 class="title">P</h2>
<dl>
<dt><span class="memberNameLink"><a href="Mastermind.html#p1">p1</a></span> - Variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#P1-Mastermind-int-int-int-int-int-boolean-int-int-int-int-boolean-int-">P1(Mastermind, int, int, int, int, int, boolean, int, int, int, int, boolean, int)</a></span> - Constructor for class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#p1">p1</a></span> - Variable in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#p1">p1</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.TailleDesPolices.html#p1">p1</a></span> - Variable in class <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.AfficheIA</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Boutons</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.BoutonTransparentAction</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.ChargerPartie</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Clique</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.CliqueOptions</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Clique</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.CliqueSouris</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Parties</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Parties.CliqueSouris</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container5</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container5.Clique3</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Coup</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Dors</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.JeuPause</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.PJeu</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.RedimBonus</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.TailleDesPolices</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Traitement</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#p2">p2</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#p2">p2</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><a href="P2.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P2</span></a> - Class in <a href="package-summary.html">&lt;Unnamed&gt;</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P2.html#P2--">P2()</a></span> - Constructor for class <a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Coup.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.JeuPause.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;">P1.JeuPause</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.PJeu.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P2.html#paintComponent-java.awt.Graphics-">paintComponent(Graphics)</a></span> - Method in class <a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#Parties-P1.ChargerPartie-java.lang.String:A-">Parties(P1.ChargerPartie, String[])</a></span> - Constructor for class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pause">pause</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pause--">pause()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#paused">paused</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#petitPion3d">petitPion3d</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P2.html#petitPion3d">petitPion3d</a></span> - Variable in class <a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pia">pia</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pionBlanc">pionBlanc</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pionJaune">pionJaune</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pionRouge">pionRouge</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#pJeu">pJeu</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.PJeu.html#PJeu-Mastermind-">PJeu(Mastermind)</a></span> - Constructor for class <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#placementB">placementB</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#premierCoupHvsH-java.awt.Graphics-">premierCoupHvsH(Graphics)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#premierCoups">premierCoups</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:Q">
<!--   -->
</a>
<h2 class="title">Q</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#q">q</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#quitteLeJeu--">quitteLeJeu()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:R">
<!--   -->
</a>
<h2 class="title">R</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#r1">r1</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#r2">r2</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#r3">r3</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#reDim--">reDim()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#reDim--">reDim()</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.Parties.html#reDim--">reDim()</a></span> - Method in class <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#reDim--">reDim()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#reDim--">reDim()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#reDim1--">reDim1()</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#reDim1--">reDim1()</a></span> - Method in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#reDimBonus">reDimBonus</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.RedimBonus.html#RedimBonus--">RedimBonus()</a></span> - Constructor for class <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#reinitialiseTemps--">reinitialiseTemps()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#reprendre--">reprendre()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#retourneSelectionn%C3%A9--">retourneSelectionné()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.Dors.html#run--">run()</a></span> - Method in class <a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;">Mastermind.Dors</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.AfficheIA.html#run--">run()</a></span> - Method in class <a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;">P1.AfficheIA</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Dors.html#run--">run()</a></span> - Method in class <a href="P1.Dors.html" title="class in &lt;Unnamed&gt;">P1.Dors</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Traitement.html#run--">run()</a></span> - Method in class <a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;">P1.Traitement</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:S">
<!--   -->
</a>
<h2 class="title">S</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#s">s</a></span> - Variable in class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#s">s</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#s0">s0</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#sauve">sauve</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#sauvePartie--">sauvePartie()</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#secondes">secondes</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#selected">selected</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#selectionnePlusieurs--">selectionnePlusieurs()</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#setActiv%C3%A9-boolean-">setActivé(boolean)</a></span> - Method in class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#setClm-boolean-">setClm(boolean)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#setCoupsIllimit%C3%A9s-boolean-">setCoupsIllimités(boolean)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#setEffacerPlusieurs-boolean-">setEffacerPlusieurs(boolean)</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#setSelected-boolean-">setSelected(boolean)</a></span> - Method in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="Mastermind.html#setTailleDesPolices-int-">setTailleDesPolices(int)</a></span> - Method in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#setTailleDesPolices-int-">setTailleDesPolices(int)</a></span> - Method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.PJeu.html#setVisibleJeuPause-boolean-">setVisibleJeuPause(boolean)</a></span> - Method in class <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#s%C3%A9lectionn%C3%A9s">sélectionnés</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:T">
<!--   -->
</a>
<h2 class="title">T</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Container1.html#t">t</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#t1">t1</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#t10">t10</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#t11">t11</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#t4">t4</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tabReponses">tabReponses</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#tabSauveStats">tabSauveStats</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.ChargerPartie.html#tailleDesPolices">tailleDesPolices</a></span> - Variable in class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container1.html#tailleDesPolices">tailleDesPolices</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tailleDesPolices">tailleDesPolices</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.TailleDesPolices.html#TailleDesPolices--">TailleDesPolices()</a></span> - Constructor for class <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tcd">tcd</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tcoups">tcoups</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tcvH">tcvH</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tcvV">tcvV</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tdbh">tdbh</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tdcdr">tdcdr</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tdjpH">tdjpH</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tdjpV">tdjpV</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tdpi">tdpi</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#temps">temps</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tempsT">tempsT</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tempsT1">tempsT1</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#texteOptions">texteOptions</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#texteTemps">texteTemps</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#th4">th4</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#titreImg">titreImg</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#tourEnCours">tourEnCours</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Traitement.html#Traitement--">Traitement()</a></span> - Constructor for class <a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;">P1.Traitement</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Boutons.html#txt1">txt1</a></span> - Variable in class <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:U">
<!--   -->
</a>
<h2 class="title">U</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.Container1.html#utilDate">utilDate</a></span> - Variable in class <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#utilDate">utilDate</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#utilFenetre">utilFenetre</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.Container5.html#utilFichiers">utilFichiers</a></span> - Variable in class <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#utilFichiers">utilFichiers</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#utilJeu">utilJeu</a></span> - Variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:V">
<!--   -->
</a>
<h2 class="title">V</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.html#VerifieDoublons-int:A:A-int:A-">VerifieDoublons(int[][], int[])</a></span> - Static method in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:W">
<!--   -->
</a>
<h2 class="title">W</h2>
<dl>
<dt><span class="memberNameLink"><a href="Mastermind.html#wa">wa</a></span> - Static variable in class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.TailleDesPolices.html#wa">wa</a></span> - Variable in class <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></dt>
<dd>&nbsp;</dd>
</dl>
<a name="I:X">
<!--   -->
</a>
<h2 class="title">X</h2>
<dl>
<dt><span class="memberNameLink"><a href="P1.PJeu.html#x">x</a></span> - Variable in class <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></dt>
<dd>&nbsp;</dd>
<dt><span class="memberNameLink"><a href="P1.html#x">x</a></span> - Static variable in class <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dt>
<dd>&nbsp;</dd>
</dl>
<a href="#I:A">A</a>&nbsp;<a href="#I:B">B</a>&nbsp;<a href="#I:C">C</a>&nbsp;<a href="#I:D">D</a>&nbsp;<a href="#I:E">E</a>&nbsp;<a href="#I:F">F</a>&nbsp;<a href="#I:G">G</a>&nbsp;<a href="#I:H">H</a>&nbsp;<a href="#I:I">I</a>&nbsp;<a href="#I:J">J</a>&nbsp;<a href="#I:L">L</a>&nbsp;<a href="#I:M">M</a>&nbsp;<a href="#I:N">N</a>&nbsp;<a href="#I:O">O</a>&nbsp;<a href="#I:P">P</a>&nbsp;<a href="#I:Q">Q</a>&nbsp;<a href="#I:R">R</a>&nbsp;<a href="#I:S">S</a>&nbsp;<a href="#I:T">T</a>&nbsp;<a href="#I:U">U</a>&nbsp;<a href="#I:V">V</a>&nbsp;<a href="#I:W">W</a>&nbsp;<a href="#I:X">X</a>&nbsp;</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li class="navBarCell1Rev">Index</li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?index-all.html" target="_top">Frames</a></li>
<li><a href="index-all.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/index.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:33 CEST 2017 -->
<title>Generated Documentation (Untitled)</title>
<script type="text/javascript">
    tmpTargetPage = "" + window.location.search;
    if (tmpTargetPage != "" && tmpTargetPage != "undefined")
        tmpTargetPage = tmpTargetPage.substring(1);
    if (tmpTargetPage.indexOf(":") != -1 || (tmpTargetPage != "" && !validURL(tmpTargetPage)))
        tmpTargetPage = "undefined";
    targetPage = tmpTargetPage;
    function validURL(url) {
        try {
            url = decodeURIComponent(url);
        }
        catch (error) {
            return false;
        }
        var pos = url.indexOf(".html");
        if (pos == -1 || pos != url.length - 5)
            return false;
        var allowNumber = false;
        var allowSep = false;
        var seenDot = false;
        for (var i = 0; i < url.length - 5; i++) {
            var ch = url.charAt(i);
            if ('a' <= ch && ch <= 'z' ||
                    'A' <= ch && ch <= 'Z' ||
                    ch == '$' ||
                    ch == '_' ||
                    ch.charCodeAt(0) > 127) {
                allowNumber = true;
                allowSep = true;
            } else if ('0' <= ch && ch <= '9'
                    || ch == '-') {
                if (!allowNumber)
                     return false;
            } else if (ch == '/' || ch == '.') {
                if (!allowSep)
                    return false;
                allowNumber = false;
                allowSep = false;
                if (ch == '.')
                     seenDot = true;
                if (ch == '/' && seenDot)
                     return false;
            } else {
                return false;
            }
        }
        return true;
    }
    function loadFrames() {
        if (targetPage != "" && targetPage != "undefined")
             top.classFrame.location = top.targetPage;
    }
</script>
</head>
<frameset cols="20%,80%" title="Documentation frame" onload="top.loadFrames()">
<frame src="allclasses-frame.html" name="packageFrame" title="All classes and interfaces (except non-static nested types)">
<frame src="Mastermind.html" name="classFrame" title="Package, class and interface descriptions" scrolling="yes">
<noframes>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<h2>Frame Alert</h2>
<p>This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to <a href="Mastermind.html">Non-frame version</a>.</p>
</noframes>
</frameset>
</html>

# javadoc/Mastermind.Dors.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:28 CEST 2017 -->
<title>Mastermind.Dors</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Mastermind.Dors";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="Mastermind.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?Mastermind.Dors.html" target="_top">Frames</a></li>
<li><a href="Mastermind.Dors.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class Mastermind.Dors" class="title">Class Mastermind.Dors</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>Mastermind.Dors</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">Mastermind.Dors</span>
extends java.lang.Object
implements java.lang.Runnable</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="Mastermind.Dors.html#Dors--">Dors</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.Dors.html#run--">run</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Dors--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Dors</h4>
<pre>Dors()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="run--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>run</h4>
<pre>public&nbsp;void&nbsp;run()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>run</code>&nbsp;in interface&nbsp;<code>java.lang.Runnable</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="Mastermind.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?Mastermind.Dors.html" target="_top">Frames</a></li>
<li><a href="Mastermind.Dors.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/Mastermind.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:28 CEST 2017 -->
<title>Mastermind</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Mastermind";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":9,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?Mastermind.html" target="_top">Frames</a></li>
<li><a href="Mastermind.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class Mastermind" class="title">Class Mastermind</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>java.awt.Window</li>
<li>
<ul class="inheritance">
<li>java.awt.Frame</li>
<li>
<ul class="inheritance">
<li>javax.swing.JFrame</li>
<li>
<ul class="inheritance">
<li>Mastermind</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants</dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">Mastermind</span>
extends javax.swing.JFrame</pre>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="serialized-form.html#Mastermind">Serialized Form</a></dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;">Mastermind.Dors</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JFrame</h3>
<code>javax.swing.JFrame.AccessibleJFrame</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Frame</h3>
<code>java.awt.Frame.AccessibleAWTFrame</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Window">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Window</h3>
<code>java.awt.Window.AccessibleAWTWindow, java.awt.Window.Type</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.lang.Boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#b1">b1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.lang.Boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#b2">b2</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#clm">clm</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#coupsIllimit%C3%A9s">coupsIllimités</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) EnregistrementFichiers</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#enregistrementFichiers">enregistrementFichiers</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#getHeight">getHeight</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#getWidth">getWidth</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#p1">p1</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) static java.awt.event.WindowAdapter</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#wa">wa</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JFrame</h3>
<code>accessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Frame</h3>
<code>CROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.WindowConstants">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;javax.swing.WindowConstants</h3>
<code>DISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="Mastermind.html#Mastermind-java.lang.String-">Mastermind</a></span>(java.lang.String&nbsp;titre)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheCoupsAvantAbandon-int-int-">afficheCoupsAvantAbandon</a></span>(int&nbsp;x,
                        int&nbsp;c)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheErreurCouleurs--">afficheErreurCouleurs</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheErreurNombreDeCases--">afficheErreurNombreDeCases</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheErreurNombreDeCouleurs--">afficheErreurNombreDeCouleurs</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheErreurNombreDeCouleursM12--">afficheErreurNombreDeCouleursM12</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheErreurPartieNonTrouv%C3%A9e--">afficheErreurPartieNonTrouvée</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheJeuGagne-int-int-">afficheJeuGagne</a></span>(int&nbsp;x,
               int&nbsp;c)</code>&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheJeuGagneContreLaMontre-java.lang.String-">afficheJeuGagneContreLaMontre</a></span>(java.lang.String&nbsp;temps)</code>&nbsp;</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheJeuGagneContreLaMontrePlus-int-int-java.lang.String-">afficheJeuGagneContreLaMontrePlus</a></span>(int&nbsp;x,
                                 int&nbsp;c,
                                 java.lang.String&nbsp;temps)</code>&nbsp;</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheMessage-java.lang.String-java.lang.String-char-">afficheMessage</a></span>(java.lang.String&nbsp;message,
              java.lang.String&nbsp;titre,
              char&nbsp;type)</code>&nbsp;</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#affichePerdu--">affichePerdu</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#affichePerduContreLaMontre-java.lang.String-">affichePerduContreLaMontre</a></span>(java.lang.String&nbsp;temps)</code>&nbsp;</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#affichePerduContreLaMontreCoupsRestants-int-int-">affichePerduContreLaMontreCoupsRestants</a></span>(int&nbsp;x,
                                       int&nbsp;c)</code>&nbsp;</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#afficheScoresNonTrouv%C3%A9s--">afficheScoresNonTrouvés</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#demandeSauvegarde--">demandeSauvegarde</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#erreurOption-java.lang.String-int-int-">erreurOption</a></span>(java.lang.String&nbsp;option,
            int&nbsp;a,
            int&nbsp;b)</code>&nbsp;</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#exit--">exit</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#main-java.lang.String:A-">main</a></span>(java.lang.String[]&nbsp;args)</code>&nbsp;</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#quitteLeJeu--">quitteLeJeu</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#reDim--">reDim</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#reDim1--">reDim1</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#setClm-boolean-">setClm</a></span>(boolean&nbsp;a)</code>&nbsp;</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#setCoupsIllimit%C3%A9s-boolean-">setCoupsIllimités</a></span>(boolean&nbsp;a)</code>&nbsp;</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="Mastermind.html#setTailleDesPolices-int-">setTailleDesPolices</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JFrame</h3>
<code>addImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Frame</h3>
<code>addNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setBackground, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setOpacity, setResizable, setShape, setState, setTitle, setUndecorated</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Window">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Window</h3>
<code>addPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBackground, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOpacity, getOwnedWindows, getOwner, getOwnerlessWindows, getShape, getToolkit, getType, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isAutoRequestFocus, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isOpaque, isShowing, isValidateRoot, pack, paint, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setAutoRequestFocus, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocation, setLocation, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setType, setVisible, show, toBack, toFront</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getGraphicsConfiguration, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, revalidate, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.MenuContainer">
<!--   -->
</a>
<h3>Methods inherited from interface&nbsp;java.awt.MenuContainer</h3>
<code>getFont, postEvent</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="wa">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>wa</h4>
<pre>static&nbsp;java.awt.event.WindowAdapter wa</pre>
</li>
</ul>
<a name="b1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>b1</h4>
<pre>java.lang.Boolean b1</pre>
</li>
</ul>
<a name="b2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>b2</h4>
<pre>java.lang.Boolean b2</pre>
</li>
</ul>
<a name="getHeight">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getHeight</h4>
<pre>int getHeight</pre>
</li>
</ul>
<a name="getWidth">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getWidth</h4>
<pre>int getWidth</pre>
</li>
</ul>
<a name="p1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a> p1</pre>
</li>
</ul>
<a name="enregistrementFichiers">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>enregistrementFichiers</h4>
<pre>EnregistrementFichiers enregistrementFichiers</pre>
</li>
</ul>
<a name="clm">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clm</h4>
<pre>boolean clm</pre>
</li>
</ul>
<a name="coupsIllimités">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>coupsIllimités</h4>
<pre>boolean coupsIllimités</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Mastermind-java.lang.String-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Mastermind</h4>
<pre>public&nbsp;Mastermind(java.lang.String&nbsp;titre)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="reDim1--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDim1</h4>
<pre>public&nbsp;void&nbsp;reDim1()</pre>
</li>
</ul>
<a name="reDim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDim</h4>
<pre>public&nbsp;void&nbsp;reDim()</pre>
</li>
</ul>
<a name="afficheMessage-java.lang.String-java.lang.String-char-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheMessage</h4>
<pre>public&nbsp;void&nbsp;afficheMessage(java.lang.String&nbsp;message,
                           java.lang.String&nbsp;titre,
                           char&nbsp;type)</pre>
</li>
</ul>
<a name="afficheErreurPartieNonTrouvée--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurPartieNonTrouvée</h4>
<pre>public&nbsp;void&nbsp;afficheErreurPartieNonTrouvée()</pre>
</li>
</ul>
<a name="erreurOption-java.lang.String-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>erreurOption</h4>
<pre>public&nbsp;void&nbsp;erreurOption(java.lang.String&nbsp;option,
                         int&nbsp;a,
                         int&nbsp;b)</pre>
</li>
</ul>
<a name="afficheErreurCouleurs--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurCouleurs</h4>
<pre>public&nbsp;void&nbsp;afficheErreurCouleurs()</pre>
</li>
</ul>
<a name="afficheErreurNombreDeCases--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurNombreDeCases</h4>
<pre>public&nbsp;void&nbsp;afficheErreurNombreDeCases()</pre>
</li>
</ul>
<a name="afficheErreurNombreDeCouleurs--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurNombreDeCouleurs</h4>
<pre>public&nbsp;void&nbsp;afficheErreurNombreDeCouleurs()</pre>
</li>
</ul>
<a name="afficheErreurNombreDeCouleursM12--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurNombreDeCouleursM12</h4>
<pre>public&nbsp;void&nbsp;afficheErreurNombreDeCouleursM12()</pre>
</li>
</ul>
<a name="afficheCoupsAvantAbandon-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheCoupsAvantAbandon</h4>
<pre>public&nbsp;void&nbsp;afficheCoupsAvantAbandon(int&nbsp;x,
                                     int&nbsp;c)</pre>
</li>
</ul>
<a name="demandeSauvegarde--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>demandeSauvegarde</h4>
<pre>public&nbsp;int&nbsp;demandeSauvegarde()</pre>
</li>
</ul>
<a name="quitteLeJeu--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quitteLeJeu</h4>
<pre>public&nbsp;int&nbsp;quitteLeJeu()</pre>
</li>
</ul>
<a name="afficheJeuGagne-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheJeuGagne</h4>
<pre>public&nbsp;void&nbsp;afficheJeuGagne(int&nbsp;x,
                            int&nbsp;c)</pre>
</li>
</ul>
<a name="afficheJeuGagneContreLaMontre-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheJeuGagneContreLaMontre</h4>
<pre>public&nbsp;void&nbsp;afficheJeuGagneContreLaMontre(java.lang.String&nbsp;temps)</pre>
</li>
</ul>
<a name="afficheJeuGagneContreLaMontrePlus-int-int-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheJeuGagneContreLaMontrePlus</h4>
<pre>public&nbsp;void&nbsp;afficheJeuGagneContreLaMontrePlus(int&nbsp;x,
                                              int&nbsp;c,
                                              java.lang.String&nbsp;temps)</pre>
</li>
</ul>
<a name="affichePerdu--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>affichePerdu</h4>
<pre>public&nbsp;void&nbsp;affichePerdu()</pre>
</li>
</ul>
<a name="affichePerduContreLaMontre-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>affichePerduContreLaMontre</h4>
<pre>public&nbsp;void&nbsp;affichePerduContreLaMontre(java.lang.String&nbsp;temps)</pre>
</li>
</ul>
<a name="affichePerduContreLaMontreCoupsRestants-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>affichePerduContreLaMontreCoupsRestants</h4>
<pre>public&nbsp;void&nbsp;affichePerduContreLaMontreCoupsRestants(int&nbsp;x,
                                                    int&nbsp;c)</pre>
</li>
</ul>
<a name="afficheScoresNonTrouvés--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheScoresNonTrouvés</h4>
<pre>public&nbsp;void&nbsp;afficheScoresNonTrouvés()</pre>
</li>
</ul>
<a name="exit--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>exit</h4>
<pre>public&nbsp;int&nbsp;exit()</pre>
</li>
</ul>
<a name="setCoupsIllimités-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setCoupsIllimités</h4>
<pre>public&nbsp;void&nbsp;setCoupsIllimités(boolean&nbsp;a)</pre>
</li>
</ul>
<a name="setClm-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setClm</h4>
<pre>public&nbsp;void&nbsp;setClm(boolean&nbsp;a)</pre>
</li>
</ul>
<a name="setTailleDesPolices-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setTailleDesPolices</h4>
<pre>public&nbsp;void&nbsp;setTailleDesPolices(int&nbsp;n)</pre>
</li>
</ul>
<a name="main-java.lang.String:A-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>main</h4>
<pre>public static&nbsp;void&nbsp;main(java.lang.String[]&nbsp;args)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?Mastermind.html" target="_top">Frames</a></li>
<li><a href="Mastermind.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/overview-tree.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>Class Hierarchy</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Class Hierarchy";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li class="navBarCell1Rev">Tree</li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?overview-tree.html" target="_top">Frames</a></li>
<li><a href="overview-tree.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 class="title">Hierarchy For All Packages</h1>
</div>
<div class="contentContainer">
<h2 title="Class Hierarchy">Class Hierarchy</h2>
<ul>
<li type="circle">java.lang.Object
<ul>
<li type="circle">java.awt.Component (implements java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable)
<ul>
<li type="circle">java.awt.Container
<ul>
<li type="circle">javax.swing.JComponent (implements java.io.Serializable)
<ul>
<li type="circle">javax.swing.JPanel (implements javax.accessibility.Accessible)
<ul>
<li type="circle"><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1</span></a></li>
<li type="circle"><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Boutons</span></a></li>
<li type="circle"><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1</span></a></li>
<li type="circle"><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Parties</span></a></li>
<li type="circle"><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container5</span></a></li>
<li type="circle"><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Coup</span></a></li>
<li type="circle"><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.JeuPause</span></a></li>
<li type="circle"><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.PJeu</span></a></li>
</ul>
</li>
</ul>
</li>
<li type="circle">java.awt.Window (implements javax.accessibility.Accessible)
<ul>
<li type="circle">java.awt.Frame (implements java.awt.MenuContainer)
<ul>
<li type="circle">javax.swing.JFrame (implements javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants)
<ul>
<li type="circle"><a href="Mastermind.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Mastermind</span></a></li>
<li type="circle"><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.ChargerPartie</span></a></li>
<li type="circle"><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.TailleDesPolices</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li type="circle"><a href="P2.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P2</span></a></li>
</ul>
</li>
<li type="circle"><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Mastermind.Dors</span></a> (implements java.lang.Runnable)</li>
<li type="circle"><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.AfficheIA</span></a> (implements java.lang.Runnable)</li>
<li type="circle"><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.BoutonTransparentAction</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Clique</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.CliqueOptions</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Clique</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.CliqueSouris</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Parties.CliqueSouris</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container5.Clique3</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Dors</span></a> (implements java.lang.Runnable)</li>
<li type="circle"><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.RedimBonus</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Traitement</span></a> (implements java.lang.Runnable)</li>
</ul>
</li>
</ul>
</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li class="navBarCell1Rev">Tree</li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?overview-tree.html" target="_top">Frames</a></li>
<li><a href="overview-tree.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.AfficheIA.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:29 CEST 2017 -->
<title>P1.AfficheIA</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.AfficheIA";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.AfficheIA.html" target="_top">Frames</a></li>
<li><a href="P1.AfficheIA.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.AfficheIA" class="title">Class P1.AfficheIA</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.AfficheIA</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.AfficheIA</span>
extends java.lang.Object
implements java.lang.Runnable</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.AfficheIA.html#AfficheIA--">AfficheIA</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.AfficheIA.html#run--">run</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="AfficheIA--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>AfficheIA</h4>
<pre>AfficheIA()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="run--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>run</h4>
<pre>public&nbsp;void&nbsp;run()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>run</code>&nbsp;in interface&nbsp;<code>java.lang.Runnable</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.AfficheIA.html" target="_top">Frames</a></li>
<li><a href="P1.AfficheIA.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Boutons.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:29 CEST 2017 -->
<title>P1.Boutons</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Boutons";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Boutons.html" target="_top">Frames</a></li>
<li><a href="P1.Boutons.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Boutons" class="title">Class P1.Boutons</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.Boutons</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Boutons</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html#activ%C3%A9">activé</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html#s">s</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JLabel</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html#txt1">txt1</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Boutons.html#Boutons-java.lang.String-">Boutons</a></span>(java.lang.String&nbsp;s)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html#getActiv%C3%A9--">getActivé</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html#setActiv%C3%A9-boolean-">setActivé</a></span>(boolean&nbsp;b)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="s">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>s</h4>
<pre>java.lang.String s</pre>
</li>
</ul>
<a name="txt1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>txt1</h4>
<pre>javax.swing.JLabel txt1</pre>
</li>
</ul>
<a name="activé">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>activé</h4>
<pre>boolean activé</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Boutons-java.lang.String-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Boutons</h4>
<pre>public&nbsp;Boutons(java.lang.String&nbsp;s)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="getActivé--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getActivé</h4>
<pre>public&nbsp;boolean&nbsp;getActivé()</pre>
</li>
</ul>
<a name="setActivé-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setActivé</h4>
<pre>public&nbsp;void&nbsp;setActivé(boolean&nbsp;b)</pre>
</li>
</ul>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Boutons.html" target="_top">Frames</a></li>
<li><a href="P1.Boutons.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.BoutonTransparentAction.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:29 CEST 2017 -->
<title>P1.BoutonTransparentAction</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.BoutonTransparentAction";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.BoutonTransparentAction.html" target="_top">Frames</a></li>
<li><a href="P1.BoutonTransparentAction.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.BoutonTransparentAction" class="title">Class P1.BoutonTransparentAction</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.BoutonTransparentAction</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.MouseListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.BoutonTransparentAction</span>
extends java.lang.Object
implements java.awt.event.MouseListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#BoutonTransparentAction-int-">BoutonTransparentAction</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseExited-java.awt.event.MouseEvent-">mouseExited</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mousePressed-java.awt.event.MouseEvent-">mousePressed</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="BoutonTransparentAction-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>BoutonTransparentAction</h4>
<pre>public&nbsp;BoutonTransparentAction(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="mousePressed-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mousePressed</h4>
<pre>public&nbsp;void&nbsp;mousePressed(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mousePressed</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseClicked-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseClicked</h4>
<pre>public&nbsp;void&nbsp;mouseClicked(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseClicked</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseEntered-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseEntered</h4>
<pre>public&nbsp;void&nbsp;mouseEntered(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseEntered</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseExited-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseExited</h4>
<pre>public&nbsp;void&nbsp;mouseExited(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseExited</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseReleased-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>mouseReleased</h4>
<pre>public&nbsp;void&nbsp;mouseReleased(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseReleased</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.BoutonTransparentAction.html" target="_top">Frames</a></li>
<li><a href="P1.BoutonTransparentAction.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.ChargerPartie.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:29 CEST 2017 -->
<title>P1.ChargerPartie</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.ChargerPartie";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.ChargerPartie.html" target="_top">Frames</a></li>
<li><a href="P1.ChargerPartie.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JFrame">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.ChargerPartie" class="title">Class P1.ChargerPartie</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>java.awt.Window</li>
<li>
<ul class="inheritance">
<li>java.awt.Frame</li>
<li>
<ul class="inheritance">
<li>javax.swing.JFrame</li>
<li>
<ul class="inheritance">
<li>P1.ChargerPartie</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">P1.ChargerPartie</span>
extends javax.swing.JFrame</pre>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="serialized-form.html#P1.ChargerPartie">Serialized Form</a></dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JFrame</h3>
<code>javax.swing.JFrame.AccessibleJFrame</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Frame</h3>
<code>java.awt.Frame.AccessibleAWTFrame</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Window">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Window</h3>
<code>java.awt.Window.AccessibleAWTWindow, java.awt.Window.Type</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#b1">b1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) EnregistrementFichiers</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#ff1">ff1</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#p1">p1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#tailleDesPolices">tailleDesPolices</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JFrame</h3>
<code>accessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Frame</h3>
<code>CROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.WindowConstants">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;javax.swing.WindowConstants</h3>
<code>DISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#ChargerPartie-int-">ChargerPartie</a></span>(int&nbsp;tailleDesPolices)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#afficheErreurJouer1Partie--">afficheErreurJouer1Partie</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#afficheErreurJouerPLusieursParties--">afficheErreurJouerPLusieursParties</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>java.lang.String[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#aleatString-int-">aleatString</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#demandeEffacer1-java.lang.String-">demandeEffacer1</a></span>(java.lang.String&nbsp;s0)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#demandeEffacerPlusieurs-int-">demandeEffacerPlusieurs</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#metAjourP1--">metAjourP1</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#reDim--">reDim</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html#reDim1--">reDim1</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JFrame</h3>
<code>addImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Frame</h3>
<code>addNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setBackground, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setOpacity, setResizable, setShape, setState, setTitle, setUndecorated</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Window">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Window</h3>
<code>addPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBackground, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOpacity, getOwnedWindows, getOwner, getOwnerlessWindows, getShape, getToolkit, getType, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isAutoRequestFocus, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isOpaque, isShowing, isValidateRoot, pack, paint, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setAutoRequestFocus, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocation, setLocation, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setType, setVisible, show, toBack, toFront</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getGraphicsConfiguration, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, revalidate, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.MenuContainer">
<!--   -->
</a>
<h3>Methods inherited from interface&nbsp;java.awt.MenuContainer</h3>
<code>getFont, postEvent</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="p1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a> p1</pre>
</li>
</ul>
<a name="b1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>b1</h4>
<pre>boolean b1</pre>
</li>
</ul>
<a name="tailleDesPolices">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tailleDesPolices</h4>
<pre>int tailleDesPolices</pre>
</li>
</ul>
<a name="ff1">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>ff1</h4>
<pre>EnregistrementFichiers ff1</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="ChargerPartie-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>ChargerPartie</h4>
<pre>public&nbsp;ChargerPartie(int&nbsp;tailleDesPolices)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="metAjourP1--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>metAjourP1</h4>
<pre>public&nbsp;void&nbsp;metAjourP1()</pre>
</li>
</ul>
<a name="afficheErreurJouer1Partie--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurJouer1Partie</h4>
<pre>public&nbsp;void&nbsp;afficheErreurJouer1Partie()</pre>
</li>
</ul>
<a name="afficheErreurJouerPLusieursParties--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheErreurJouerPLusieursParties</h4>
<pre>public&nbsp;void&nbsp;afficheErreurJouerPLusieursParties()</pre>
</li>
</ul>
<a name="demandeEffacer1-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>demandeEffacer1</h4>
<pre>public&nbsp;int&nbsp;demandeEffacer1(java.lang.String&nbsp;s0)</pre>
</li>
</ul>
<a name="demandeEffacerPlusieurs-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>demandeEffacerPlusieurs</h4>
<pre>public&nbsp;int&nbsp;demandeEffacerPlusieurs(int&nbsp;n)</pre>
</li>
</ul>
<a name="reDim1--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDim1</h4>
<pre>public&nbsp;void&nbsp;reDim1()</pre>
</li>
</ul>
<a name="reDim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDim</h4>
<pre>public&nbsp;void&nbsp;reDim()</pre>
</li>
</ul>
<a name="aleatString-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>aleatString</h4>
<pre>public&nbsp;java.lang.String[]&nbsp;aleatString(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.ChargerPartie.html" target="_top">Frames</a></li>
<li><a href="P1.ChargerPartie.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JFrame">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Clique.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Clique</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Clique";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Clique.html" target="_top">Frames</a></li>
<li><a href="P1.Clique.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Clique" class="title">Class P1.Clique</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Clique</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.ActionListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Clique</span>
extends java.lang.Object
implements java.awt.event.ActionListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Clique.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Clique.html#Clique-int-">Clique</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Clique.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed</a></span>(java.awt.event.ActionEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Clique-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Clique</h4>
<pre>public&nbsp;Clique(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="actionPerformed-java.awt.event.ActionEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>actionPerformed</h4>
<pre>public&nbsp;void&nbsp;actionPerformed(java.awt.event.ActionEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>actionPerformed</code>&nbsp;in interface&nbsp;<code>java.awt.event.ActionListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Clique.html" target="_top">Frames</a></li>
<li><a href="P1.Clique.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.CliqueOptions.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.CliqueOptions</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.CliqueOptions";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.CliqueOptions.html" target="_top">Frames</a></li>
<li><a href="P1.CliqueOptions.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.CliqueOptions" class="title">Class P1.CliqueOptions</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.CliqueOptions</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.ActionListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.CliqueOptions</span>
extends java.lang.Object
implements java.awt.event.ActionListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.CliqueOptions.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.CliqueOptions.html#CliqueOptions-int-">CliqueOptions</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.CliqueOptions.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed</a></span>(java.awt.event.ActionEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="CliqueOptions-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>CliqueOptions</h4>
<pre>public&nbsp;CliqueOptions(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="actionPerformed-java.awt.event.ActionEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>actionPerformed</h4>
<pre>public&nbsp;void&nbsp;actionPerformed(java.awt.event.ActionEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>actionPerformed</code>&nbsp;in interface&nbsp;<code>java.awt.event.ActionListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.CliqueOptions.html" target="_top">Frames</a></li>
<li><a href="P1.CliqueOptions.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container1.Clique.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container1.Clique</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container1.Clique";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.Clique.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.Clique.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container1.Clique" class="title">Class P1.Container1.Clique</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Container1.Clique</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.ActionListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container1.Clique</span>
extends java.lang.Object
implements java.awt.event.ActionListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.Color</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Clique.html#couleurBouton">couleurBouton</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Clique.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Clique.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container1.Clique.html#Clique-int-">Clique</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Clique.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed</a></span>(java.awt.event.ActionEvent&nbsp;arg0)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
<a name="couleurBouton">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleurBouton</h4>
<pre>java.awt.Color couleurBouton</pre>
</li>
</ul>
<a name="i">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Clique-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Clique</h4>
<pre>public&nbsp;Clique(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="actionPerformed-java.awt.event.ActionEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>actionPerformed</h4>
<pre>public&nbsp;void&nbsp;actionPerformed(java.awt.event.ActionEvent&nbsp;arg0)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>actionPerformed</code>&nbsp;in interface&nbsp;<code>java.awt.event.ActionListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.Clique.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.Clique.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container1.CliqueSouris.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container1.CliqueSouris</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container1.CliqueSouris";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.CliqueSouris.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.CliqueSouris.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container1.CliqueSouris" class="title">Class P1.Container1.CliqueSouris</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Container1.CliqueSouris</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.MouseListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container1.CliqueSouris</span>
extends java.lang.Object
implements java.awt.event.MouseListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#CliqueSouris-int-">CliqueSouris</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseExited-java.awt.event.MouseEvent-">mouseExited</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mousePressed-java.awt.event.MouseEvent-">mousePressed</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="CliqueSouris-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>CliqueSouris</h4>
<pre>public&nbsp;CliqueSouris(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="mouseClicked-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseClicked</h4>
<pre>public&nbsp;void&nbsp;mouseClicked(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseClicked</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseEntered-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseEntered</h4>
<pre>public&nbsp;void&nbsp;mouseEntered(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseEntered</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseExited-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseExited</h4>
<pre>public&nbsp;void&nbsp;mouseExited(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseExited</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mousePressed-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mousePressed</h4>
<pre>public&nbsp;void&nbsp;mousePressed(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mousePressed</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseReleased-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>mouseReleased</h4>
<pre>public&nbsp;void&nbsp;mouseReleased(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseReleased</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.CliqueSouris.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.CliqueSouris.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container1.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container1</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container1";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container1" class="title">Class P1.Container1</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.Container1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container1</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#clique1">clique1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#clique2">clique2</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#cliquePanel">cliquePanel</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JButton</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#effacer">effacer</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#effacerPlusieurs">effacerPlusieurs</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#f">f</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) EnregistrementFichiers</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#ff1">ff1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JButton</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#jouer">jouer</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#p2">p2</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.lang.String[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#s0">s0</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#selected">selected</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#s%C3%A9lectionn%C3%A9s">sélectionnés</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#t">t</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#tailleDesPolices">tailleDesPolices</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) UtilDate</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#utilDate">utilDate</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container1.html#Container1-P1.ChargerPartie-java.lang.String:A-int-">Container1</a></span>(<a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a>&nbsp;f,
          java.lang.String[]&nbsp;s0,
          int&nbsp;tailleDesPolices)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>java.lang.String[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#classTabDateC-java.lang.String:A-int:A-">classTabDateC</a></span>(java.lang.String[]&nbsp;t,
             int[]&nbsp;t2)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#estSelectionn%C3%A9--">estSelectionné</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#getEffacerPlusieurs--">getEffacerPlusieurs</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#getSelected--">getSelected</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#nbreEl%C3%A9mentsS%C3%A9lectionn%C3%A9s--">nbreElémentsSélectionnés</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#okJouer--">okJouer</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#reDim--">reDim</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#retourneSelectionn%C3%A9--">retourneSelectionné</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#selectionnePlusieurs--">selectionnePlusieurs</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#setEffacerPlusieurs-boolean-">setEffacerPlusieurs</a></span>(boolean&nbsp;effacerPlusieurs)</code>&nbsp;</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html#setSelected-boolean-">setSelected</a></span>(boolean&nbsp;selected)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="i">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
<a name="f">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>f</h4>
<pre><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a> f</pre>
</li>
</ul>
<a name="jouer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>jouer</h4>
<pre>javax.swing.JButton jouer</pre>
</li>
</ul>
<a name="effacer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>effacer</h4>
<pre>javax.swing.JButton effacer</pre>
</li>
</ul>
<a name="clique1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clique1</h4>
<pre><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a> clique1</pre>
</li>
</ul>
<a name="clique2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clique2</h4>
<pre><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Container1.Clique</a> clique2</pre>
</li>
</ul>
<a name="cliquePanel">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cliquePanel</h4>
<pre><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.CliqueSouris</a> cliquePanel</pre>
</li>
</ul>
<a name="ff1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ff1</h4>
<pre>EnregistrementFichiers ff1</pre>
</li>
</ul>
<a name="utilDate">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>utilDate</h4>
<pre>UtilDate utilDate</pre>
</li>
</ul>
<a name="tailleDesPolices">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tailleDesPolices</h4>
<pre>int tailleDesPolices</pre>
</li>
</ul>
<a name="p2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>p2</h4>
<pre><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a> p2</pre>
</li>
</ul>
<a name="t">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>t</h4>
<pre>int[] t</pre>
</li>
</ul>
<a name="s0">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>s0</h4>
<pre>java.lang.String[] s0</pre>
</li>
</ul>
<a name="sélectionnés">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sélectionnés</h4>
<pre>int[] sélectionnés</pre>
</li>
</ul>
<a name="selected">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selected</h4>
<pre>boolean selected</pre>
</li>
</ul>
<a name="effacerPlusieurs">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>effacerPlusieurs</h4>
<pre>boolean effacerPlusieurs</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Container1-P1.ChargerPartie-java.lang.String:A-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Container1</h4>
<pre>public&nbsp;Container1(<a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a>&nbsp;f,
                  java.lang.String[]&nbsp;s0,
                  int&nbsp;tailleDesPolices)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="classTabDateC-java.lang.String:A-int:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>classTabDateC</h4>
<pre>public&nbsp;java.lang.String[]&nbsp;classTabDateC(java.lang.String[]&nbsp;t,
                                        int[]&nbsp;t2)</pre>
</li>
</ul>
<a name="retourneSelectionné--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>retourneSelectionné</h4>
<pre>public&nbsp;int&nbsp;retourneSelectionné()</pre>
</li>
</ul>
<a name="estSelectionné--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>estSelectionné</h4>
<pre>public&nbsp;boolean&nbsp;estSelectionné()</pre>
</li>
</ul>
<a name="selectionnePlusieurs--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectionnePlusieurs</h4>
<pre>public&nbsp;boolean&nbsp;selectionnePlusieurs()</pre>
</li>
</ul>
<a name="okJouer--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>okJouer</h4>
<pre>public&nbsp;boolean&nbsp;okJouer()</pre>
</li>
</ul>
<a name="nbreElémentsSélectionnés--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>nbreElémentsSélectionnés</h4>
<pre>public&nbsp;int&nbsp;nbreElémentsSélectionnés()</pre>
</li>
</ul>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
<a name="reDim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDim</h4>
<pre>public&nbsp;void&nbsp;reDim()</pre>
</li>
</ul>
<a name="getSelected--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSelected</h4>
<pre>public&nbsp;boolean&nbsp;getSelected()</pre>
</li>
</ul>
<a name="getEffacerPlusieurs--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getEffacerPlusieurs</h4>
<pre>public&nbsp;boolean&nbsp;getEffacerPlusieurs()</pre>
</li>
</ul>
<a name="setSelected-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSelected</h4>
<pre>public&nbsp;void&nbsp;setSelected(boolean&nbsp;selected)</pre>
</li>
</ul>
<a name="setEffacerPlusieurs-boolean-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>setEffacerPlusieurs</h4>
<pre>public&nbsp;void&nbsp;setEffacerPlusieurs(boolean&nbsp;effacerPlusieurs)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container1.Parties.CliqueSouris.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container1.Parties.CliqueSouris</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container1.Parties.CliqueSouris";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.Parties.CliqueSouris.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.Parties.CliqueSouris.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container1.Parties.CliqueSouris" class="title">Class P1.Container1.Parties.CliqueSouris</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Container1.Parties.CliqueSouris</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.MouseListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container1.Parties.CliqueSouris</span>
extends java.lang.Object
implements java.awt.event.MouseListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#CliqueSouris-int-">CliqueSouris</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseExited-java.awt.event.MouseEvent-">mouseExited</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mousePressed-java.awt.event.MouseEvent-">mousePressed</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
<a name="i">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="CliqueSouris-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>CliqueSouris</h4>
<pre>public&nbsp;CliqueSouris(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="mouseClicked-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseClicked</h4>
<pre>public&nbsp;void&nbsp;mouseClicked(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseClicked</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseEntered-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseEntered</h4>
<pre>public&nbsp;void&nbsp;mouseEntered(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseEntered</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseExited-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseExited</h4>
<pre>public&nbsp;void&nbsp;mouseExited(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseExited</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mousePressed-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mousePressed</h4>
<pre>public&nbsp;void&nbsp;mousePressed(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mousePressed</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseReleased-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>mouseReleased</h4>
<pre>public&nbsp;void&nbsp;mouseReleased(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseReleased</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.Parties.CliqueSouris.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.Parties.CliqueSouris.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container1.Parties.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container1.Parties</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container1.Parties";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.Parties.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.Parties.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container1.Parties" class="title">Class P1.Container1.Parties</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.Container1.Parties</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container1.Parties</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#boutons">boutons</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.Box</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#box">box</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#cliqueSouris">cliqueSouris</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#f">f</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#i">i</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#Parties-P1.ChargerPartie-java.lang.String:A-">Parties</a></span>(<a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a>&nbsp;f,
       java.lang.String[]&nbsp;s)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.Parties.html#reDim--">reDim</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="i">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
<a name="f">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>f</h4>
<pre><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a> f</pre>
</li>
</ul>
<a name="boutons">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>boutons</h4>
<pre><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a>[] boutons</pre>
</li>
</ul>
<a name="cliqueSouris">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cliqueSouris</h4>
<pre><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;">P1.Container1.Parties.CliqueSouris</a>[] cliqueSouris</pre>
</li>
</ul>
<a name="box">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>box</h4>
<pre>javax.swing.Box box</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Parties-P1.ChargerPartie-java.lang.String:A-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Parties</h4>
<pre>public&nbsp;Parties(<a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a>&nbsp;f,
               java.lang.String[]&nbsp;s)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
<a name="reDim--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>reDim</h4>
<pre>public&nbsp;void&nbsp;reDim()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container1.Parties.html" target="_top">Frames</a></li>
<li><a href="P1.Container1.Parties.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container5.Clique3.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container5.Clique3</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container5.Clique3";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container5.Clique3.html" target="_top">Frames</a></li>
<li><a href="P1.Container5.Clique3.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container5.Clique3" class="title">Class P1.Container5.Clique3</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Container5.Clique3</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.ActionListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container5.Clique3</span>
extends java.lang.Object
implements java.awt.event.ActionListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.Clique3.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.Clique3.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container5.Clique3.html#Clique3-int-">Clique3</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.Clique3.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed</a></span>(java.awt.event.ActionEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="n">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
<a name="i">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Clique3-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Clique3</h4>
<pre>public&nbsp;Clique3(int&nbsp;n)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="actionPerformed-java.awt.event.ActionEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>actionPerformed</h4>
<pre>public&nbsp;void&nbsp;actionPerformed(java.awt.event.ActionEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>actionPerformed</code>&nbsp;in interface&nbsp;<code>java.awt.event.ActionListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container5.Clique3.html" target="_top">Frames</a></li>
<li><a href="P1.Container5.Clique3.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Container5.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:30 CEST 2017 -->
<title>P1.Container5</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Container5";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container5.html" target="_top">Frames</a></li>
<li><a href="P1.Container5.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Container5" class="title">Class P1.Container5</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.Container5</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Container5</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JButton</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#bouton">bouton</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JTextField</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#champNom">champNom</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#clique">clique</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.awt.Color</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#couleur">couleur</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#f">f</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JTextArea</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#label">label</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#s">s</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#tabSauveStats">tabSauveStats</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) UtilFichiers</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#utilFichiers">utilFichiers</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Container5.html#Container5-P1.TailleDesPolices-">Container5</a></span>(<a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a>&nbsp;f)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="f">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>f</h4>
<pre><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a> f</pre>
</li>
</ul>
<a name="clique">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clique</h4>
<pre><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;">P1.Container5.Clique3</a> clique</pre>
</li>
</ul>
<a name="i">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
<a name="couleur">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleur</h4>
<pre>java.awt.Color couleur</pre>
</li>
</ul>
<a name="s">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>s</h4>
<pre>java.lang.String s</pre>
</li>
</ul>
<a name="tabSauveStats">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tabSauveStats</h4>
<pre>int[] tabSauveStats</pre>
</li>
</ul>
<a name="utilFichiers">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>utilFichiers</h4>
<pre>UtilFichiers utilFichiers</pre>
</li>
</ul>
<a name="label">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>label</h4>
<pre>javax.swing.JTextArea label</pre>
</li>
</ul>
<a name="champNom">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>champNom</h4>
<pre>javax.swing.JTextField champNom</pre>
</li>
</ul>
<a name="bouton">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>bouton</h4>
<pre>javax.swing.JButton bouton</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Container5-P1.TailleDesPolices-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Container5</h4>
<pre>public&nbsp;Container5(<a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a>&nbsp;f)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Container5.html" target="_top">Frames</a></li>
<li><a href="P1.Container5.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Coup.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:31 CEST 2017 -->
<title>P1.Coup</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Coup";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Coup.html" target="_top">Frames</a></li>
<li><a href="P1.Coup.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Coup" class="title">Class P1.Coup</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.Coup</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Coup</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Coup.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Coup.html#j">j</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Coup.html#ldPJ">ldPJ</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Coup.html#n">n</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Coup.html#Coup-int-int-">Coup</a></span>(int&nbsp;n,
    int&nbsp;ldPJ)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Coup.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="ldPJ">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ldPJ</h4>
<pre>int ldPJ</pre>
</li>
</ul>
<a name="n">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>n</h4>
<pre>int n</pre>
</li>
</ul>
<a name="i">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
<a name="j">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>j</h4>
<pre>int j</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Coup-int-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Coup</h4>
<pre>public&nbsp;Coup(int&nbsp;n,
            int&nbsp;ldPJ)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Coup.html" target="_top">Frames</a></li>
<li><a href="P1.Coup.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Dors.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:31 CEST 2017 -->
<title>P1.Dors</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Dors";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Dors.html" target="_top">Frames</a></li>
<li><a href="P1.Dors.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Dors" class="title">Class P1.Dors</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Dors</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Dors</span>
extends java.lang.Object
implements java.lang.Runnable</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Dors.html#Dors--">Dors</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Dors.html#run--">run</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Dors--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Dors</h4>
<pre>Dors()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="run--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>run</h4>
<pre>public&nbsp;void&nbsp;run()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>run</code>&nbsp;in interface&nbsp;<code>java.lang.Runnable</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Dors.html" target="_top">Frames</a></li>
<li><a href="P1.Dors.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:29 CEST 2017 -->
<title>P1</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":9,"i4":9,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":9,"i11":9,"i12":9,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":9};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.html" target="_top">Frames</a></li>
<li><a href="P1.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1" class="title">Class P1</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;">P1.AfficheIA</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;">P1.Boutons</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;">P1.CliqueOptions</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;">P1.Dors</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;">P1.JeuPause</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;">P1.Traitement</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#a">a</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#abt">abt</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#actb">actb</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#action">action</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#actionBT">actionBT</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#actionClique">actionClique</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ajustH">ajustH</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ajustV">ajustV</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#avanceeDuTour">avanceeDuTour</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#b">b</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JProgressBar</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#bar">bar</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JPanel</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#barrePanel">barrePanel</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JButton[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#boutons">boutons</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.Box</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#box">box</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#c">c</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.ImageIcon</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#cacheInfo">cacheInfo</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JButton</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#cacheInfoB">cacheInfoB</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#caseReponseVide">caseReponseVide</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#caseVide">caseVide</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JTextField[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#champNombre">champNombre</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JTextField[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#champTemps">champTemps</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#cliqueBInfo">cliqueBInfo</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#clm">clm</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#cmp5">cmp5</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.Color</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#couleurBouton">couleurBouton</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.awt.Color</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#CouleurDuLabel">CouleurDuLabel</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#couleurs">couleurs</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JButton[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#couleurs3d">couleurs3d</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.Color[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#couleursDyn">couleursDyn</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#coups">coups</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#coupsIllimit%C3%A9s">coupsIllimités</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#cp">cp</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#dessineCarreCouleurs">dessineCarreCouleurs</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#e">e</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#f">f</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) EnregistrementFichiers</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ff1">ff1</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#finJeuIA">finJeuIA</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#grandPionTransparent">grandPionTransparent</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#h">h</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#heures">heures</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#i">i</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static IaCalculsDifficile</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#iaCD">iaCD</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static IaCalculsFacile</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#iaCF">iaCF</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static IaCalculsMoyen</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#iaCM">iaCM</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static IaNivFacile</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#iaSMF">iaSMF</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static IaNivMoyen</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#iaSMM">iaSMM</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.ImageIcon</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#imageB">imageB</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#imageCharg%C3%A9e">imageChargée</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#images">images</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#infosDuJeu">infosDuJeu</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#iTemps">iTemps</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#jeuCommence">jeuCommence</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.lang.Thread</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#jeuT">jeuT</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JScrollPane</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#jsp1">jsp1</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JTextArea</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#label">label</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ldpdt">ldpdt</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ldPJ">ldPJ</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#m11">m11</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#maxTemps">maxTemps</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#minutes">minutes</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#n11">n11</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ndb">ndb</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ndco">ndco</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ndlC">ndlC</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#niveauDeLIA">niveauDeLIA</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#nombreDePartiesJou%C3%A9es">nombreDePartiesJouées</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JPanel</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#p1">p1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#p2">p2</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pause">pause</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#paused">paused</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#petitPion3d">petitPion3d</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pia">pia</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pionBlanc">pionBlanc</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pionJaune">pionJaune</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pionRouge">pionRouge</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pJeu">pJeu</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#placementB">placementB</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#premierCoups">premierCoups</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#q">q</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#r1">r1</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#r2">r2</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#r3">r3</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#reDimBonus">reDimBonus</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#sauve">sauve</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#secondes">secondes</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#t1">t1</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#t10">t10</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#t11">t11</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#t4">t4</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private static int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tabReponses">tabReponses</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tailleDesPolices">tailleDesPolices</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tcd">tcd</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tcoups">tcoups</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tcvH">tcvH</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tcvV">tcvV</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tdbh">tdbh</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tdcdr">tdcdr</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tdjpH">tdjpH</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tdjpV">tdjpV</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tdpi">tdpi</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#temps">temps</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.lang.Thread</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tempsT">tempsT</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.lang.Thread</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tempsT1">tempsT1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) javax.swing.JTextArea[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#texteOptions">texteOptions</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) javax.swing.JTextArea[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#texteTemps">texteTemps</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#th4">th4</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#titreImg">titreImg</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#tourEnCours">tourEnCours</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) UtilDate</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#utilDate">utilDate</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) UtilFenetre</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#utilFenetre">utilFenetre</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) UtilFichiers</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#utilFichiers">utilFichiers</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) UtilJeu</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#utilJeu">utilJeu</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#x">x</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.html#P1-Mastermind-int-int-int-int-int-boolean-int-int-int-int-boolean-int-">P1</a></span>(<a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a>&nbsp;f,
  int&nbsp;n11,
  int&nbsp;m11,
  int&nbsp;ndco,
  int&nbsp;h,
  int&nbsp;c,
  boolean&nbsp;clm,
  int&nbsp;heures,
  int&nbsp;minutes,
  int&nbsp;secondes,
  int&nbsp;nombreDePartiesJouées,
  boolean&nbsp;coupsIllimités,
  int&nbsp;tailleDesPolices)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#afficheResultat--">afficheResultat</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#afficheResultat2--">afficheResultat2</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#afficheResultat3--">afficheResultat3</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#afficheSolutions-int:A-">afficheSolutions</a></span>(int[]&nbsp;t)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>static <a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a>[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#agrandieTab-P1.Coup:A-">agrandieTab</a></span>(<a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a>[]&nbsp;t)</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#attendGangne--">attendGangne</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#calculTemps--">calculTemps</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#calculTempsS--">calculTempsS</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#chargeUnePartie-int-">chargeUnePartie</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#commenceTemps-int-">commenceTemps</a></span>(int&nbsp;temps)</code>&nbsp;</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>static int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#compteReponses2-int-int-">compteReponses2</a></span>(int&nbsp;r1,
               int&nbsp;r2)</code>&nbsp;</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>static int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#compteReponses3-int-">compteReponses3</a></span>(int&nbsp;r3)</code>&nbsp;</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>static int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#couleursAleat-int-">couleursAleat</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#dessineCarreCouleurs-java.awt.Graphics-int-int-int-int-int-">dessineCarreCouleurs</a></span>(java.awt.Graphics&nbsp;g,
                    int&nbsp;longueur,
                    int&nbsp;h,
                    int&nbsp;f,
                    int&nbsp;getWidth,
                    int&nbsp;getHeight)</code>&nbsp;</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#enregistreParametres--">enregistreParametres</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#finDuJeu--">finDuJeu</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#getJeuCommence--">getJeuCommence</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#ia--">ia</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#metAJourInfos--">metAJourInfos</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#nouveauCoup-int-">nouveauCoup</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#pause--">pause</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#premierCoupHvsH-java.awt.Graphics-">premierCoupHvsH</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#reDim--">reDim</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#reinitialiseTemps--">reinitialiseTemps</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#reprendre--">reprendre</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#sauvePartie--">sauvePartie</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#setTailleDesPolices-int-">setTailleDesPolices</a></span>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.html#VerifieDoublons-int:A:A-int:A-">VerifieDoublons</a></span>(int[][]&nbsp;t1,
               int[]&nbsp;t2)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="a">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>a</h4>
<pre>private static&nbsp;int a</pre>
</li>
</ul>
<a name="b">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>b</h4>
<pre>private static&nbsp;int b</pre>
</li>
</ul>
<a name="c">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>c</h4>
<pre>private static&nbsp;int c</pre>
</li>
</ul>
<a name="h">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>h</h4>
<pre>private static&nbsp;int h</pre>
</li>
</ul>
<a name="t1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>t1</h4>
<pre>private static&nbsp;int[] t1</pre>
</li>
</ul>
<a name="t4">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>t4</h4>
<pre>private static&nbsp;int[] t4</pre>
</li>
</ul>
<a name="t11">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>t11</h4>
<pre>private static&nbsp;int[] t11</pre>
</li>
</ul>
<a name="x">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>x</h4>
<pre>private static&nbsp;int x</pre>
</li>
</ul>
<a name="n11">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>n11</h4>
<pre>private static&nbsp;int n11</pre>
</li>
</ul>
<a name="m11">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>m11</h4>
<pre>private static&nbsp;int m11</pre>
</li>
</ul>
<a name="e">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>e</h4>
<pre>private static&nbsp;int e</pre>
</li>
</ul>
<a name="q">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>q</h4>
<pre>private static&nbsp;int q</pre>
</li>
</ul>
<a name="sauve">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sauve</h4>
<pre>private static&nbsp;int sauve</pre>
</li>
</ul>
<a name="couleurs">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleurs</h4>
<pre>private static&nbsp;int[][] couleurs</pre>
</li>
</ul>
<a name="tcoups">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tcoups</h4>
<pre>private static&nbsp;int[][] tcoups</pre>
</li>
</ul>
<a name="tabReponses">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tabReponses</h4>
<pre>private static&nbsp;int[][] tabReponses</pre>
</li>
</ul>
<a name="clm">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clm</h4>
<pre>private static&nbsp;boolean clm</pre>
</li>
</ul>
<a name="utilJeu">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>utilJeu</h4>
<pre>UtilJeu utilJeu</pre>
</li>
</ul>
<a name="utilFenetre">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>utilFenetre</h4>
<pre>UtilFenetre utilFenetre</pre>
</li>
</ul>
<a name="utilFichiers">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>utilFichiers</h4>
<pre>UtilFichiers utilFichiers</pre>
</li>
</ul>
<a name="caseVide">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>caseVide</h4>
<pre>java.awt.image.BufferedImage caseVide</pre>
</li>
</ul>
<a name="caseReponseVide">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>caseReponseVide</h4>
<pre>java.awt.image.BufferedImage caseReponseVide</pre>
</li>
</ul>
<a name="grandPionTransparent">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>grandPionTransparent</h4>
<pre>java.awt.image.BufferedImage grandPionTransparent</pre>
</li>
</ul>
<a name="pause">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pause</h4>
<pre>java.awt.image.BufferedImage pause</pre>
</li>
</ul>
<a name="cacheInfo">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cacheInfo</h4>
<pre>javax.swing.ImageIcon cacheInfo</pre>
</li>
</ul>
<a name="imageChargée">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>imageChargée</h4>
<pre>boolean[] imageChargée</pre>
</li>
</ul>
<a name="coupsIllimités">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>coupsIllimités</h4>
<pre>boolean coupsIllimités</pre>
</li>
</ul>
<a name="pionBlanc">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pionBlanc</h4>
<pre>java.awt.image.BufferedImage pionBlanc</pre>
</li>
</ul>
<a name="pionJaune">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pionJaune</h4>
<pre>java.awt.image.BufferedImage pionJaune</pre>
</li>
</ul>
<a name="pionRouge">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pionRouge</h4>
<pre>java.awt.image.BufferedImage pionRouge</pre>
</li>
</ul>
<a name="reDimBonus">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDimBonus</h4>
<pre>boolean reDimBonus</pre>
</li>
</ul>
<a name="couleursDyn">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleursDyn</h4>
<pre>java.awt.Color[] couleursDyn</pre>
</li>
</ul>
<a name="couleurBouton">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleurBouton</h4>
<pre>java.awt.Color couleurBouton</pre>
</li>
</ul>
<a name="iaSMF">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iaSMF</h4>
<pre>private static&nbsp;IaNivFacile iaSMF</pre>
</li>
</ul>
<a name="iaSMM">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iaSMM</h4>
<pre>private static&nbsp;IaNivMoyen iaSMM</pre>
</li>
</ul>
<a name="iaCF">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iaCF</h4>
<pre>private static&nbsp;IaCalculsFacile iaCF</pre>
</li>
</ul>
<a name="iaCM">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iaCM</h4>
<pre>private static&nbsp;IaCalculsMoyen iaCM</pre>
</li>
</ul>
<a name="iaCD">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iaCD</h4>
<pre>private static&nbsp;IaCalculsDifficile iaCD</pre>
</li>
</ul>
<a name="cacheInfoB">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cacheInfoB</h4>
<pre>javax.swing.JButton cacheInfoB</pre>
</li>
</ul>
<a name="p1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre>javax.swing.JPanel p1</pre>
</li>
</ul>
<a name="cmp5">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cmp5</h4>
<pre>int cmp5</pre>
</li>
</ul>
<a name="premierCoups">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>premierCoups</h4>
<pre>boolean premierCoups</pre>
</li>
</ul>
<a name="p2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>p2</h4>
<pre><a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a>[] p2</pre>
</li>
</ul>
<a name="niveauDeLIA">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>niveauDeLIA</h4>
<pre>int niveauDeLIA</pre>
</li>
</ul>
<a name="imageB">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>imageB</h4>
<pre>javax.swing.ImageIcon imageB</pre>
</li>
</ul>
<a name="boutons">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>boutons</h4>
<pre>javax.swing.JButton[] boutons</pre>
</li>
</ul>
<a name="couleurs3d">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleurs3d</h4>
<pre>javax.swing.JButton[] couleurs3d</pre>
</li>
</ul>
<a name="ldPJ">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ldPJ</h4>
<pre>int ldPJ</pre>
</li>
</ul>
<a name="f">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>f</h4>
<pre><a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a> f</pre>
</li>
</ul>
<a name="tdjpH">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tdjpH</h4>
<pre>int tdjpH</pre>
</li>
</ul>
<a name="avanceeDuTour">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>avanceeDuTour</h4>
<pre>int avanceeDuTour</pre>
</li>
</ul>
<a name="titreImg">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>titreImg</h4>
<pre>java.awt.image.BufferedImage titreImg</pre>
</li>
</ul>
<a name="petitPion3d">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>petitPion3d</h4>
<pre>java.awt.image.BufferedImage petitPion3d</pre>
</li>
</ul>
<a name="dessineCarreCouleurs">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dessineCarreCouleurs</h4>
<pre>boolean dessineCarreCouleurs</pre>
</li>
</ul>
<a name="placementB">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placementB</h4>
<pre>int[] placementB</pre>
</li>
</ul>
<a name="ldpdt">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ldpdt</h4>
<pre>int ldpdt</pre>
</li>
</ul>
<a name="actb">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>actb</h4>
<pre>boolean actb</pre>
</li>
</ul>
<a name="tourEnCours">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tourEnCours</h4>
<pre>boolean tourEnCours</pre>
</li>
</ul>
<a name="action">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>action</h4>
<pre><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a>[] action</pre>
</li>
</ul>
<a name="actionBT">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>actionBT</h4>
<pre><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;">P1.BoutonTransparentAction</a>[] actionBT</pre>
</li>
</ul>
<a name="actionClique">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>actionClique</h4>
<pre><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;">P1.RedimBonus</a> actionClique</pre>
</li>
</ul>
<a name="i">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>i</h4>
<pre>int i</pre>
</li>
</ul>
<a name="t10">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>t10</h4>
<pre>int[][] t10</pre>
</li>
</ul>
<a name="pJeu">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pJeu</h4>
<pre><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;">P1.PJeu</a> pJeu</pre>
</li>
</ul>
<a name="tdcdr">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tdcdr</h4>
<pre>int tdcdr</pre>
</li>
</ul>
<a name="jeuCommence">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>jeuCommence</h4>
<pre>boolean jeuCommence</pre>
</li>
</ul>
<a name="abt">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>abt</h4>
<pre>boolean abt</pre>
</li>
</ul>
<a name="nombreDePartiesJouées">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>nombreDePartiesJouées</h4>
<pre>int nombreDePartiesJouées</pre>
</li>
</ul>
<a name="ndco">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ndco</h4>
<pre>int ndco</pre>
</li>
</ul>
<a name="pia">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pia</h4>
<pre>boolean pia</pre>
</li>
</ul>
<a name="tcd">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tcd</h4>
<pre>int tcd</pre>
</li>
</ul>
<a name="tdbh">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tdbh</h4>
<pre>int tdbh</pre>
</li>
</ul>
<a name="ndb">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ndb</h4>
<pre>int ndb</pre>
</li>
</ul>
<a name="tcvV">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tcvV</h4>
<pre>int tcvV</pre>
</li>
</ul>
<a name="tcvH">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tcvH</h4>
<pre>int tcvH</pre>
</li>
</ul>
<a name="ndlC">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ndlC</h4>
<pre>int ndlC</pre>
</li>
</ul>
<a name="tdjpV">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tdjpV</h4>
<pre>int tdjpV</pre>
</li>
</ul>
<a name="ajustH">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ajustH</h4>
<pre>int ajustH</pre>
</li>
</ul>
<a name="ajustV">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ajustV</h4>
<pre>int ajustV</pre>
</li>
</ul>
<a name="box">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>box</h4>
<pre>javax.swing.Box box</pre>
</li>
</ul>
<a name="coups">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>coups</h4>
<pre><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a>[] coups</pre>
</li>
</ul>
<a name="tempsT">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tempsT</h4>
<pre>java.lang.Thread tempsT</pre>
</li>
</ul>
<a name="tempsT1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tempsT1</h4>
<pre>java.lang.Thread tempsT1</pre>
</li>
</ul>
<a name="jeuT">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>jeuT</h4>
<pre>java.lang.Thread jeuT</pre>
</li>
</ul>
<a name="bar">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>bar</h4>
<pre>javax.swing.JProgressBar bar</pre>
</li>
</ul>
<a name="images">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>images</h4>
<pre>java.lang.String images</pre>
</li>
</ul>
<a name="cliqueBInfo">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cliqueBInfo</h4>
<pre><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;">P1.Clique</a> cliqueBInfo</pre>
</li>
</ul>
<a name="barrePanel">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>barrePanel</h4>
<pre>javax.swing.JPanel barrePanel</pre>
</li>
</ul>
<a name="iTemps">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>iTemps</h4>
<pre>int iTemps</pre>
</li>
</ul>
<a name="heures">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>heures</h4>
<pre>int heures</pre>
</li>
</ul>
<a name="minutes">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>minutes</h4>
<pre>int minutes</pre>
</li>
</ul>
<a name="secondes">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>secondes</h4>
<pre>int secondes</pre>
</li>
</ul>
<a name="ff1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ff1</h4>
<pre>EnregistrementFichiers ff1</pre>
</li>
</ul>
<a name="cp">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cp</h4>
<pre><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a> cp</pre>
</li>
</ul>
<a name="jsp1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>jsp1</h4>
<pre>javax.swing.JScrollPane jsp1</pre>
</li>
</ul>
<a name="utilDate">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>utilDate</h4>
<pre>UtilDate utilDate</pre>
</li>
</ul>
<a name="temps">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>temps</h4>
<pre>int temps</pre>
</li>
</ul>
<a name="maxTemps">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>maxTemps</h4>
<pre>int maxTemps</pre>
</li>
</ul>
<a name="th4">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>th4</h4>
<pre>int[] th4</pre>
</li>
</ul>
<a name="finJeuIA">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>finJeuIA</h4>
<pre>boolean finJeuIA</pre>
</li>
</ul>
<a name="r1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>r1</h4>
<pre>int r1</pre>
</li>
</ul>
<a name="r2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>r2</h4>
<pre>int r2</pre>
</li>
</ul>
<a name="r3">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>r3</h4>
<pre>int r3</pre>
</li>
</ul>
<a name="tdpi">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tdpi</h4>
<pre>int tdpi</pre>
</li>
</ul>
<a name="label">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>label</h4>
<pre>javax.swing.JTextArea label</pre>
</li>
</ul>
<a name="CouleurDuLabel">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>CouleurDuLabel</h4>
<pre>java.awt.Color CouleurDuLabel</pre>
</li>
</ul>
<a name="infosDuJeu">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>infosDuJeu</h4>
<pre>java.lang.String infosDuJeu</pre>
</li>
</ul>
<a name="champNombre">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>champNombre</h4>
<pre>javax.swing.JTextField[] champNombre</pre>
</li>
</ul>
<a name="champTemps">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>champTemps</h4>
<pre>javax.swing.JTextField[] champTemps</pre>
</li>
</ul>
<a name="texteOptions">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>texteOptions</h4>
<pre>javax.swing.JTextArea[] texteOptions</pre>
</li>
</ul>
<a name="texteTemps">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>texteTemps</h4>
<pre>javax.swing.JTextArea[] texteTemps</pre>
</li>
</ul>
<a name="tailleDesPolices">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tailleDesPolices</h4>
<pre>int tailleDesPolices</pre>
</li>
</ul>
<a name="paused">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>paused</h4>
<pre>boolean paused</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="P1-Mastermind-int-int-int-int-int-boolean-int-int-int-int-boolean-int-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>P1</h4>
<pre>public&nbsp;P1(<a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a>&nbsp;f,
          int&nbsp;n11,
          int&nbsp;m11,
          int&nbsp;ndco,
          int&nbsp;h,
          int&nbsp;c,
          boolean&nbsp;clm,
          int&nbsp;heures,
          int&nbsp;minutes,
          int&nbsp;secondes,
          int&nbsp;nombreDePartiesJouées,
          boolean&nbsp;coupsIllimités,
          int&nbsp;tailleDesPolices)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="chargeUnePartie-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>chargeUnePartie</h4>
<pre>public&nbsp;void&nbsp;chargeUnePartie(int&nbsp;n)</pre>
</li>
</ul>
<a name="sauvePartie--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sauvePartie</h4>
<pre>public&nbsp;void&nbsp;sauvePartie()</pre>
</li>
</ul>
<a name="setTailleDesPolices-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setTailleDesPolices</h4>
<pre>public&nbsp;void&nbsp;setTailleDesPolices(int&nbsp;n)</pre>
</li>
</ul>
<a name="enregistreParametres--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>enregistreParametres</h4>
<pre>public&nbsp;void&nbsp;enregistreParametres()</pre>
</li>
</ul>
<a name="metAJourInfos--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>metAJourInfos</h4>
<pre>public&nbsp;void&nbsp;metAJourInfos()</pre>
</li>
</ul>
<a name="ia--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ia</h4>
<pre>public&nbsp;void&nbsp;ia()</pre>
</li>
</ul>
<a name="afficheResultat--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheResultat</h4>
<pre>public&nbsp;void&nbsp;afficheResultat()</pre>
</li>
</ul>
<a name="attendGangne--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>attendGangne</h4>
<pre>public&nbsp;void&nbsp;attendGangne()</pre>
</li>
</ul>
<a name="afficheResultat2--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheResultat2</h4>
<pre>public&nbsp;void&nbsp;afficheResultat2()</pre>
</li>
</ul>
<a name="afficheResultat3--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheResultat3</h4>
<pre>public&nbsp;void&nbsp;afficheResultat3()</pre>
</li>
</ul>
<a name="finDuJeu--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>finDuJeu</h4>
<pre>public&nbsp;void&nbsp;finDuJeu()</pre>
</li>
</ul>
<a name="compteReponses2-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>compteReponses2</h4>
<pre>public static&nbsp;int[]&nbsp;compteReponses2(int&nbsp;r1,
                                    int&nbsp;r2)</pre>
</li>
</ul>
<a name="compteReponses3-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>compteReponses3</h4>
<pre>public static&nbsp;int[]&nbsp;compteReponses3(int&nbsp;r3)</pre>
</li>
</ul>
<a name="nouveauCoup-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>nouveauCoup</h4>
<pre>public&nbsp;void&nbsp;nouveauCoup(int&nbsp;n)</pre>
</li>
</ul>
<a name="agrandieTab-P1.Coup:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>agrandieTab</h4>
<pre>public static&nbsp;<a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a>[]&nbsp;agrandieTab(<a href="P1.Coup.html" title="class in &lt;Unnamed&gt;">P1.Coup</a>[]&nbsp;t)</pre>
</li>
</ul>
<a name="couleursAleat-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>couleursAleat</h4>
<pre>public static&nbsp;int[][]&nbsp;couleursAleat(int&nbsp;n)</pre>
</li>
</ul>
<a name="pause--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pause</h4>
<pre>public&nbsp;void&nbsp;pause()</pre>
</li>
</ul>
<a name="reprendre--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reprendre</h4>
<pre>public&nbsp;void&nbsp;reprendre()</pre>
</li>
</ul>
<a name="reinitialiseTemps--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reinitialiseTemps</h4>
<pre>public&nbsp;void&nbsp;reinitialiseTemps()</pre>
</li>
</ul>
<a name="calculTemps--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>calculTemps</h4>
<pre>public&nbsp;int&nbsp;calculTemps()</pre>
</li>
</ul>
<a name="calculTempsS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>calculTempsS</h4>
<pre>public&nbsp;java.lang.String&nbsp;calculTempsS()</pre>
</li>
</ul>
<a name="commenceTemps-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>commenceTemps</h4>
<pre>public&nbsp;void&nbsp;commenceTemps(int&nbsp;temps)</pre>
</li>
</ul>
<a name="afficheSolutions-int:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>afficheSolutions</h4>
<pre>public static&nbsp;void&nbsp;afficheSolutions(int[]&nbsp;t)</pre>
</li>
</ul>
<a name="VerifieDoublons-int:A:A-int:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>VerifieDoublons</h4>
<pre>public static&nbsp;boolean&nbsp;VerifieDoublons(int[][]&nbsp;t1,
                                      int[]&nbsp;t2)</pre>
</li>
</ul>
<a name="dessineCarreCouleurs-java.awt.Graphics-int-int-int-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dessineCarreCouleurs</h4>
<pre>public&nbsp;void&nbsp;dessineCarreCouleurs(java.awt.Graphics&nbsp;g,
                                 int&nbsp;longueur,
                                 int&nbsp;h,
                                 int&nbsp;f,
                                 int&nbsp;getWidth,
                                 int&nbsp;getHeight)</pre>
</li>
</ul>
<a name="premierCoupHvsH-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>premierCoupHvsH</h4>
<pre>public&nbsp;void&nbsp;premierCoupHvsH(java.awt.Graphics&nbsp;g)</pre>
</li>
</ul>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
<a name="reDim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reDim</h4>
<pre>public&nbsp;void&nbsp;reDim()</pre>
</li>
</ul>
<a name="getJeuCommence--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getJeuCommence</h4>
<pre>public&nbsp;boolean&nbsp;getJeuCommence()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.html" target="_top">Frames</a></li>
<li><a href="P1.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.JeuPause.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:31 CEST 2017 -->
<title>P1.JeuPause</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.JeuPause";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.JeuPause.html" target="_top">Frames</a></li>
<li><a href="P1.JeuPause.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#fields.inherited.from.class.javax.swing.JComponent">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.JeuPause" class="title">Class P1.JeuPause</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.JeuPause</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.JeuPause</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.JeuPause.html#JeuPause--">JeuPause</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.JeuPause.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="JeuPause--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>JeuPause</h4>
<pre>JeuPause()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.JeuPause.html" target="_top">Frames</a></li>
<li><a href="P1.JeuPause.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#fields.inherited.from.class.javax.swing.JComponent">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.PJeu.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:31 CEST 2017 -->
<title>P1.PJeu</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.PJeu";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.PJeu.html" target="_top">Frames</a></li>
<li><a href="P1.PJeu.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.PJeu" class="title">Class P1.PJeu</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>javax.swing.JComponent</li>
<li>
<ul class="inheritance">
<li>javax.swing.JPanel</li>
<li>
<ul class="inheritance">
<li>P1.PJeu</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.PJeu</span>
extends javax.swing.JPanel</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JPanel</h3>
<code>javax.swing.JPanel.AccessibleJPanel</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JComponent</h3>
<code>javax.swing.JComponent.AccessibleJComponent</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.PJeu.html#f">f</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) <a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;">P1.JeuPause</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.PJeu.html#jeuPause">jeuPause</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.PJeu.html#x">x</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JComponent</h3>
<code>listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.PJeu.html#PJeu-Mastermind-">PJeu</a></span>(<a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a>&nbsp;f)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.PJeu.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.PJeu.html#setVisibleJeuPause-boolean-">setVisibleJeuPause</a></span>(boolean&nbsp;a)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JPanel">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JPanel</h3>
<code>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JComponent">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JComponent</h3>
<code>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="jeuPause">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>jeuPause</h4>
<pre><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;">P1.JeuPause</a> jeuPause</pre>
</li>
</ul>
<a name="f">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>f</h4>
<pre><a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a> f</pre>
</li>
</ul>
<a name="x">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>x</h4>
<pre>int x</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="PJeu-Mastermind-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>PJeu</h4>
<pre>public&nbsp;PJeu(<a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a>&nbsp;f)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>paintComponent</code>&nbsp;in class&nbsp;<code>javax.swing.JComponent</code></dd>
</dl>
</li>
</ul>
<a name="setVisibleJeuPause-boolean-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>setVisibleJeuPause</h4>
<pre>public&nbsp;void&nbsp;setVisibleJeuPause(boolean&nbsp;a)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.PJeu.html" target="_top">Frames</a></li>
<li><a href="P1.PJeu.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JPanel">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.RedimBonus.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:31 CEST 2017 -->
<title>P1.RedimBonus</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.RedimBonus";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.RedimBonus.html" target="_top">Frames</a></li>
<li><a href="P1.RedimBonus.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.RedimBonus" class="title">Class P1.RedimBonus</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.RedimBonus</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.event.MouseListener, java.util.EventListener</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.RedimBonus</span>
extends java.lang.Object
implements java.awt.event.MouseListener</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.RedimBonus.html#RedimBonus--">RedimBonus</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseClicked-java.awt.event.MouseEvent-">mouseClicked</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseEntered-java.awt.event.MouseEvent-">mouseEntered</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseExited-java.awt.event.MouseEvent-">mouseExited</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.RedimBonus.html#mousePressed-java.awt.event.MouseEvent-">mousePressed</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.RedimBonus.html#mouseReleased-java.awt.event.MouseEvent-">mouseReleased</a></span>(java.awt.event.MouseEvent&nbsp;e)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="RedimBonus--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>RedimBonus</h4>
<pre>public&nbsp;RedimBonus()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="mousePressed-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mousePressed</h4>
<pre>public&nbsp;void&nbsp;mousePressed(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mousePressed</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseClicked-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseClicked</h4>
<pre>public&nbsp;void&nbsp;mouseClicked(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseClicked</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseEntered-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseEntered</h4>
<pre>public&nbsp;void&nbsp;mouseEntered(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseEntered</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseExited-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseExited</h4>
<pre>public&nbsp;void&nbsp;mouseExited(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseExited</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
<a name="mouseReleased-java.awt.event.MouseEvent-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>mouseReleased</h4>
<pre>public&nbsp;void&nbsp;mouseReleased(java.awt.event.MouseEvent&nbsp;e)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>mouseReleased</code>&nbsp;in interface&nbsp;<code>java.awt.event.MouseListener</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.RedimBonus.html" target="_top">Frames</a></li>
<li><a href="P1.RedimBonus.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.TailleDesPolices.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>P1.TailleDesPolices</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.TailleDesPolices";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.TailleDesPolices.html" target="_top">Frames</a></li>
<li><a href="P1.TailleDesPolices.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JFrame">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.TailleDesPolices" class="title">Class P1.TailleDesPolices</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>java.awt.Container</li>
<li>
<ul class="inheritance">
<li>java.awt.Window</li>
<li>
<ul class="inheritance">
<li>java.awt.Frame</li>
<li>
<ul class="inheritance">
<li>javax.swing.JFrame</li>
<li>
<ul class="inheritance">
<li>P1.TailleDesPolices</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">P1.TailleDesPolices</span>
extends javax.swing.JFrame</pre>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="serialized-form.html#P1.TailleDesPolices">Serialized Form</a></dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;javax.swing.JFrame</h3>
<code>javax.swing.JFrame.AccessibleJFrame</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Frame</h3>
<code>java.awt.Frame.AccessibleAWTFrame</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Window">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Window</h3>
<code>java.awt.Window.AccessibleAWTWindow, java.awt.Window.Type</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Container</h3>
<code>java.awt.Container.AccessibleAWTContainer</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) <a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.TailleDesPolices.html#p1">p1</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) java.awt.event.WindowAdapter</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.TailleDesPolices.html#wa">wa</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;javax.swing.JFrame</h3>
<code>accessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Frame</h3>
<code>CROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.javax.swing.WindowConstants">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;javax.swing.WindowConstants</h3>
<code>DISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.TailleDesPolices.html#TailleDesPolices--">TailleDesPolices</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.TailleDesPolices.html#erreurEntier--">erreurEntier</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.TailleDesPolices.html#erreurValeur--">erreurValeur</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.javax.swing.JFrame">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;javax.swing.JFrame</h3>
<code>addImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Frame">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Frame</h3>
<code>addNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setBackground, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setOpacity, setResizable, setShape, setState, setTitle, setUndecorated</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Window">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Window</h3>
<code>addPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBackground, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOpacity, getOwnedWindows, getOwner, getOwnerlessWindows, getShape, getToolkit, getType, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isAutoRequestFocus, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isOpaque, isShowing, isValidateRoot, pack, paint, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setAutoRequestFocus, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocation, setLocation, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setType, setVisible, show, toBack, toFront</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Container">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Container</h3>
<code>add, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusDownCycle, validate, validateTree</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getGraphicsConfiguration, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, revalidate, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.MenuContainer">
<!--   -->
</a>
<h3>Methods inherited from interface&nbsp;java.awt.MenuContainer</h3>
<code>getFont, postEvent</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="p1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a> p1</pre>
</li>
</ul>
<a name="wa">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>wa</h4>
<pre>java.awt.event.WindowAdapter wa</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="TailleDesPolices--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>TailleDesPolices</h4>
<pre>public&nbsp;TailleDesPolices()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="erreurEntier--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>erreurEntier</h4>
<pre>public&nbsp;void&nbsp;erreurEntier()</pre>
</li>
</ul>
<a name="erreurValeur--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>erreurValeur</h4>
<pre>public&nbsp;void&nbsp;erreurValeur()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.TailleDesPolices.html" target="_top">Frames</a></li>
<li><a href="P1.TailleDesPolices.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.javax.swing.JFrame">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P1.Traitement.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>P1.Traitement</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P1.Traitement";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P2.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Traitement.html" target="_top">Frames</a></li>
<li><a href="P1.Traitement.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P1.Traitement" class="title">Class P1.Traitement</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>P1.Traitement</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<dl>
<dt>Enclosing class:</dt>
<dd><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P1.Traitement</span>
extends java.lang.Object
implements java.lang.Runnable</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P1.Traitement.html#Traitement--">Traitement</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P1.Traitement.html#run--">run</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Traitement--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Traitement</h4>
<pre>Traitement()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="run--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>run</h4>
<pre>public&nbsp;void&nbsp;run()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>run</code>&nbsp;in interface&nbsp;<code>java.lang.Runnable</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="P2.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?P1.Traitement.html" target="_top">Frames</a></li>
<li><a href="P1.Traitement.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/P2.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>P2</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="P2";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="index.html?P2.html" target="_top">Frames</a></li>
<li><a href="P2.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.java.awt.Component">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class P2" class="title">Class P2</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>java.awt.Component</li>
<li>
<ul class="inheritance">
<li>P2</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable</dd>
</dl>
<hr>
<br>
<pre>class <span class="typeNameLabel">P2</span>
extends java.awt.Component</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from class&nbsp;java.awt.Component</h3>
<code>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P2.html#petitPion3d">petitPion3d</a></span></code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;java.awt.Component</h3>
<code>accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.java.awt.image.ImageObserver">
<!--   -->
</a>
<h3>Fields inherited from interface&nbsp;java.awt.image.ImageObserver</h3>
<code>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="P2.html#P2--">P2</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="P2.html#paintComponent-java.awt.Graphics-">paintComponent</a></span>(java.awt.Graphics&nbsp;g)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.awt.Component">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.awt.Component</h3>
<code>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, addNotify, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, deliverEvent, disable, disableEvents, dispatchEvent, doLayout, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getAccessibleContext, getAlignmentX, getAlignmentY, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentAt, getComponentAt, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeys, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getGraphics, getGraphicsConfiguration, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getListeners, getLocale, getLocation, getLocation, getLocationOnScreen, getMaximumSize, getMinimumSize, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPreferredSize, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getToolkit, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, invalidate, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusCycleRoot, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, layout, list, list, list, list, list, locate, location, lostFocus, minimumSize, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paint, paintAll, paramString, postEvent, preferredSize, prepareImage, prepareImage, print, printAll, processComponentEvent, processEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removeNotify, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, reshape, resize, resize, revalidate, setBackground, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeys, setFocusTraversalKeysEnabled, setFont, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setMinimumSize, setName, setPreferredSize, setSize, setSize, setVisible, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle, update, validate</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="petitPion3d">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>petitPion3d</h4>
<pre>java.awt.image.BufferedImage petitPion3d</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="P2--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>P2</h4>
<pre>public&nbsp;P2()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="paintComponent-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>paintComponent</h4>
<pre>public&nbsp;void&nbsp;paintComponent(java.awt.Graphics&nbsp;g)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="index.html?P2.html" target="_top">Frames</a></li>
<li><a href="P2.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.classes.inherited.from.class.java.awt.Component">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/package-frame.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>&lt;Unnamed&gt;</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<h1 class="bar"><a href="package-summary.html" target="classFrame">&lt;Unnamed&gt;</a></h1>
<div class="indexContainer">
<h2 title="Classes">Classes</h2>
<ul title="Classes">
<li><a href="Mastermind.html" title="class in &lt;Unnamed&gt;" target="classFrame">Mastermind</a></li>
<li><a href="P1.html" title="class in &lt;Unnamed&gt;" target="classFrame">P1</a></li>
<li><a href="P2.html" title="class in &lt;Unnamed&gt;" target="classFrame">P2</a></li>
</ul>
</div>
</body>
</html>

# javadoc/package-summary.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Package</li>
<li>Next&nbsp;Package</li>
</ul>
<ul class="navList">
<li><a href="index.html?package-summary.html" target="_top">Frames</a></li>
<li><a href="package-summary.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 title="Package" class="title">Package&nbsp;&lt;Unnamed&gt;</h1>
</div>
<div class="contentContainer">
<ul class="blockList">
<li class="blockList">
<table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Class Summary table, listing classes, and an explanation">
<caption><span>Class Summary</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Class</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tbody>
<tr class="altColor">
<td class="colFirst"><a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a></td>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a></td>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><a href="P2.html" title="class in &lt;Unnamed&gt;">P2</a></td>
<td class="colLast">&nbsp;</td>
</tr>
</tbody>
</table>
</li>
</ul>
</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Package</li>
<li>Next&nbsp;Package</li>
</ul>
<ul class="navList">
<li><a href="index.html?package-summary.html" target="_top">Frames</a></li>
<li><a href="package-summary.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/package-tree.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title> Class Hierarchy</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title=" Class Hierarchy";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li class="navBarCell1Rev">Tree</li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?package-tree.html" target="_top">Frames</a></li>
<li><a href="package-tree.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 class="title">Hierarchy For Package &lt;Unnamed&gt;</h1>
</div>
<div class="contentContainer">
<h2 title="Class Hierarchy">Class Hierarchy</h2>
<ul>
<li type="circle">java.lang.Object
<ul>
<li type="circle">java.awt.Component (implements java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable)
<ul>
<li type="circle">java.awt.Container
<ul>
<li type="circle">javax.swing.JComponent (implements java.io.Serializable)
<ul>
<li type="circle">javax.swing.JPanel (implements javax.accessibility.Accessible)
<ul>
<li type="circle"><a href="P1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1</span></a></li>
<li type="circle"><a href="P1.Boutons.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Boutons</span></a></li>
<li type="circle"><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1</span></a></li>
<li type="circle"><a href="P1.Container1.Parties.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Parties</span></a></li>
<li type="circle"><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container5</span></a></li>
<li type="circle"><a href="P1.Coup.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Coup</span></a></li>
<li type="circle"><a href="P1.JeuPause.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.JeuPause</span></a></li>
<li type="circle"><a href="P1.PJeu.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.PJeu</span></a></li>
</ul>
</li>
</ul>
</li>
<li type="circle">java.awt.Window (implements javax.accessibility.Accessible)
<ul>
<li type="circle">java.awt.Frame (implements java.awt.MenuContainer)
<ul>
<li type="circle">javax.swing.JFrame (implements javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants)
<ul>
<li type="circle"><a href="Mastermind.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Mastermind</span></a></li>
<li type="circle"><a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.ChargerPartie</span></a></li>
<li type="circle"><a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.TailleDesPolices</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li type="circle"><a href="P2.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P2</span></a></li>
</ul>
</li>
<li type="circle"><a href="Mastermind.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">Mastermind.Dors</span></a> (implements java.lang.Runnable)</li>
<li type="circle"><a href="P1.AfficheIA.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.AfficheIA</span></a> (implements java.lang.Runnable)</li>
<li type="circle"><a href="P1.BoutonTransparentAction.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.BoutonTransparentAction</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Clique</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.CliqueOptions.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.CliqueOptions</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.Container1.Clique.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Clique</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.Container1.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.CliqueSouris</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Container1.Parties.CliqueSouris.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container1.Parties.CliqueSouris</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Container5.Clique3.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Container5.Clique3</span></a> (implements java.awt.event.ActionListener)</li>
<li type="circle"><a href="P1.Dors.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Dors</span></a> (implements java.lang.Runnable)</li>
<li type="circle"><a href="P1.RedimBonus.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.RedimBonus</span></a> (implements java.awt.event.MouseListener)</li>
<li type="circle"><a href="P1.Traitement.html" title="class in &lt;Unnamed&gt;"><span class="typeNameLink">P1.Traitement</span></a> (implements java.lang.Runnable)</li>
</ul>
</li>
</ul>
</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li class="navBarCell1Rev">Tree</li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?package-tree.html" target="_top">Frames</a></li>
<li><a href="package-tree.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/script.js

function show(type)
{
    count = 0;
    for (var key in methods) {
        var row = document.getElementById(key);
        if ((methods[key] &  type) != 0) {
            row.style.display = '';
            row.className = (count++ % 2) ? rowColor : altColor;
        }
        else
            row.style.display = 'none';
    }
    updateTabs(type);
}

function updateTabs(type)
{
    for (var value in tabs) {
        var sNode = document.getElementById(tabs[value][0]);
        var spanNode = sNode.firstChild;
        if (value == type) {
            sNode.className = activeTableTab;
            spanNode.innerHTML = tabs[value][1];
        }
        else {
            sNode.className = tableTab;
            spanNode.innerHTML = "<a href=\"javascript:show("+ value + ");\">" + tabs[value][1] + "</a>";
        }
    }
}

# javadoc/serialized-form.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_121) on Fri Sep 29 15:13:32 CEST 2017 -->
<title>Serialized Form</title>
<meta name="date" content="2017-09-29">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script type="text/javascript" src="script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Serialized Form";
        }
    }
    catch(err) {
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?serialized-form.html" target="_top">Frames</a></li>
<li><a href="serialized-form.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="header">
<h1 title="Serialized Form" class="title">Serialized Form</h1>
</div>
<div class="serializedFormContainer">
<ul class="blockList">
<li class="blockList">
<h2 title="Package">Package&nbsp;&lt;Unnamed&gt;</h2>
<ul class="blockList">
<li class="blockList"><a name="Credits">
<!--   -->
</a>
<h3>Class Credits extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockListLast">
<h4>p1</h4>
<pre>Container3 p1</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="EntrerNom">
<!--   -->
</a>
<h3>Class EntrerNom extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre>Container5 p1</pre>
</li>
<li class="blockListLast">
<h4>wa</h4>
<pre>java.awt.event.WindowAdapter wa</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="Instructions">
<!--   -->
</a>
<h3>Class Instructions extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockListLast">
<h4>p1</h4>
<pre>Container4 p1</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="Mastermind">
<!--   -->
</a>
<h3>Class <a href="Mastermind.html" title="class in &lt;Unnamed&gt;">Mastermind</a> extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockList">
<h4>b1</h4>
<pre>java.lang.Boolean b1</pre>
</li>
<li class="blockList">
<h4>b2</h4>
<pre>java.lang.Boolean b2</pre>
</li>
<li class="blockList">
<h4>getHeight</h4>
<pre>int getHeight</pre>
</li>
<li class="blockList">
<h4>getWidth</h4>
<pre>int getWidth</pre>
</li>
<li class="blockList">
<h4>p1</h4>
<pre><a href="P1.html" title="class in &lt;Unnamed&gt;">P1</a> p1</pre>
</li>
<li class="blockList">
<h4>enregistrementFichiers</h4>
<pre>EnregistrementFichiers enregistrementFichiers</pre>
</li>
<li class="blockList">
<h4>clm</h4>
<pre>boolean clm</pre>
</li>
<li class="blockListLast">
<h4>coupsIllimités</h4>
<pre>boolean coupsIllimités</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="P1.ChargerPartie">
<!--   -->
</a>
<h3>Class <a href="P1.ChargerPartie.html" title="class in &lt;Unnamed&gt;">P1.ChargerPartie</a> extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre><a href="P1.Container1.html" title="class in &lt;Unnamed&gt;">P1.Container1</a> p1</pre>
</li>
<li class="blockList">
<h4>b1</h4>
<pre>boolean b1</pre>
</li>
<li class="blockList">
<h4>tailleDesPolices</h4>
<pre>int tailleDesPolices</pre>
</li>
<li class="blockListLast">
<h4>ff1</h4>
<pre>EnregistrementFichiers ff1</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="P1.TailleDesPolices">
<!--   -->
</a>
<h3>Class <a href="P1.TailleDesPolices.html" title="class in &lt;Unnamed&gt;">P1.TailleDesPolices</a> extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre><a href="P1.Container5.html" title="class in &lt;Unnamed&gt;">P1.Container5</a> p1</pre>
</li>
<li class="blockListLast">
<h4>wa</h4>
<pre>java.awt.event.WindowAdapter wa</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="Scores">
<!--   -->
</a>
<h3>Class Scores extends javax.swing.JFrame implements Serializable</h3>
<ul class="blockList">
<li class="blockList">
<h3>Serialized Fields</h3>
<ul class="blockList">
<li class="blockList">
<h4>p1</h4>
<pre>Container p1</pre>
</li>
<li class="blockList">
<h4>b1</h4>
<pre>boolean b1</pre>
</li>
<li class="blockListLast">
<h4>utilFichiers</h4>
<pre>UtilFichiers utilFichiers</pre>
</li>
</ul>
</li>
</ul>
</li>
<li class="blockList"><a name="UtilJeu1">
<!--   -->
</a>
<h3>Class UtilJeu1 extends java.lang.Object implements Serializable</h3>
</li>
</ul>
</li>
</ul>
</div>
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li>Class</li>
<li><a href="overview-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev</li>
<li>Next</li>
</ul>
<ul class="navList">
<li><a href="index.html?serialized-form.html" target="_top">Frames</a></li>
<li><a href="serialized-form.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>

# javadoc/stylesheet.css

/* Javadoc style sheet */
/*
Overall document style
*/

@import url('resources/fonts/dejavu.css');

body {
    background-color:#ffffff;
    color:#353833;
    font-family:'DejaVu Sans', Arial, Helvetica, sans-serif;
    font-size:14px;
    margin:0;
}
a:link, a:visited {
    text-decoration:none;
    color:#4A6782;
}
a:hover, a:focus {
    text-decoration:none;
    color:#bb7a2a;
}
a:active {
    text-decoration:none;
    color:#4A6782;
}
a[name] {
    color:#353833;
}
a[name]:hover {
    text-decoration:none;
    color:#353833;
}
pre {
    font-family:'DejaVu Sans Mono', monospace;
    font-size:14px;
}
h1 {
    font-size:20px;
}
h2 {
    font-size:18px;
}
h3 {
    font-size:16px;
    font-style:italic;
}
h4 {
    font-size:13px;
}
h5 {
    font-size:12px;
}
h6 {
    font-size:11px;
}
ul {
    list-style-type:disc;
}
code, tt {
    font-family:'DejaVu Sans Mono', monospace;
    font-size:14px;
    padding-top:4px;
    margin-top:8px;
    line-height:1.4em;
}
dt code {
    font-family:'DejaVu Sans Mono', monospace;
    font-size:14px;
    padding-top:4px;
}
table tr td dt code {
    font-family:'DejaVu Sans Mono', monospace;
    font-size:14px;
    vertical-align:top;
    padding-top:4px;
}
sup {
    font-size:8px;
}
/*
Document title and Copyright styles
*/
.clear {
    clear:both;
    height:0px;
    overflow:hidden;
}
.aboutLanguage {
    float:right;
    padding:0px 21px;
    font-size:11px;
    z-index:200;
    margin-top:-9px;
}
.legalCopy {
    margin-left:.5em;
}
.bar a, .bar a:link, .bar a:visited, .bar a:active {
    color:#FFFFFF;
    text-decoration:none;
}
.bar a:hover, .bar a:focus {
    color:#bb7a2a;
}
.tab {
    background-color:#0066FF;
    color:#ffffff;
    padding:8px;
    width:5em;
    font-weight:bold;
}
/*
Navigation bar styles
*/
.bar {
    background-color:#4D7A97;
    color:#FFFFFF;
    padding:.8em .5em .4em .8em;
    height:auto;/*height:1.8em;*/
    font-size:11px;
    margin:0;
}
.topNav {
    background-color:#4D7A97;
    color:#FFFFFF;
    float:left;
    padding:0;
    width:100%;
    clear:right;
    height:2.8em;
    padding-top:10px;
    overflow:hidden;
    font-size:12px; 
}
.bottomNav {
    margin-top:10px;
    background-color:#4D7A97;
    color:#FFFFFF;
    float:left;
    padding:0;
    width:100%;
    clear:right;
    height:2.8em;
    padding-top:10px;
    overflow:hidden;
    font-size:12px;
}
.subNav {
    background-color:#dee3e9;
    float:left;
    width:100%;
    overflow:hidden;
    font-size:12px;
}
.subNav div {
    clear:left;
    float:left;
    padding:0 0 5px 6px;
    text-transform:uppercase;
}
ul.navList, ul.subNavList {
    float:left;
    margin:0 25px 0 0;
    padding:0;
}
ul.navList li{
    list-style:none;
    float:left;
    padding: 5px 6px;
    text-transform:uppercase;
}
ul.subNavList li{
    list-style:none;
    float:left;
}
.topNav a:link, .topNav a:active, .topNav a:visited, .bottomNav a:link, .bottomNav a:active, .bottomNav a:visited {
    color:#FFFFFF;
    text-decoration:none;
    text-transform:uppercase;
}
.topNav a:hover, .bottomNav a:hover {
    text-decoration:none;
    color:#bb7a2a;
    text-transform:uppercase;
}
.navBarCell1Rev {
    background-color:#F8981D;
    color:#253441;
    margin: auto 5px;
}
.skipNav {
    position:absolute;
    top:auto;
    left:-9999px;
    overflow:hidden;
}
/*
Page header and footer styles
*/
.header, .footer {
    clear:both;
    margin:0 20px;
    padding:5px 0 0 0;
}
.indexHeader {
    margin:10px;
    position:relative;
}
.indexHeader span{
    margin-right:15px;
}
.indexHeader h1 {
    font-size:13px;
}
.title {
    color:#2c4557;
    margin:10px 0;
}
.subTitle {
    margin:5px 0 0 0;
}
.header ul {
    margin:0 0 15px 0;
    padding:0;
}
.footer ul {
    margin:20px 0 5px 0;
}
.header ul li, .footer ul li {
    list-style:none;
    font-size:13px;
}
/*
Heading styles
*/
div.details ul.blockList ul.blockList ul.blockList li.blockList h4, div.details ul.blockList ul.blockList ul.blockListLast li.blockList h4 {
    background-color:#dee3e9;
    border:1px solid #d0d9e0;
    margin:0 0 6px -8px;
    padding:7px 5px;
}
ul.blockList ul.blockList ul.blockList li.blockList h3 {
    background-color:#dee3e9;
    border:1px solid #d0d9e0;
    margin:0 0 6px -8px;
    padding:7px 5px;
}
ul.blockList ul.blockList li.blockList h3 {
    padding:0;
    margin:15px 0;
}
ul.blockList li.blockList h2 {
    padding:0px 0 20px 0;
}
/*
Page layout container styles
*/
.contentContainer, .sourceContainer, .classUseContainer, .serializedFormContainer, .constantValuesContainer {
    clear:both;
    padding:10px 20px;
    position:relative;
}
.indexContainer {
    margin:10px;
    position:relative;
    font-size:12px;
}
.indexContainer h2 {
    font-size:13px;
    padding:0 0 3px 0;
}
.indexContainer ul {
    margin:0;
    padding:0;
}
.indexContainer ul li {
    list-style:none;
    padding-top:2px;
}
.contentContainer .description dl dt, .contentContainer .details dl dt, .serializedFormContainer dl dt {
    font-size:12px;
    font-weight:bold;
    margin:10px 0 0 0;
    color:#4E4E4E;
}
.contentContainer .description dl dd, .contentContainer .details dl dd, .serializedFormContainer dl dd {
    margin:5px 0 10px 0px;
    font-size:14px;
    font-family:'DejaVu Sans Mono',monospace;
}
.serializedFormContainer dl.nameValue dt {
    margin-left:1px;
    font-size:1.1em;
    display:inline;
    font-weight:bold;
}
.serializedFormContainer dl.nameValue dd {
    margin:0 0 0 1px;
    font-size:1.1em;
    display:inline;
}
/*
List styles
*/
ul.horizontal li {
    display:inline;
    font-size:0.9em;
}
ul.inheritance {
    margin:0;
    padding:0;
}
ul.inheritance li {
    display:inline;
    list-style:none;
}
ul.inheritance li ul.inheritance {
    margin-left:15px;
    padding-left:15px;
    padding-top:1px;
}
ul.blockList, ul.blockListLast {
    margin:10px 0 10px 0;
    padding:0;
}
ul.blockList li.blockList, ul.blockListLast li.blockList {
    list-style:none;
    margin-bottom:15px;
    line-height:1.4;
}
ul.blockList ul.blockList li.blockList, ul.blockList ul.blockListLast li.blockList {
    padding:0px 20px 5px 10px;
    border:1px solid #ededed; 
    background-color:#f8f8f8;
}
ul.blockList ul.blockList ul.blockList li.blockList, ul.blockList ul.blockList ul.blockListLast li.blockList {
    padding:0 0 5px 8px;
    background-color:#ffffff;
    border:none;
}
ul.blockList ul.blockList ul.blockList ul.blockList li.blockList {
    margin-left:0;
    padding-left:0;
    padding-bottom:15px;
    border:none;
}
ul.blockList ul.blockList ul.blockList ul.blockList li.blockListLast {
    list-style:none;
    border-bottom:none;
    padding-bottom:0;
}
table tr td dl, table tr td dl dt, table tr td dl dd {
    margin-top:0;
    margin-bottom:1px;
}
/*
Table styles
*/
.overviewSummary, .memberSummary, .typeSummary, .useSummary, .constantsSummary, .deprecatedSummary {
    width:100%;
    border-left:1px solid #EEE; 
    border-right:1px solid #EEE; 
    border-bottom:1px solid #EEE; 
}
.overviewSummary, .memberSummary  {
    padding:0px;
}
.overviewSummary caption, .memberSummary caption, .typeSummary caption,
.useSummary caption, .constantsSummary caption, .deprecatedSummary caption {
    position:relative;
    text-align:left;
    background-repeat:no-repeat;
    color:#253441;
    font-weight:bold;
    clear:none;
    overflow:hidden;
    padding:0px;
    padding-top:10px;
    padding-left:1px;
    margin:0px;
    white-space:pre;
}
.overviewSummary caption a:link, .memberSummary caption a:link, .typeSummary caption a:link,
.useSummary caption a:link, .constantsSummary caption a:link, .deprecatedSummary caption a:link,
.overviewSummary caption a:hover, .memberSummary caption a:hover, .typeSummary caption a:hover,
.useSummary caption a:hover, .constantsSummary caption a:hover, .deprecatedSummary caption a:hover,
.overviewSummary caption a:active, .memberSummary caption a:active, .typeSummary caption a:active,
.useSummary caption a:active, .constantsSummary caption a:active, .deprecatedSummary caption a:active,
.overviewSummary caption a:visited, .memberSummary caption a:visited, .typeSummary caption a:visited,
.useSummary caption a:visited, .constantsSummary caption a:visited, .deprecatedSummary caption a:visited {
    color:#FFFFFF;
}
.overviewSummary caption span, .memberSummary caption span, .typeSummary caption span,
.useSummary caption span, .constantsSummary caption span, .deprecatedSummary caption span {
    white-space:nowrap;
    padding-top:5px;
    padding-left:12px;
    padding-right:12px;
    padding-bottom:7px;
    display:inline-block;
    float:left;
    background-color:#F8981D;
    border: none;
    height:16px;
}
.memberSummary caption span.activeTableTab span {
    white-space:nowrap;
    padding-top:5px;
    padding-left:12px;
    padding-right:12px;
    margin-right:3px;
    display:inline-block;
    float:left;
    background-color:#F8981D;
    height:16px;
}
.memberSummary caption span.tableTab span {
    white-space:nowrap;
    padding-top:5px;
    padding-left:12px;
    padding-right:12px;
    margin-right:3px;
    display:inline-block;
    float:left;
    background-color:#4D7A97;
    height:16px;
}
.memberSummary caption span.tableTab, .memberSummary caption span.activeTableTab {
    padding-top:0px;
    padding-left:0px;
    padding-right:0px;
    background-image:none;
    float:none;
    display:inline;
}
.overviewSummary .tabEnd, .memberSummary .tabEnd, .typeSummary .tabEnd,
.useSummary .tabEnd, .constantsSummary .tabEnd, .deprecatedSummary .tabEnd {
    display:none;
    width:5px;
    position:relative;
    float:left;
    background-color:#F8981D;
}
.memberSummary .activeTableTab .tabEnd {
    display:none;
    width:5px;
    margin-right:3px;
    position:relative; 
    float:left;
    background-color:#F8981D;
}
.memberSummary .tableTab .tabEnd {
    display:none;
    width:5px;
    margin-right:3px;
    position:relative;
    background-color:#4D7A97;
    float:left;

}
.overviewSummary td, .memberSummary td, .typeSummary td,
.useSummary td, .constantsSummary td, .deprecatedSummary td {
    text-align:left;
    padding:0px 0px 12px 10px;
}
th.colOne, th.colFirst, th.colLast, .useSummary th, .constantsSummary th,
td.colOne, td.colFirst, td.colLast, .useSummary td, .constantsSummary td{
    vertical-align:top;
    padding-right:0px;
    padding-top:8px;
    padding-bottom:3px;
}
th.colFirst, th.colLast, th.colOne, .constantsSummary th {
    background:#dee3e9;
    text-align:left;
    padding:8px 3px 3px 7px;
}
td.colFirst, th.colFirst {
    white-space:nowrap;
    font-size:13px;
}
td.colLast, th.colLast {
    font-size:13px;
}
td.colOne, th.colOne {
    font-size:13px;
}
.overviewSummary td.colFirst, .overviewSummary th.colFirst,
.useSummary td.colFirst, .useSummary th.colFirst,
.overviewSummary td.colOne, .overviewSummary th.colOne,
.memberSummary td.colFirst, .memberSummary th.colFirst,
.memberSummary td.colOne, .memberSummary th.colOne,
.typeSummary td.colFirst{
    width:25%;
    vertical-align:top;
}
td.colOne a:link, td.colOne a:active, td.colOne a:visited, td.colOne a:hover, td.colFirst a:link, td.colFirst a:active, td.colFirst a:visited, td.colFirst a:hover, td.colLast a:link, td.colLast a:active, td.colLast a:visited, td.colLast a:hover, .constantValuesContainer td a:link, .constantValuesContainer td a:active, .constantValuesContainer td a:visited, .constantValuesContainer td a:hover {
    font-weight:bold;
}
.tableSubHeadingColor {
    background-color:#EEEEFF;
}
.altColor {
    background-color:#FFFFFF;
}
.rowColor {
    background-color:#EEEEEF;
}
/*
Content styles
*/
.description pre {
    margin-top:0;
}
.deprecatedContent {
    margin:0;
    padding:10px 0;
}
.docSummary {
    padding:0;
}

ul.blockList ul.blockList ul.blockList li.blockList h3 {
    font-style:normal;
}

div.block {
    font-size:14px;
    font-family:'DejaVu Serif', Georgia, "Times New Roman", Times, serif;
}

td.colLast div {
    padding-top:0px;
}


td.colLast a {
    padding-bottom:3px;
}
/*
Formatting effect styles
*/
.sourceLineNo {
    color:green;
    padding:0 30px 0 0;
}
h1.hidden {
    visibility:hidden;
    overflow:hidden;
    font-size:10px;
}
.block {
    display:block;
    margin:3px 10px 2px 0px;
    color:#474747;
}
.deprecatedLabel, .descfrmTypeLabel, .memberNameLabel, .memberNameLink,
.overrideSpecifyLabel, .packageHierarchyLabel, .paramLabel, .returnLabel,
.seeLabel, .simpleTagLabel, .throwsLabel, .typeNameLabel, .typeNameLink {
    font-weight:bold;
}
.deprecationComment, .emphasizedPhrase, .interfaceName {
    font-style:italic;
}

div.block div.block span.deprecationComment, div.block div.block span.emphasizedPhrase,
div.block div.block span.interfaceName {
    font-style:normal;
}

div.contentContainer ul.blockList li.blockList h2{
    padding-bottom:0px;
}

# LectureFichiers.java

import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;

class LectureFichiers {
	UtilDate d1;

	public LectureFichiers () {
		d1 = new UtilDate ();
	}

	/*public static String [] afficheSauvegardes () {
		int i=0;

		File f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+i+".txt");

		while (f.exists()) {
			i++;

			f = new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+i+".txt");		
		}

		if (i==1000) System.out.println("La fonction ''detecteSauvegardes'' dit : i = 1000.");

		return i;
	}*/

	public static int [] litParametreFichiers () {
		int i=0;

		String s1 = lireFichier("Sauvegardes"+File.separatorChar+"Parametres.txt");
		int s1length = s1.length ();
		String s0 ="";
		
		while (i<s1length && s1.charAt(i)!=';') {
			s0 = s0+s1.charAt(i);
			i++;
		}

		//System.out.println("\n\nlitTparametres(s0) = "+'"'+s0+'"');

		int [] tparametres = litTableauInt(s0,',');

		return tparametres;
	}

	public static boolean [] decodeParametres (int [] t) {
		boolean [] t1 = new boolean [4];

		t1[0] = false;
		if (t[8]==1) t1[0] = true; //coupsIllimités
		t1[1] = false;
		if (t[9]==1) t1[1] = true; //premierCoups
		t1[2] = false;
		if (t[10]==1) t1[2] = true; //tourEnCours
		t1[3] = false; 
		if (t[11]==1) t1[3] = true; //clm

		return t1;
	}

	public static boolean detecteParametres () {
		File f=new File("Sauvegardes"+File.separatorChar+"Parametres.txt");

		return f.exists ();
	}

	public static String lireSauvegarde (int n){
		String s="";

		try{
		    File f=new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n+".txt");

		    BufferedReader br=new BufferedReader(new FileReader(f));

		    String chainelue;

		    chainelue=br.readLine();

		    int x=0;

		    while(chainelue!=null){
			if (x>0) {
				s=s+chainelue+"\n";
			}
				chainelue=br.readLine();
			x++;
		    }

		    //System.out.println("Fin de lecture");

		    br.close();
		}

		catch(Exception e){
		    System.out.println("Fichier introuvable.");
		}

		//System.out.println("Lire sauvegarde(fichier) = "+'"'+s+'"');

		return s;
	}

	public static String lireSauvegardeDate (int n){
		String s="";

		try{
		    File f=new File("Sauvegardes"+File.separatorChar+"Parties"+File.separatorChar+"Partie"+n+".txt");

		    BufferedReader br=new BufferedReader(new FileReader(f));

		    String chainelue;

		    chainelue=br.readLine();

			int x=0;

			s=s+chainelue;
			chainelue=br.readLine();

		    //System.out.println("Fin de lecture");

		    br.close();
		}

		catch(Exception e){
		    System.out.println("Fichier introuvable.");
		}

		//System.out.println("Lire sauvegarde(fichier) = "+'"'+s+'"');

		return s;
	}

	public static String lireFichier (String s1){
		String s="";

		try{
		    File f=new File(s1);

		    BufferedReader br=new BufferedReader(new FileReader(f));

		    String chainelue;

		    chainelue=br.readLine();

		    while(chainelue!=null){
				s=s+chainelue;
				chainelue=br.readLine();
		    }

		    System.out.println("Fin de lecture");

		    br.close();
		}

		catch(Exception e){
		    System.out.println("Fichier introuvable.");
		}

		//System.out.println("Lire sauvegarde(fichier) = "+'"'+s+'"');

		return s;
	}

	public static int [][] litTcoups (String s1) {
		int i=0,s1length=s1.length();
		String s0 = "";

		while (i<s1length && s1.charAt(i)!=';') {
			s0 = s0+s1.charAt(i);
			i++;
		}

		//System.out.println("\n\nlitTcoups(s0) = "+'"'+s0+'"');

		int [][] tcoups = litTableauInt2(s0,',',':');

		return tcoups;		
	}

	public static int [][] litTcouleurs (String s1) {
		int i=0,s1length=s1.length();
		String s0 = "";

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') {
			s0 = s0+s1.charAt(i);
			i++;
		}

		//System.out.println("\n\nlitTcouleurs(s0) = "+'"'+s0+'"');

		int [][] tcouleurs = litTableauInt2(s0,',',':');

		return tcouleurs;		
	}

	public static int [][] litReponses(String s1) {
		int i=0,s1length=s1.length();
		String s0 = "";

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') {
			s0 = s0+s1.charAt(i);
			i++;
		}

		//System.out.println("\n\nlitTparametres(s0) = "+'"'+s0+'"');

		int [][] Reponses = litTableauInt2(s0,',',':');

		return Reponses;	
	}

	public static int [] litTparametres (String s1) {
		int i=0,s1length=s1.length();
		String s0 = "";

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') {
			s0 = s0+s1.charAt(i);
			i++;
		}

		//System.out.println("\n\nlitTparametres(s0) = "+'"'+s0+'"');

		int [] tparametres = litTableauInt(s0,',');

		return tparametres;	
	}

	public static int [] litTcode (String s1) {
		int i=0,s1length=s1.length();
		String s0 = "";

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') i++;

		i++;

		while (i<s1length && s1.charAt(i)!=';') {
			s0 = s0+s1.charAt(i);
			i++;
		}

		//System.out.println("\n\nlitTcode(s0) = "+'"'+s0+'"');

		int [] tcode = litTableauInt(s0,',');

		return decode(4564,2165,tcode);	
	}

	public static String [][] litTableauString2 (String s, char c1, char c2) {
		int i,j;
		String [] s1;
		String [][] s0;

		s1 = coupe (s,c1);

		s0 = new String [s1.length][];

		for (i=0; i<s1.length; i++) s0[i]=litTableauString(s1[i],c2);

		//for (i=0; i<s0.length; i++) for (j=0; j<s0[i].length; j++) System.out.println("s0["+i+"]["+j+"] = "+s0[i][j]);

		return s0;
	}

	public static int [][] litTableauInt2 (String s, char c1, char c2) {
		int i,j;
		String [] s1;
		String [][] s0;

		s1 = coupe(s,c1);

		//for (i=0; i<s1.length; i++) System.out.println("s1["+i+"] = "+s1[i]);

		s0 = new String [s1.length][];

		for (i=0; i<s1.length; i++) s0[i]=litTableauString(s1[i],c2);

		int [][] t = new int [s1.length][];

		for (i=0; i<s1.length; i++) {
			t[i] = new int[s0[i].length];

			for (j=0; (j<t[i].length && j<s0[i].length); j++) {
				t[i][j] = convertNombre(s0[i][j]);
			}
		}

		//for (i=0; i<s0.length; i++) for (j=0; j<s0[i].length; j++) System.out.println("s0["+i+"]["+j+"] = "+s0[i][j]);

		return t;		
	}

	public static String [][][] litTableauString3 (String s1, char c1, char c2, char c3) {
		int i,j,k;

		//System.out.println("s1 = "+'"'+s1+'"');

		String [] s2 = coupe3(s1,c1);

		//for (i=0; i<s2.length; i++)  System.out.println("s2["+i+"] = "+s2[i]);

		String [][] s3 = new String [s2.length][];

		for (i=0; i<s2.length; i++) s3 [i] = coupe3(s2[i],c2);

		//for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) System.out.println("s3["+i+"][j] = "+s3[i][j]);

		String [][][] s4 = new String [s2.length][s3[0].length][];

		for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) s4 [i][j] = coupe2(s3[i][j],c3);

		//for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) System.out.println("s4["+i+"]["+j+"]["+k+"] = "+s4[i][j][k]);
	
		return s4;
	}

	public static String [][][][] litTableauString4 (String s1, char c1, char c2, char c3, char c4) {
		int i,j,k,l;

		//System.out.println("s1 = "+'"'+s1+'"');

		String [] s2 = coupe3(s1,c1);

		//for (i=0; i<s2.length; i++)  System.out.println("s2["+i+"] = "+s2[i]);

		String [][] s3 = new String [s2.length][];

		for (i=0; i<s2.length; i++) s3 [i] = coupe3(s2[i],c2);

		//for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) System.out.println("s3["+i+"][j] = "+s3[i][j]);

		String [][][] s4 = new String [s2.length][s3[0].length][];

		for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) s4 [i][j] = coupe3(s3[i][j],c3);

		//for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) System.out.println("s4["+i+"]["+j+"]["+k+"] = "+s4[i][j][k]);

		String [][][][] s5 = new String [s2.length][s3[0].length][s4[0][0].length][];

		for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) s5 [i][j][k] = coupe2(s4[i][j][k],c4);

		//for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) System.out.println("s5["+i+"]["+j+"]["+k+"]["+l+"] = "+s5[i][j][k][l]);
	
		return s5;
	}

	public static String [][][][][] litTableauString5 (String s1, char c1, char c2, char c3, char c4, char c5) {
		int i,j,k,l,m;

		String [] s2 = coupe3(s1,c1);

		//for (i=0; i<s2.length; i++)  System.out.println("s2["+i+"] = "+s2[i]);

		String [][] s3 = new String [s2.length][];

		for (i=0; i<s2.length; i++) s3 [i] = coupe3(s2[i],c2);

		//for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) System.out.println("s3["+i+"][j] = "+s3[i][j]);

		String [][][] s4 = new String [s2.length][s3[0].length][];

		for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) s4 [i][j] = coupe3(s3[i][j],c3);

		//for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) System.out.println("s4["+i+"]["+j+"]["+k+"] = "+s4[i][j][k]);

		String [][][][] s5 = new String [s2.length][s3[0].length][s4[0][0].length][];

		for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) s5 [i][j][k] = coupe3(s4[i][j][k],c4);

		//for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) System.out.println("s5["+i+"]["+j+"]["+k+"]["+l+"] = "+s5[i][j][k][l]);
	
		String [][][][][] s6 = new String [s2.length][s3[0].length][s4[0][0].length][s5[0][0][0].length][];

		for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) s6 [i][j][k][l] = coupe2(s5[i][j][k][l],c5);

		//for (i=0; i<s6.length; i++) for (j=0; j<s6[i].length; j++) for (k=0; k<s6[i][j].length; k++) for (l=0; l<s6[i][j][k].length; l++) for (m=0; m<s6[i][j][k][l].length; m++) System.out.println("s6["+i+"]["+j+"]["+k+"]["+l+"]["+m+"] = "+s6[i][j][k][l][m]);

		return s6;
	}

	public static String [][][][][][] litTableauString6 (String s1, char c1, char c2, char c3, char c4, char c5, char c6) {
		int i,j,k,l,m,o;

		String [] s2 = coupe3(s1,c1);

		//for (i=0; i<s2.length; i++)  System.out.println("s2["+i+"] = "+s2[i]);

		String [][] s3 = new String [s2.length][];

		for (i=0; i<s2.length; i++) s3 [i] = coupe3(s2[i],c2);

		//for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) System.out.println("s3["+i+"][j] = "+s3[i][j]);

		String [][][] s4 = new String [s2.length][s3[0].length][];

		for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) s4 [i][j] = coupe3(s3[i][j],c3);

		//for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) System.out.println("s4["+i+"]["+j+"]["+k+"] = "+s4[i][j][k]);

		String [][][][] s5 = new String [s2.length][s3[0].length][s4[0][0].length][];

		for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) s5 [i][j][k] = coupe3(s4[i][j][k],c4);

		for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) System.out.println("s5["+i+"]["+j+"]["+k+"]["+l+"] = "+s5[i][j][k][l]);
	
		String [][][][][] s6 = new String [s2.length][s3[0].length][s4[0][0].length][s5[0][0][0].length][];

		for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) s6 [i][j][k][l] = coupe3(s5[i][j][k][l],c5);

		for (i=0; i<s6.length; i++) for (j=0; j<s6[i].length; j++) for (k=0; k<s6[i][j].length; k++) for (l=0; l<s6[i][j][k].length; l++) for (m=0; m<s6[i][j][k][l].length; m++) System.out.println("s6["+i+"]["+j+"]["+k+"]["+l+"]["+m+"] = "+s6[i][j][k][l][m]);

		String [][][][][][] s7 = new String [s2.length][s3[0].length][s4[0][0].length][s5[0][0][0].length][s6[0][0][0][0].length][];

		for (i=0; i<s6.length; i++) for (j=0; j<s6[i].length; j++) for (k=0; k<s6[i][j].length; k++) for (l=0; l<s6[i][j][k].length; l++)  for (m=0; m<s6[i][j][k][l].length; m++) s7 [i][j][k][l][m] = coupe2(s6[i][j][k][l][m],c6);

		//for (i=0; i<s7.length; i++) for (j=0; j<s7[i].length; j++) for (k=0; k<s7[i][j].length; k++) for (l=0; l<s7[i][j][k].length; l++) for (m=0; m<s7[i][j][k][l].length; m++) for (o=0; o<s7[i][j][k][l][m].length; o++)  System.out.println("s7["+i+"]["+j+"]["+k+"]["+l+"]["+m+"]["+o+"] = "+s7[i][j][k][l][m][o]);

		return s7;
	}

	public static String [][][][][][][] litTableauString7 (String s1, char c1, char c2, char c3, char c4, char c5, char c6, char c7) {
		int i,j,k,l,m,o,p;

		String [] s2 = coupe(s1,c1);

		//for (i=0; i<s2.length; i++)  System.out.println("s2["+i+"] = "+s2[i]);

		String [][] s3 = new String [s2.length][];

		for (i=0; i<s2.length; i++) s3 [i] = coupe3(s2[i],c2);

		//for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) System.out.println("s3["+i+"][j] = "+s3[i][j]);

		String [][][] s4 = new String [s2.length][s3[0].length][];

		for (i=0; i<s3.length; i++) for (j=0; j<s3[i].length; j++) s4 [i][j] = coupe3(s3[i][j],c3);

		//for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) System.out.println("s4["+i+"]["+j+"]["+k+"] = "+s4[i][j][k]);

		String [][][][] s5 = new String [s2.length][s3[0].length][s4[0][0].length][];

		for (i=0; i<s4.length; i++) for (j=0; j<s4[i].length; j++) for (k=0; k<s4[i][j].length; k++) s5 [i][j][k] = coupe3(s4[i][j][k],c4);

		//for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) System.out.println("s5["+i+"]["+j+"]["+k+"]["+l+"] = "+s5[i][j][k][l]);
	
		String [][][][][] s6 = new String [s2.length][s3[0].length][s4[0][0].length][s5[0][0][0].length][];

		for (i=0; i<s5.length; i++) for (j=0; j<s5[i].length; j++) for (k=0; k<s5[i][j].length; k++) for (l=0; l<s5[i][j][k].length; l++) s6 [i][j][k][l] = coupe3(s5[i][j][k][l],c5);

		//for (i=0; i<s6.length; i++) for (j=0; j<s6[i].length; j++) for (k=0; k<s6[i][j].length; k++) for (l=0; l<s6[i][j][k].length; l++) for (m=0; m<s6[i][j][k][l].length; m++) System.out.println("s6["+i+"]["+j+"]["+k+"]["+l+"]["+m+"] = "+s6[i][j][k][l][m]);

		String [][][][][][] s7 = new String [s2.length][s3[0].length][s4[0][0].length][s5[0][0][0].length][s6[0][0][0][0].length][];

		for (i=0; i<s6.length; i++) for (j=0; j<s6[i].length; j++) for (k=0; k<s6[i][j].length; k++) for (l=0; l<s6[i][j][k].length; l++)  for (m=0; m<s6[i][j][k][l].length; m++) s7 [i][j][k][l][m] = coupe3(s6[i][j][k][l][m],c6);

		//for (i=0; i<s7.length; i++) for (j=0; j<s7[i].length; j++) for (k=0; k<s7[i][j].length; k++) for (l=0; l<s7[i][j][k].length; l++) for (m=0; m<s7[i][j][k][l].length; m++) for (o=0; o<s7[i][j][k][l][m].length; o++)  System.out.println("s7["+i+"]["+j+"]["+k+"]["+l+"]["+m+"]["+o+"] = "+s7[i][j][k][l][m][o]);

		String [][][][][][][] s8 = new String [s2.length][s3[0].length][s4[0][0].length][s5[0][0][0].length][s6[0][0][0][0].length][s7[0][0][0][0][0].length][];

		for (i=0; i<s7.length; i++) for (j=0; j<s7[i].length; j++) for (k=0; k<s7[i][j].length; k++) for (l=0; l<s7[i][j][k].length; l++) for (m=0; m<s7[i][j][k][l].length; m++) for (o=0; o<s7[i][j][k][l][m].length; o++) s8 [i][j][k][l][m][o] = coupe2(s7[i][j][k][l][m][o],c7);

		//for (i=0; i<s8.length; i++) for (j=0; j<s8[i].length; j++) for (k=0; k<s8[i][j].length; k++) for (l=0; l<s8[i][j][k].length; l++) for (m=0; m<s8[i][j][k][l].length; m++) for (o=0; o<s8[i][j][k][l][m].length; o++) for (p=0; p<s8[i][j][k][l][m][o].length; p++) System.out.println("s8["+i+"]["+j+"]["+k+"]["+l+"]["+m+"]["+o+"]["+p+"] = "+s8[i][j][k][l][m][o][p]);

		return s8;
	}

	public static String [] coupe (String s1, char c) {
		int i, j, s1length=s1.length(), length=0;

		for (i=0; i<s1length; i++) if (s1.charAt(i)==c) length++;

		String [] s0 = new String [length];

		for (i=0; i<s0.length; i++) s0[i]="";

		int indice1=0;

		for (i=0; i<length; i++){
			j=indice1;
			while (j<s1length && s1.charAt(j)!=c) {
				s0[i] = s0[i]+s1.charAt(j);
				j++;
			}

			j=j+1;
		}

		for (i=0; i<s0.length; i++) System.out.println("s0["+i+"] = "+s0[i]);

		return s0;
	}

	public static String [] coupe3 (String s1, char c) {
		int i, j, s1length=s1.length(), length=0;

		for (i=0; i<s1length; i++) if (s1.charAt(i)==c) length++;

		String [] s0 = new String [length];

		for (i=0; i<s0.length; i++) s0[i]="";

		j=0;

		for (i=0; i<length; i++){
			while (j<s1length && s1.charAt(j)!=c) {
				s0[i] = s0[i]+s1.charAt(j);
				j++;
			}

			j=j+1;
		}

		//for (i=0; i<s0.length; i++) System.out.println("s0["+i+"] = "+s0[i]);

		return s0;
	}

	public static String [] coupe2 (String s1, char c) {
		int i, j, s1length=s1.length(), length=0;

		for (i=0; i<s1length; i++) if (s1.charAt(i)==c) length++;

		String [] s0 = new String [length];

		for (i=0; i<s0.length; i++) s0[i]="";

		j=0;

		for (i=0; i<length; i++){
			while (j<s1length && s1.charAt(j)!=' ') {
				j++;
			}

			j+=3;

			while (j<s1length && s1.charAt(j)!=c) {
				s0[i] = s0[i]+s1.charAt(j);
				j++;
			}

			j=j+1;
		}

		//for (i=0; i<s0.length; i++) System.out.println("s0["+i+"] = "+s0[i]);

		return s0;
	}

	public static String [] litTableauString (String s1,char c) {
		int i, j ,k ,length=0, s1length=s1.length();

		for (i=0; i<s1length; i++) if (s1.charAt(i)==c) length++;

		//System.out.println("length = "+length);

		String [] s0 = new String[length];

		for (i=0; i<length; i++) s0[i]="";

		int indice1=0;

		for (i=0; i<length; i++){
			j=indice1;
			while (j<s1length && s1.charAt(j)!=c) {
				s0[i] = s0[i]+s1.charAt(j);
				j++;
			}

			indice1=j+1;
		}

		String [] t = new String [length];

		for (i=0; i<length; i++){
			t[i]=decodeTableauString2(s0[i]);			
		}

		//for (i=0; i<s0.length; i++) System.out.println("s0["+i+"] = "+s0[i]);

		return t;			
	}

	public static int [] litTableauInt (String s1, char c) {
		int i, j ,k ,length=0, s1length=s1.length();

		for (i=0; i<s1length; i++) if (s1.charAt(i)==c) length++;

		//System.out.println("length = "+length);

		String [] s0 = new String[length];

		for (i=0; i<length; i++) s0[i]="";

		int indice1=0;

		for (i=0; i<length; i++){
			j=indice1;
			while (j<s1length && s1.charAt(j)!=c) {
				s0[i] = s0[i]+s1.charAt(j);
				j++;
			}

			indice1=j+1;
		}

		int [] t = new int [length];

		for (i=0; i<length; i++){
			t[i]=decodeTableauNombre2(s0[i]);			
		}

		//for (i=0; i<s0.length; i++) System.out.println("s0["+i+"] = "+s0[i]);

		return t;						
	}

	public static String decodeTableauString1 (String s) {
		int i=0;

		//System.out.println("s = "+'"'+s+'"');

		String s1="";
		int slength=s.length();

		while(i<slength && s.charAt(i)!=' ') {
			s1=s1+s.charAt(i);
			i++;
		}

		return s1;
	}

	public static String decodeTableauString2 (String s) {
		int i=0;

		String s1="";
		int slength=s.length();

		//System.out.println("s = "+'"'+s+'"');

		while (i<slength && s.charAt(i)!=' ') i++;

		i=i+3;

		while (i<slength && s.charAt(i)!='_') {
			s1=s1+s.charAt(i);
			i++;
		}

		return s1;
	}

	public static int decodeTableauNombre2 (String s) {
		int i=0;

		String s1="";
		int slength=s.length();

		//System.out.println("s = "+'"'+s+'"');

		while (i<slength && s.charAt(i)!=' ') i++;

		i=i+3;

		while (i<slength && s.charAt(i)!='_') {
			s1=s1+s.charAt(i);
			i++;
		}

		return convertNombre(s1);
	}

	public static boolean effacePartie (int n) {
		File f=new File("Partie"+n+".txt");

		try{
			if(f.delete()==true) return true;
			else return false;
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Exception à l'effacement du fichier");
		}

		return true;
 	}

	public static boolean effaceFichier (String s0) {
		File f=new File(s0);

		try{
			if(f.delete()==true) return true;
			else return false;
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Exception à l'effacement du fichier");
		}

		return true;
 	}

	public static int [] decode (int a, int b, int [] t1) {
		int i;

		int [] t2 = new int [t1.length];

		for (i=0; i<t1.length; i++) t2[i]=t1[i];

		for (i=0; i<t2.length; i++) t2[i]=(t2[i]-a)/b;

		return t2;
	}

	public static int convertNombre (String s){
		int i, a = s.length(), c=0, d=0;

		if (s.equals("")) {
			System.out.println("\n\n//Le string est null : convertion impossible.\n");
		}

		if (a==1) {
			if (s.charAt(0)=='0') c=0;
			if (s.charAt(0)=='1') c=1;
			if (s.charAt(0)=='2') c=2;
			if (s.charAt(0)=='3') c=3;
			if (s.charAt(0)=='4') c=4;
			if (s.charAt(0)=='5') c=5;
			if (s.charAt(0)=='6') c=6;
			if (s.charAt(0)=='7') c=7;
			if (s.charAt(0)=='8') c=8;
			if (s.charAt(0)=='9') c=9;

			d=c;
		}else {
			for (i=0; i<a; i++) {
				c=-1;
				if (s.charAt(i)=='0') c=0;
				if (s.charAt(i)=='1') c=1;
				if (s.charAt(i)=='2') c=2;
				if (s.charAt(i)=='3') c=3;
				if (s.charAt(i)=='4') c=4;
				if (s.charAt(i)=='5') c=5;
				if (s.charAt(i)=='6') c=6;
				if (s.charAt(i)=='7') c=7;
				if (s.charAt(i)=='8') c=8;
				if (s.charAt(i)=='9') c=9;
	
				if (c!=-1) d=d*10+c;	
			}
		}

		if (d<0) {
			System.out.println("s = "+s);
			System.out.println("\n//Le nombre est trop grand");
		}

		return d;

	}
}
# Makefile

.SUFFIXES: .java .class

JC = javac -encoding ISO-8859-1 #-Xlint:unchecked
JDOC = javadoc -encoding ISO-8859-1
JDOC_DIR = javadoc

all:
	$(JC) Mastermind.java
	java Mastermind

frame:

	$(JC) Frame.java
	java Frame

javadoc:
	rm -rf $(JDOC_DIR)
	mkdir -p $(JDOC_DIR)
	$(JDOC) -d $(JDOC_DIR) *.java


clean: 
	$(RM) *.class

# Mastermind.java

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/* Classe principale : affiche la fenetre du jeu et appelle toutes les fonctions.*/

public class Mastermind extends JFrame {

	static WindowAdapter wa;
	Boolean b1;
	Boolean b2;
	int getHeight;
	int getWidth;
	P1 p1;
	EnregistrementFichiers enregistrementFichiers; 
	boolean clm;
	boolean coupsIllimités;

	public Mastermind (String titre) {
		super(titre);

		b1=false;
		b2=false;

		clm = false;
		coupsIllimités = false;

		getHeight=0;
		getWidth=0;

		int n11=4,a=1,b=n11,c=30,m11=2,h=2,ndco=6,nombreDePartiesJouées=0, he=0,  mi=5, se=15, tailleDesPolices=12; //déclaration des paramètres du jeu (options)
		boolean coupsIllimités1=false,premierCoups = false,tourEnCours = false,clm1 = false; //déclaration des paramètres du jeu (options)

		enregistrementFichiers = new EnregistrementFichiers ();

		if (new File("Sauvegardes"+File.separatorChar+"Parametres.txt").exists ()) {

			int [] tparametres = enregistrementFichiers.litParametreFichiers ();

			boolean [] tparametresB = enregistrementFichiers.decodeParametres(tparametres);

			n11=tparametres[0];
			a=tparametres[1];
			b=n11;
			c=tparametres[3];
			m11=tparametres[4];
			h=tparametres[5];
			ndco=tparametres[6];
			nombreDePartiesJouées=tparametres[7];
			coupsIllimités1=tparametresB[0];
			premierCoups = tparametresB[1];
			tourEnCours = tparametresB[2];
			clm1 = tparametresB[3];
			he=tparametres[12];
			mi=tparametres[13];
			se=tparametres[14];
			tailleDesPolices=tparametres[15];
		}

		p1 = new P1 (this,n11,m11,ndco,h,c,clm1,he,mi,se,nombreDePartiesJouées,coupsIllimités1,tailleDesPolices);
		
		this.add(p1);

		//this.add(new P2(this.getWidth(),this.getHeight()));

		wa = new WindowAdapter() {
			public void windowIconified (WindowEvent e)  {
				System.out.println("windowIconified");
			}

			public void windowClosing(WindowEvent e) {
				int n1 = 1;

				if (p1.getJeuCommence()) {
					if (clm) {
						p1.pause ();
					}
					n1 = demandeSauvegarde ();
					if (clm) {
						p1.reprendre ();
					}
				}

				//System.out.println("n1 = "+n1);

				if (n1==0) {
					p1.sauvePartie ();	
				}				

				if (n1==0 || n1==1) {
					p1.enregistreParametres ();

					System.exit(0);
				}
			}

			public void windowStateChanged(WindowEvent e)  {
				System.out.println("windowStateChanged");

				/*if (!b1) {
					getHeight = getHeight();
					getWidth = getWidth();

					b1=true;
				}
				else {
						resize(new Dimension(getWidth,getHeight));
						b1=false;
				}
				
				if (b1) b1=false;
				else {
					if (!b2) {
						getHeight = getHeight();
						getWidth = getWidth();
						b2=true;
					} else {
						resize(new Dimension(getWidth,getHeight));
						b2=false;
					}
				}*/
			}
		};
		
		this.addWindowStateListener(new WindowStateListener() {

			public void windowStateChanged(WindowEvent arg0) {
				if (arg0.getNewState()==MAXIMIZED_BOTH) {
					reDim1 ();
				}

				System.out.println("window maximized");

				if (arg0.getNewState()==ICONIFIED)

				System.out.println("window iconfied");

				if(arg0.getNewState()==NORMAL)

				System.out.println("window normal size");
			}
		});		
		
		this.setMinimumSize(new Dimension(800, 600));
		this.setPreferredSize(new Dimension(800, 600));

		//pack();

		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		this.setVisible(true);
	}
	
	public void reDim1 () {
		/*boolean dd = (getExtendedState()==this.MAXIMIZED_BOTH);

		int getWidth = this.getWidth();
		int getHeight = this.getHeight();

		resize(new Dimension(getWidth+1,getHeight+1));
		resize(new Dimension(getWidth,getHeight));	

		if (dd) {
			this.setExtendedState(JFrame.MAXIMIZED_BOTH);
			b1=true;
		}*/

		p1.tempsT1 = new Thread(new Dors ());
		p1.tempsT1.start ();
	}

	public void reDim () {
		this.revalidate();
	}

	class Dors implements Runnable{  
		public void run(){
			int i;

			try {
				for (i=0; i<500; i++) {
					p1.tempsT1.sleep(1);

					if (i%100==0) {
						p1.revalidate ();

						//System.out.println(i);
					}
				}

			}

			catch (InterruptedException  e)  {
				e.printStackTrace();
			}
		}
	}

	public void afficheMessage (String message, String titre, char type) {
		JOptionPane fOptions = new JOptionPane();

		if (type=='i') fOptions.showMessageDialog(this, message,titre, JOptionPane.PLAIN_MESSAGE);
		else if (type=='w') fOptions.showMessageDialog(this, message,titre, JOptionPane.WARNING_MESSAGE);
		else fOptions.showMessageDialog(this, message,titre, JOptionPane.PLAIN_MESSAGE);
	}

	public void afficheErreurPartieNonTrouvée () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Aucune partie n'a été trouvée.","Aucune partie trouvée.", JOptionPane.WARNING_MESSAGE);
	}

	public void erreurOption (String option, int a, int b) {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Le nombre de "+option+" est compris entre "+a+" et "+b+".","Erreur", JOptionPane.PLAIN_MESSAGE);
	}

	public void afficheErreurCouleurs () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Veuillez entrer une couleur différente (celle-ci existe déjà dans le choix de couleurs)","Existe déjà !", JOptionPane.WARNING_MESSAGE);
	}

	public void afficheErreurNombreDeCases () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Le nombre de cases est compris entre 3 et 500.","3<Nombre de cases<500", JOptionPane.WARNING_MESSAGE);
	}

	public void afficheErreurNombreDeCouleurs () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Le nombre de couleurs est compris entre 4 et 500.","4<Nombre de couleurs<500", JOptionPane.WARNING_MESSAGE);
	}

	public void afficheErreurNombreDeCouleursM12 () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Attention ! Ce mode de jeu n'admet pas plus de 56 couleurs.","Erreur : nombre de couleurs trop grand !", JOptionPane.WARNING_MESSAGE);
	}

	public void afficheCoupsAvantAbandon (int x, int c) {
		JOptionPane fOptions = new JOptionPane();

		if (!coupsIllimités) fOptions.showMessageDialog(this, "Nombre de coups avant abandon : "+x+"/"+c+"\n\nLes solutions s'afficheront en dessous du dernier coup.","Abandon de la partie", JOptionPane.WARNING_MESSAGE);
		else fOptions.showMessageDialog(this, "Nombre de coups avant abandon : "+x+"\n\nLes solutions s'afficheront en dessous du dernier coup.","Abandon de la partie", JOptionPane.WARNING_MESSAGE);
	}

	public int demandeSauvegarde () {
		JOptionPane fOptions = new JOptionPane();

		return fOptions.showConfirmDialog(this,"Voulez vous sauvegarder la partie ?","Sauvegarder la partie ?",JOptionPane.YES_NO_CANCEL_OPTION);
	}

	public int quitteLeJeu () {
		JOptionPane fOptions = new JOptionPane();

		return fOptions.showConfirmDialog(this,"Voulez vous vraiment arrêter la partie et revenir au menu principal ?","Arrêter la partie ?",JOptionPane.WARNING_MESSAGE);
	}

	public void afficheJeuGagne (int x, int c) {
		JOptionPane fOptions = new JOptionPane();

		String s1="";

		if (c>1) s1="s";

		if (!coupsIllimités) fOptions.showMessageDialog(this, "Vous avez gagné !\n\nNombre de coup"+s1+" : "+x+"/"+c,"Fin de la partie : gagné !", JOptionPane.PLAIN_MESSAGE);
		else fOptions.showMessageDialog(this, "Vous avez gagné !\n\nNombre de coup"+s1+" : "+x,"Fin de la partie : gagné !", JOptionPane.PLAIN_MESSAGE);
	}

	public void afficheJeuGagneContreLaMontre (String temps) {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Vous avez gagné !\n\nTemps : "+temps+".","Fin de la partie : gagné !", JOptionPane.PLAIN_MESSAGE);
	}

	public void afficheJeuGagneContreLaMontrePlus (int x, int c, String temps) {
		JOptionPane fOptions = new JOptionPane();

		String s1="";

		if (c>1) s1="s";

		if (!coupsIllimités) fOptions.showMessageDialog(this, "Vous avez gagné !\n\nNombre de coup"+s1+" : "+x+"/"+c+"\n\nTemps : "+temps+".","Fin de la partie : gagné !", JOptionPane.PLAIN_MESSAGE);
		else  fOptions.showMessageDialog(this, "Vous avez gagné !\n\nNombre de coup"+s1+" : "+x+"\n\nTemps : "+temps+".","Fin de la partie : gagné !", JOptionPane.PLAIN_MESSAGE);
	}

	public void affichePerdu () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Perdu.\n\nLes solutions vont s'afficheront en dessous du dernier coup.","Fin de la partie", JOptionPane.INFORMATION_MESSAGE);
	}

	public void affichePerduContreLaMontre (String temps) {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Perdu.\n\nTemps restant : "+temps+".\n\nLes solutions vont s'afficheront en dessous du dernier coup.","Fin de la partie", JOptionPane.INFORMATION_MESSAGE);
	}

	public void affichePerduContreLaMontreCoupsRestants (int x, int c) {
		JOptionPane fOptions = new JOptionPane();

		String s1="";

		if (c>1) s1="s";

		if (!coupsIllimités) fOptions.showMessageDialog(this, "Perdu.\n\nNombre de coup"+s1+" : "+x+"/"+c+"\n\nLes solutions vont s'afficheront en dessous du dernier coup.","Fin de la partie", JOptionPane.INFORMATION_MESSAGE);
		else fOptions.showMessageDialog(this, "Perdu.\n\nNombre de coup"+s1+" : "+x+"\n\nLes solutions vont s'afficheront en dessous du dernier coup.","Fin de la partie", JOptionPane.INFORMATION_MESSAGE);
	}

	public void afficheScoresNonTrouvés () {
		JOptionPane fOptions = new JOptionPane();

		fOptions.showMessageDialog(this, "Aucun fichier de scores et statistiques n'a été trouvé.","Aucun fichier de scores et statistiques trouvé.", JOptionPane.INFORMATION_MESSAGE);
	}

	public int exit () {
		JOptionPane fOptions = new JOptionPane();

		return fOptions.showConfirmDialog(this,"Voulez vous vraiment quitter ?","Quitter le jeu ?",JOptionPane.YES_NO_OPTION);
	}

	public void setCoupsIllimités (boolean a) {
		coupsIllimités = a;
	}

	public void setClm (boolean a) {
		clm = a;
	}

	public void setTailleDesPolices (int n) {
		p1.setTailleDesPolices (n);
	}

	public static void main (String [] args) {
		Mastermind f = new Mastermind("Mastermind");
		//Mastermind f = new Mastermind("Master Mind de luxe");

		f.addWindowListener(wa);
	}
}

/* Composant qui est relier à un mouse<br>listener pour renvoyer le numéro de la couleur<br>lorsque le joueur clique sur une couleur pendant le jeu.*/

class P2 extends Component {
	BufferedImage petitPion3d;

	public P2 () {
		super();

		String images = "Images"+new File("").separatorChar+"";

		try {
			this.petitPion3d = ImageIO.read(new File(images+"PetitPionTransparent.png"));
		} 

		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : petitPion3d");
		}
	}

	public void paintComponent (Graphics g) {
		g.clearRect(0, 0, this.getWidth(), this.getHeight());
		g.setColor(Color.RED);
		g.fillRect(0,0,this.getWidth(), this.getHeight());
		g.drawImage(petitPion3d,0,0,this.getWidth(), this.getHeight(), null);
	}
}

class P1 extends JPanel {

	private static int a;
	private static int b;
	private static int c;
	private static int h;
	private static int [] t1;
	private static int [] t4; //pour l'ia niveau 2 facile.
	private static int [] t11;
	private static int x;
	private static int n11;
	private static int m11;
	private static int e;
	private static int q;
	private static int sauve;
	private static int [][] couleurs;
	private static int [][] tcoups;
	private static int [][] tabReponses;
	private static boolean clm; //contre la montre

	UtilJeu utilJeu;
	UtilFenetre utilFenetre;
	UtilFichiers utilFichiers;

	BufferedImage caseVide;
	BufferedImage caseReponseVide;
	//BufferedImage caseVideMarron;
	//BufferedImage [] carreDesReponses;
	BufferedImage grandPionTransparent;
	BufferedImage pause;
	ImageIcon cacheInfo;

	boolean [] imageChargée;

	boolean coupsIllimités;

	BufferedImage pionBlanc;
	BufferedImage pionJaune;
	BufferedImage pionRouge;

	boolean reDimBonus;

	Color [] couleursDyn; //couleur dynamiques

	Color couleurBouton;  // couleur d'origine des boutons.

	private static IaNivFacile iaSMF;
	private static IaNivMoyen iaSMM;
	private static IaCalculsFacile iaCF;
	private static IaCalculsMoyen iaCM;
	private static IaCalculsDifficile iaCD;

	JButton cacheInfoB;

	JPanel p1;
	int cmp5;

	boolean premierCoups;

	P2 [] p2;
	int niveauDeLIA;
	ImageIcon imageB;
	JButton [] boutons;
	JButton [] couleurs3d;
	int ldPJ; // longueur du panel de Jeu.
	Mastermind f;
	int tdjpH; //taille du JPanel horizontale
	int avanceeDuTour;
	//Label monLabel;
	BufferedImage titreImg;
	BufferedImage petitPion3d;
	//BufferedImage bouton3d;
	boolean dessineCarreCouleurs;
	int [] placementB;
	int ldpdt; // longueur du pannel de temps
	boolean actb; //action couleurs transparente bis
	boolean tourEnCours;
	Clique [] action;
	BoutonTransparentAction [] actionBT;
	RedimBonus actionClique;
	int i;
	int [][] t10;
	PJeu pJeu;
	int tdcdr; //taille du carre de réponses
	boolean jeuCommence; //
	boolean abt; //Action boutons transparents

	int nombreDePartiesJouées;

	int ndco;  //nombre de couleurs

	boolean pia; // panel info activé

	int tcd; //taille de la colonne droite
	int tdbh; //taille horizontale des boutons

	int ndb; //nombre de boutons

	int tcvV; //taille verticale de la case vide
	int tcvH; //taille horizontale de la case vide
	int ndlC; //nombre de lignes de cases.

	int tdjpV; //taille du JPanel verticale

	int ajustH; //dans le cas ou il n'y a qu'une ligne
	int ajustV; //dans le cas ou il n'y a qu'une ligne

	Box box;
	Coup [] coups;

	Thread tempsT;
	Thread tempsT1;
	Thread jeuT;
	JProgressBar bar;

	String images;

	Clique cliqueBInfo;

	JPanel barrePanel;

	/* temps */

	int iTemps;

	int heures;
	int minutes;
	int secondes;

	/*------*/

	EnregistrementFichiers ff1;
	ChargerPartie cp;

	JScrollPane jsp1;

	UtilDate utilDate;

	int temps;
	int maxTemps; //max de la barre de temps

	//private JTextField texteInput;
	//private JLabel label;

	/* ia ------------------------*/

	int [] th4;

	boolean finJeuIA;

	int r1;
	int r2;
	int r3;

	/* Panel d'informations */

	int tdpi; //taille du pannel d'informations

	JTextArea label;

	Color CouleurDuLabel;

	String infosDuJeu;

	/* Cases texte */

	JTextField [] champNombre;

	JTextField [] champTemps;

	JTextArea [] texteOptions;
	JTextArea [] texteTemps;

	int tailleDesPolices;


	/*------------*/

	boolean paused;	

	public P1 (Mastermind f, int n11, int m11, int ndco, int h, int c, boolean clm, int heures, int minutes, int secondes, int nombreDePartiesJouées, boolean coupsIllimités, int tailleDesPolices) {
		super();

		couleurBouton = UIManager.getColor("Button.background"); // attribution e la couleur d'origine des boutons (classe swing).

		imageChargée = new boolean [10];

		for (i=0; i<10; i++) imageChargée [i] = true;

		utilJeu = new UtilJeu ();
		utilFenetre = new UtilFenetre ();
		utilFichiers = new UtilFichiers ();

		paused = false;

		this.tailleDesPolices=tailleDesPolices;

		/* Cases texte */

		champTemps = new JTextField [3];

		champNombre = new JTextField [3];

		texteOptions = new JTextArea [4];

		texteTemps = new JTextArea [3];

		String [] OptionsS = utilFenetre.texteDesOptions();

		Font font1 = new Font("Calibri", Font.PLAIN, 16);

		for (i=0; i<4; i++) {
			texteOptions[i] = new JTextArea();
			texteOptions[i].setText(OptionsS[i]);
			texteOptions[i].setFont(font1);
			this.add(texteOptions[i]);

			texteOptions[i].setBackground(Color.GREEN);

			texteOptions[i].setVisible(false);
		}

		font1 = new Font("Calibri", Font.PLAIN, 18);

		for (i=0; i<3; i++) {
			texteTemps[i] = new JTextArea();
			texteTemps[i].setFont(font1);
			this.add(texteTemps[i]);
			
			texteTemps[i].setBackground(Color.GREEN);

			texteTemps[i].setVisible(false);
		}

		texteTemps[0].setText("Heures");
		texteTemps[1].setText("Minutes");
		texteTemps[2].setText("Secondes");

		for (i=0; i<3; i++) {
			champTemps [i] = new JTextField();

			champNombre [i] = new JTextField();

			this.add(champTemps [i]);
			this.add(champNombre [i]);

			champTemps [i].setVisible(false);
			champNombre [i].setVisible(false);			
		}


		/*-------------*/

		images = "Images"+new File("").separatorChar+"";

		iTemps = 0;

		pia = true;

		/* date */

		utilDate = new UtilDate ();

		/* Temps */

		this.heures = heures;
		this.minutes = minutes;
		this.secondes = secondes;

		int [] ttemps = new int [3];

		ttemps[0] = heures;
		ttemps[1] = minutes;
		ttemps[2] = secondes;

		temps = utilDate.convertitEnSecondes(ttemps);

		/*-------*/

		/* Fichiers */

		ff1 = new EnregistrementFichiers ();

		/* Option nombre de chiffres et de couleurs */

		//private JTextField texteInput = new JTextField("Valeur par défaut");
		//private JLabel label = new JLabel("Un JTextField");

		/*-barre de temps*/
		
		barrePanel = new JPanel();

		maxTemps = 500;
		
		tempsT = new Thread(new Traitement());

		tempsT1 = new Thread(new Dors ());

		jeuT = new Thread(new AfficheIA());
		bar = new JProgressBar(JProgressBar.VERTICAL,0,maxTemps);
		bar.setForeground(new Color(-4868683));
		bar.setValue(maxTemps);			
		
		barrePanel.add(bar);

		this.add(barrePanel);

		this.clm=clm; // contre la montre
		
		/*----------------clm---------------*/

		if (clm) {
			ldpdt = 20;

			barrePanel.setVisible(true);

			f.setClm(true);
		}
		else {
			ldpdt = 0;

			barrePanel.setVisible(false);

			f.setClm(false);
		}
		
		//carreDesReponses = new BufferedImage[3];

		try {
			caseVide = ImageIO.read(new File(images+"CaseVideNoire.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : caseVide");
		}
		try {
			caseReponseVide = ImageIO.read(new File(images+"caseReponseVide.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			imageChargée [1] = false;
			System.out.println("Lecture du fichier impossible : caseReponseVide");
		}
		/*try {
			caseVideMarron = ImageIO.read(new File(images+"CaseVideMarron.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : caseVideMarron");
		}
		try {
			carreDesReponses [0] = ImageIO.read(new File(images+"CarreDesReponses.png"));
		}
		catch(IOException e) {
			e.printStackTrace();
			System.out.println("Lecture du fichier impossible : carreDesReponses [0]");
		}
		try {
			carreDesReponses [1] = ImageIO.read(new File(images+"CarreDesReponses.png"));
		}
		catch(IOException e) {
			e.printStackTrace();
			System.out.println("Lecture du fichier impossible : carreDesReponses [1]");
		}
		try {
			carreDesReponses [2] = ImageIO.read(new File(images+"CarreDesReponses.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : carreDesReponses [2]");
		}*/
		try {
			grandPionTransparent = ImageIO.read(new File(images+"GrandPionTransparent.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : grandPionTransparent");
		}
		try {
			//cacheInfo = ImageIO.read(new File(images+"CacheInfo.png"));
		}
		catch(Exception e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : cacheInfo");
		}
		try {
			cacheInfo = new ImageIcon(new ImageIcon(images+"CacheInfo.png").getImage().getScaledInstance(16, 16, Image.SCALE_DEFAULT));
		}
		catch(Exception e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : cacheInfo");
		}
		try {
			pause = ImageIO.read(new File(images+"Pause.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : pause");
		}
		try {
			pionBlanc = ImageIO.read(new File(images+"PionBlanc.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : pionBlanc");
		}
		try {
			pionJaune = ImageIO.read(new File(images+"PionJaune.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : pionJaune");
		}
		try {
			pionRouge = ImageIO.read(new File(images+"PionRouge.png"));
		}
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : pionRouge");
		}

		cacheInfoB = new JButton(cacheInfo);

		this.add(cacheInfoB);

		cliqueBInfo = new Clique (-1);

		cacheInfoB.addActionListener(cliqueBInfo);

		/*--------------------------------------------*/

		cmp5=1;

		a=1; // solutions entre a et b

		this.h=h; //difficulté

		niveauDeLIA=2;

		this.m11=m11;

		this.n11=n11;

		this.ndco = ndco;

		this.c=c;
		x=0;

		b=ndco; // solutions entre a et b

		tourEnCours = false;
		avanceeDuTour = 0;

		tcoups = new int [c+1][n11];

		tabReponses = new int [c+1][n11];

		t1 = new int[n11];

		t4 = new int [n11];


		/*--------------------------------------------*/

		abt = false;
		actb = false;

		premierCoups = false;

		jeuCommence = false;

		couleurs = couleursAleat(n11);

		pJeu = new PJeu(f);

		this.add(pJeu);

		reDimBonus = false;

		//pJeu.setVisible(false);

		repaint();

		f.reDim();

		this.setBackground(Color.GREEN);

		couleursDyn = new Color [6];

		int i,j,k;

		this.f = f;

		b=ndco; // solutions entre a et b

		//System.out.println("ndco = "+ndco+"\nb = "+b);

		t10 = couleursAleat(ndco);
		dessineCarreCouleurs = false;

		//System.out.println("ndco = "+ndco+"\nb = "+b);

		//monLabel = new Label("Mastermind", Label.CENTER); //Nom du jeu
		//monLabel.setForeground(Color.WHITE);
		//monLabel.setBackground(new Color(-65536));

		//this.add(monLabel);

		try {
			this.titreImg = ImageIO.read(new File(images+"Titre.png"));
		} 
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : titreImg");
		}
		/*try {
			this.bouton3d = ImageIO.read(new File(images+"Bouton3d.png"));
		} 
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : bouton3d");
		}*/
		try {
			this.petitPion3d = ImageIO.read(new File(images+"PetitPionTransparent.png"));
		} 
		catch(IOException e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : petitPion3d");
		}
		try {
			this.imageB = new ImageIcon(new ImageIcon(images+"FlecheGauche.png").getImage().getScaledInstance(145+45, 34, Image.SCALE_DEFAULT)); 
		} 
		catch(Exception e) {
			//e.printStackTrace();
			System.out.println("Lecture du fichier impossible : imageB");
		}

		actionBT = new BoutonTransparentAction [ndco];

		p2 = new P2 [ndco];

		//System.out.println("P2.length = "+P2.length);

		ndb = 49;

		this.f=f;

		tcd = 250;

		tdbh = 200;

		couleurs3d = new JButton[ndco];

		for (i=0; i<ndco; i++) {
			//System.out.println("i = "+i);		
			p2[i]= new P2();
			actionBT[i] = new BoutonTransparentAction(i);
			this.add(p2[i]);
			p2[i].addMouseListener(actionBT[i]);
			p2[i].setVisible(false); 
		}

		actionClique = new RedimBonus();

		this.addMouseListener(actionClique);

		pJeu.addMouseListener(actionClique);

		placementB = utilFenetre.placementBoutons(ndb+4);

		this.setPreferredSize(new Dimension(f.getWidth(),f.getHeight()));

		boutons = new JButton [ndb];

		action = new Clique [ndb];

		String [] s = utilFenetre.tabBouttons (ndb);
		
		Font font2 = new Font("Calibri", Font.BOLD, 12);
		if (tailleDesPolices!=12) font2 = new Font("Calibri", Font.BOLD, tailleDesPolices);

		//Color c = new Color(-16777063);
		
		for (i=0; i<ndb; i++) {
			boutons[i]= new JButton(s[i]);
			if (tailleDesPolices!=12) boutons[i].setFont(font2);

			if (i==31) { boutons[i] = new JButton(imageB); boutons[i].setBackground(Color.GREEN); }

			action[i] = new Clique(i);
			boutons[i].addActionListener(action[i]); 
			
			this.add(boutons[i]);			
		}

		//System.out.println(boutons[0].getFont());

		for (i=6; i<boutons.length; i++) boutons[i].setVisible(false);

		/* IA--------------------*/
		if ((niveauDeLIA==3) && (n11<5 && b<5)){
			if (h!=3) niveauDeLIA=2; 
			else niveauDeLIA=1;
		}

		iaSMF = new IaNivFacile (n11,a,b);
		iaSMM = new IaNivMoyen (n11,a,b);
		if (n11<5 && b<5) iaCF = new IaCalculsFacile(n11,a,b); else iaCF = new IaCalculsFacile();
		if (n11<5 && b<5) iaCM = new IaCalculsMoyen(n11,a,b); else iaCM = new IaCalculsMoyen();
		if (n11<5 && b<5) iaCD = new IaCalculsDifficile(n11,a,b); else iaCD = new IaCalculsDifficile();


		t4 = new int [n11];
		th4 = new int [n11];
		t11 = new int [n11];

		finJeuIA = false;

		r1=0;
		r2=0;
		r3=0;

		/* Panel d'informations */

		tdpi = 75;

		infosDuJeu = "";

		CouleurDuLabel = new Color (-5461980);
		
		Font font = new Font("Calibri", Font.PLAIN, 16);		
		
		label = new JTextArea();
		label.setText(infosDuJeu);
		label.setFont(font);
		label.setEditable(false);
		label.setBackground(CouleurDuLabel);
		
		//label.setForeground(new Color (-2769012));
		//label.setForeground(new Color (-4406));
		label.setForeground(new Color (-1818));
		//label.setForeground(Color.WHITE);
		
		//label.setWrapStyleWord(true);
		
		this.add(label);

		/* coups illimités */

		this.coupsIllimités = coupsIllimités;

		if (coupsIllimités) boutons[46].setBackground(new Color(-16724941));

		/*----------------------*/

		//System.out.println("ndco = "+ndco+"\nb = "+b);

		//System.out.println("ndco = "+ndco+"\nb = "+b);

		this.nombreDePartiesJouées = nombreDePartiesJouées;

		/*----------------------------------*/

		metAJourInfos ();

		this.revalidate ();
		tempsT1.start();
		this.revalidate ();
	}

	public void chargeUnePartie (int n) {
		int i,j;

		String s1 = ff1.lireSauvegarde(n);

		System.out.println(s1);

		tcoups = ff1.litTcoups(s1);

		//for (i=0; i<tcoups.length; i++) for (j=0; j<tcoups[0].length; j++) System.out.println("tcoups["+i+"]["+j+"] = "+tcoups[i][j]);

		couleurs = ff1.litTcouleurs(s1);

		tabReponses = ff1.litReponses(s1);

		t1 = ff1.litTcode(s1);

		int [] tparametres = ff1.litTparametres (s1);

		boolean [] tparametresB = ff1.decodeParametres(tparametres);

		n11 = tparametres[0];
		a = tparametres[1];
		ndco = tparametres[6];
		b = ndco;
		c = tparametres[3];
		m11 = tparametres[4];
		h = tparametres[5];
		x = tparametres[18];

		temps = tparametres[17]/1000;
		avanceeDuTour = tparametres[16];
		coupsIllimités = tparametresB[0];
		if (m11==1 || m11==3) premierCoups = tparametresB[1]; else premierCoups = false;
		tourEnCours = tparametresB[2];
		clm = tparametresB[3];

		metAJourInfos ();

		t10 = couleursAleat(ndco);

		tcoups = new int[c+1][n11];
		
		//box.setLayout(new BoxLayout(pJeu, BoxLayout.Y_AXIS));

		for (i=0; i<x; i++) nouveauCoup (i);

		System.out.println("tcoups.length = "+tcoups.length);
		System.out.println("tcoups[0].length = "+tcoups[0].length);
		System.out.println("c = "+c);
		System.out.println("ndco = "+ndco);
		System.out.println("n11 = "+n11);

		if (clm) {
			ldpdt = 20;

			barrePanel.setVisible(true);

			f.setClm(true);

			repaint();

			f.reDim1 ();
		}

		for (i=5; i<9; i++) boutons[i].setVisible(false);
		boutons[11].setVisible(false);

		placementB[0]+=10;

		for (i=0; i<ndco; i++) p2[i].setVisible(true);

		dessineCarreCouleurs = true;

		for (i=30; i<33; i++) boutons[i].setVisible(true);
		if (clm) boutons[47].setVisible(true);

		//for (i=0; i<ndco; i++) couleurs3d[i].setVisible(true);

		pJeu.setVisible(true);

		if (clm) boutons[47].setVisible(true);

		/* Suppression du panel d'info */

		tdpi = 0;

		pia = false;

		repaint ();

		/*-----------------------------*/

		//reDim();
		f.reDim1 ();

		reDimBonus = false;

		if (m11==1 || m11==3) premierCoups=true; 


		/*------------------------------------------------------------POUR LE TEST----------------------------------------------------------*/

		//for (i=0; i<n11; i++) System.out.println("t1["+i+"] = "+t1[i]); //affiche la réponse dans le terminal.

		/*----------------------------------------------------------------------------------------------------------------------------------*/

		if (avanceeDuTour<n11) if ((m11!=3 || (m11==3 && premierCoups)) && m11!=4) tourEnCours=true;
		

		r1=0;
		r2=0;
		r3=0;

		System.out.println("OK1");

		boutons[10].setBackground(couleurBouton);
		boutons[10].setEnabled(false);

		placementB[0]+=45;
		placementB[2]+=3;

		jeuCommence = true;

		if (clm) {
			tempsT = new Thread(new Traitement());
			bar.setValue(maxTemps);

			//int blabla1 = (utilDate.convertitEnSecondesBis(tparametres[12],tparametres[13],tparametres[14])/maxTemps);
			//if (blabla1==0) blabla1 = 1;

			iTemps = utilDate.convertitEnSecondesBis(tparametres[12],tparametres[13],tparametres[14])-temps;

			System.out.println("iTemps = "+iTemps);
			System.out.println("maxTemps = "+maxTemps);
			
			bar.setValue(iTemps);
			
			commenceTemps(iTemps*1000);

			//System.out.println("temps*1000 = "+temps*1000);
		}

		reDim ();

		System.out.println("Chargée.");	
	}

	public class ChargerPartie extends JFrame {
		Container1 p1;
		boolean b1;
		int tailleDesPolices;
		EnregistrementFichiers ff1;
		
		public ChargerPartie (int tailleDesPolices) {
			super("Charger une partie : ");

			this.tailleDesPolices=tailleDesPolices;

			ff1 = new EnregistrementFichiers ();
			
			b1 = false;

			String [] s0 = ff1.detecteParties ();
			
			p1 = new Container1 (this,s0,tailleDesPolices);
			
			this.add(p1);

			this.setPreferredSize(new Dimension(500, 450));
			this.setMinimumSize(new Dimension(300, 350));
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			this.setLocationRelativeTo(null);
			this.setVisible(true);
			
			pack();
		}

		public void metAjourP1 () {

			this.remove(p1);

			String [] s0 = ff1.detecteParties ();
			
			p1 = new Container1 (this,s0,tailleDesPolices);
			
			this.add(p1);

			repaint ();

			reDim ();
		}
		
		public void afficheErreurJouer1Partie () {
			JOptionPane fOptions = new JOptionPane();

			fOptions.showMessageDialog(this,"Vous devez sélectionner une partie.","Erreur", JOptionPane.PLAIN_MESSAGE);
		}
		
		public void afficheErreurJouerPLusieursParties () {
			JOptionPane fOptions = new JOptionPane();

			fOptions.showMessageDialog(this,"Vous devez sélectionner une seule partie.","Erreur", JOptionPane.PLAIN_MESSAGE);
		}
		
		public int demandeEffacer1 (String s0) {
			JOptionPane fOptions = new JOptionPane();

			return fOptions.showConfirmDialog(this,"Voulez vous effacer la partie : "+s0+" ?", "Effacer la partie : "+s0+" ?",JOptionPane.OK_CANCEL_OPTION);
		}
		
		public int demandeEffacerPlusieurs (int n) {
			JOptionPane fOptions = new JOptionPane();
			
			String s1 = "";
			if (n>1) s1="s";

			return fOptions.showConfirmDialog(this,"Voulez vous effacer "+n+" partie"+s1+" ?", "Effacer "+n+" partie"+s1+" ?",JOptionPane.OK_CANCEL_OPTION);
		}
		
		public void reDim1 () {
			boolean dd = (getExtendedState()==this.MAXIMIZED_BOTH);

			int getWidth = this.getWidth();
			int getHeight = this.getHeight();

			resize(new Dimension(getWidth+1,getHeight+1));
			resize(new Dimension(getWidth,getHeight));

			if (dd) {
				this.setExtendedState(JFrame.MAXIMIZED_BOTH);
				b1=true;
			}
		}

		public void reDim () {
			repaint ();

			this.revalidate();
		}
		
		public String [] aleatString (int n) {
			int i;
			String [] s0 = new String [n];
			
			for (i=0; i<n; i++) s0[i] = "";
			
			for (i=0; i<n; i++) {
				s0[i] = ""+(i+1);
			}
			
			return s0;
		}
	}

	class Boutons extends JPanel {
		String s;
		JLabel txt1;
		boolean activé;

		
		public Boutons(String s) {
			this.s = s;
			
			activé = false;
			
			txt1 = new JLabel(s, JLabel.CENTER);
			txt1.setForeground(Color.BLACK);
			
			this.add(txt1);
		}
		
		public boolean getActivé () {
			return activé;
		}
		
		public void setActivé (boolean b) {
			this.activé = b;
		}
		
		public void paintComponent (Graphics g) {
			int getWidth = this.getWidth();
			int getHeight = this.getHeight();
			
			g.setColor(Color.BLACK);
			g.fillRect(0,0,getWidth, 35);
			
			if (activé) g.setColor(new Color(-4592930)); else g.setColor(Color.WHITE);
			g.fillRect(2,1,getWidth-2-2, 35-3);
			
		}
	}

	class Container1 extends JPanel {

		int i;
		ChargerPartie f;	
		JButton jouer;
		JButton effacer;
		Clique clique1;
		Clique clique2;
		CliqueSouris cliquePanel;
		EnregistrementFichiers ff1;
		UtilDate utilDate;
		int tailleDesPolices;
		Parties p2;
		int [] t;
		
		String [] s0;
		
		int [] sélectionnés;
		
		boolean selected;
		boolean effacerPlusieurs;
		
		public Container1 (ChargerPartie f, String [] s0, int tailleDesPolices) {
			super();

			this.tailleDesPolices=tailleDesPolices;
			
			this.f = f;
			
			this.s0 = s0;

			utilDate = new UtilDate ();

			ff1 = new EnregistrementFichiers ();

			t = new int [s0.length];

			for (i=0; i<t.length; i++) t[i] = i+1;

			s0 = classTabDateC(s0,t);
			
			this.setPreferredSize(new Dimension(500, 450));
			
			clique1  = new Clique (1);
			clique2  = new Clique (2);
			cliquePanel = new CliqueSouris(1);
			
			sélectionnés = new int [s0.length];
			
			p2 = new Parties(f,s0);

			Font font2 = new Font("Calibri", Font.BOLD, 12);
			if (tailleDesPolices!=12) font2 = new Font("Calibri", Font.BOLD, tailleDesPolices);
			
			jouer = new JButton("Jouer");
			effacer = new JButton("Effacer/Effacer plusieurs");

			if (tailleDesPolices!=12) {
				jouer.setFont(font2);
				effacer.setFont(font2);
			}
			
			jouer.addActionListener(clique1);
			effacer.addActionListener(clique2);
			
			selected = false;
			
			effacerPlusieurs = false;
			
			this.add(jouer);
			this.add(effacer);
			
			this.addMouseListener(cliquePanel);
			
			this.add(p2);
			
			reDim();
		}
		
		class Parties extends JPanel {
			int i;
			ChargerPartie f;
			Boutons [] boutons;
			CliqueSouris [] cliqueSouris;
			Box box;
			
			public Parties (ChargerPartie f, String [] s) {
				super();
				
				boutons = new Boutons[s.length];

				cliqueSouris = new CliqueSouris[s.length];
				
				this.f = f;
				
				this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

				box = Box.createVerticalBox();
				
				JScrollPane jsp1 = new JScrollPane(box);
				
				this.setPreferredSize(new Dimension(300,400));

				jsp1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
				
				this.add(jsp1);

				Font font2 = new Font("Calibri", Font.BOLD, 12);
				if (tailleDesPolices!=12) font2 = new Font("Calibri", Font.BOLD, tailleDesPolices);
				
				for (i=0; i<s.length; i++) {
					boutons[i] = new Boutons(s[i]);
					if (tailleDesPolices!=12) boutons[i].setFont(font2);
					boutons[i].setPreferredSize(new Dimension(150,35));
					
					cliqueSouris[i] = new CliqueSouris(i);
					
					boutons[i].addMouseListener(cliqueSouris[i]);
					
					box.add(boutons[i]);
				}
				
			}
			
			class CliqueSouris implements MouseListener {
				int n;
				
				int i;
				
				public CliqueSouris(int n) {
					this.n = n;
				}
				
				public void mouseClicked(MouseEvent e) {
					if (!effacerPlusieurs) {
						for (i=0; i<n; i++) {
							boutons[i].setActivé(false);
							sélectionnés[i]=0;
						}
						
						for (i=n+1; i<boutons.length; i++) {
							boutons[i].setActivé(false);
							sélectionnés[i]=0;
						}
					}
					
					if (boutons[n].getActivé()){
						sélectionnés[n]=0;
						boutons[n].setActivé(false);
						//System.out.println("0");
					}
					else {
						sélectionnés[n]=1;
						boutons[n].setActivé(true);
						//System.out.println("1");
					}
					
					repaint();
				}
				
				public void mouseEntered(MouseEvent e) {
					System.out.print("");
				}
				
				public void mouseExited(MouseEvent e) {
					System.out.print("");
				}
				
				public void mousePressed(MouseEvent e) {
					System.out.print("");
				}
				
				public void mouseReleased(MouseEvent e) {
					System.out.print("");
				}
			}
			
			public void paintComponent (Graphics g) {
				int getWidth = this.getWidth();
				int getHeight = this.getHeight();
				
				g.setColor(Color.WHITE);
				g.fillRect(0,0,getWidth, getHeight);
				
				for (i=0; i<boutons.length; i++) boutons[i].setPreferredSize(new Dimension(150,35));
				
				//this.setPreferredSize(new Dimension(f.getWidth()-(f.getWidth()/15*2)-12, f.getHeight()-(f.getHeight()/30*6)-35/2-5-24));
				
			}
			
			public void reDim () {
				f.reDim();
			}
		}

		public String [] classTabDateC (String [] t, int [] t2) {
			int i,j, cmp=0;
			String s0 = "";
			String [] t1;
			int n=8; //date
			
			for (i=0; i<t.length; i++) {
				for (j=i+1; j<t.length; j++) {
					if (utilDate.compareDateMax(t[i],t[j])) { 
						s0=t[j]; t[j]=t[i]; t[i]=s0;

						cmp=t2[j]; t2[j]=t2[i]; t2[i]=cmp;
					}
				}
			}
			
			return t;
		}
		
		class CliqueSouris implements MouseListener {
			int n;
			
			public CliqueSouris(int n) {
				this.n = n;
			}
			
			public void mouseClicked(MouseEvent e) {
				if (n==1) { //panel
					repaint ();
					
					//reDim();
					f.reDim1 ();
				}
			}
			
			public void mouseEntered(MouseEvent e) {
				System.out.print("");
			}
			
			public void mouseExited(MouseEvent e) {
				System.out.print("");
			}
			
			public void mousePressed(MouseEvent e) {
				System.out.print("");
			}
			
			public void mouseReleased(MouseEvent e) {
				System.out.print("");
			}
		}
		
		class Clique implements ActionListener {
			int n;
			
			Color couleurBouton;
			
			int i;
			
			public Clique (int n) {
				couleurBouton = UIManager.getColor("Button.background"); // attribution e la couleur d'origine des boutons (classe swing).

				this.n=n;
			}

			public void actionPerformed(ActionEvent arg0) {
				if (n==1) { //Jouer
					if (okJouer ()) {
						//System.out.println(t[retourneSelectionné ()]);
						chargeUnePartie (t[retourneSelectionné ()]);

						f.dispose ();
					}
					else {
						if (!estSelectionné()) f.afficheErreurJouer1Partie();
						else if (selectionnePlusieurs()) f.afficheErreurJouerPLusieursParties();
					}
				}
				if (n==2) { //Effacer
					if (!effacerPlusieurs) {
						if (!estSelectionné ()) {
							effacerPlusieurs = true;
							effacer.setBackground(new Color(-16724941));
							//effacer.setText("EffacerPlusieurs");
						}
						else {
							int r1 = f.demandeEffacer1(s0[retourneSelectionné ()]);
							
							/*if (r1!=0) {
							for (i=0; i<p2.boutons.length; i++) {
								p2.boutons[i].setActivé(false);
								sélectionnés[i]=0;
							}
							
							repaint ();
						}*/
							if (r1==0) {
								ff1.effacePartie(t[retourneSelectionné ()]);

								f.metAjourP1 ();
							}
						}
					}
					else {
						if (!estSelectionné ()) {
							//effacer.setText("Effacer");
							effacer.setBackground(couleurBouton);
							
							for (i=0; i<p2.boutons.length; i++) {
								p2.boutons[i].setActivé(false);
								sélectionnés[i]=0;
							}	
							
							effacerPlusieurs = false;
						}
						else {
							int r1 = f.demandeEffacerPlusieurs(nbreElémentsSélectionnés());
							
							/*if (r1!=0) {
							for (i=0; i<p2.boutons.length; i++) {
								p2.boutons[i].setActivé(false);
								sélectionnés[i]=0;
							}
							
							repaint ();
						}*/
							if (r1==0) {
								for (i=0; i<sélectionnés.length; i++) if (sélectionnés[i]!=0) ff1.effacePartie(t[i]);
								//for (i=0; i<sélectionnés.length; i++) if (sélectionnés[i]!=0) System.out.println("t[i] = "+t[i]);

								f.metAjourP1 ();

								//reDim ();
								f.reDim1 ();
							}
						}
					}
				}
				
			}
		}
		
		public int retourneSelectionné () {
			int i;
			
			if (estSelectionné ()) {
				for (i=0; i<sélectionnés.length; i++) if (sélectionnés[i]!=0) return i;
				
				System.out.println("La fontion "+'"'+"retourneSelectionné ()"+'"'+" dit : Erreur : pas de partie sélectionnée.");
			}
			
			return -1;
		}
		
		public boolean estSelectionné () {
			int i;
			
			for (i=0; i<sélectionnés.length; i++) if (sélectionnés[i]!=0) return true;
			
			return false;
		}
		
		public boolean selectionnePlusieurs () {
			return (nbreElémentsSélectionnés()>1);
		}
		
		public boolean okJouer () {
			return (estSelectionné() && !selectionnePlusieurs ());
		}
		
		public int nbreElémentsSélectionnés () {
			int i, a=0;
			
			for (i=0; i<sélectionnés.length; i++) if (sélectionnés[i]!=0) a++;
			
			return a;
		}
		
		public void paintComponent (Graphics g) {
			int getWidth = this.getWidth();
			int getHeight = this.getHeight();
			
			this.setPreferredSize(new Dimension(f.getWidth(), f.getHeight()));
			
			g.setColor(new Color(-1393551));
			g.fillRect(0,0,getWidth, getHeight);
			
			jouer.setBounds(getWidth/15*3-150/2, getHeight-getHeight/30*3-35/2, 150, 35);
			effacer.setBounds(getWidth-getWidth/15*3-180/2, getHeight-getHeight/30*3-35/2, 180, 35);
			
			p2.setBounds(getWidth/15*1, getHeight/30*3, getWidth-(getWidth/15*2), getHeight-(getHeight/30*6)-35/2-5);
			
			p2.setPreferredSize(new Dimension(f.getWidth()-(f.getWidth()/15*2)-12, f.getHeight()-(f.getHeight()/30*6)-35/2-5-24));
			
			//p2.setBounds(getWidth/15*3-150/2, getHeight/30*3, getWidth-(getWidth-getWidth/15*3-150/2)-getWidth/15*3-150/2, getWidth-(getHeight/30*3-(getHeight-getHeight/30*3+35)));
			
		}
		
		public void reDim () {
			f.reDim();
		}
		
		
		public boolean getSelected () {
			return this.selected;
		}

		public boolean getEffacerPlusieurs () {
			return this.effacerPlusieurs;
		}

		public void setSelected (boolean selected) {
			this.selected = selected;
		}

		public void setEffacerPlusieurs (boolean effacerPlusieurs) {
			this.effacerPlusieurs = effacerPlusieurs;
		}
	}


	public class TailleDesPolices extends JFrame {
		
		Container5 p1;
		WindowAdapter wa;

		public TailleDesPolices () {
			super("Options graphiques");
			
			p1 = new Container5 (this);
			
			this.add(p1);
			
			this.setMinimumSize(new Dimension(300, 300));
			//this.setPreferredSize(new Dimension(640, 480));
			this.setLocationRelativeTo(null);
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			this.setVisible(true);

			wa = new WindowAdapter() {
				public void windowClosing(WindowEvent e) {

				}
			};

			this.addWindowListener(wa);		
		}

		public void erreurEntier () {
			JOptionPane fOptions = new JOptionPane();

			fOptions.showMessageDialog(this, "Veuillez entrer un entier","Entrez un entier",JOptionPane.WARNING_MESSAGE);
		}

		public void erreurValeur () {
			JOptionPane fOptions = new JOptionPane();

			fOptions.showMessageDialog(this, "Veuillez entrer une taille supérieure à 1 et inférieure à 30.","Entrez une taille supérieure à 1 et inférieure à 30.",JOptionPane.PLAIN_MESSAGE);
		}
	}

	class Container5 extends JPanel {
		TailleDesPolices f;
		Clique3 clique;
		int i;
		Color couleur;
		String s;
		int [] tabSauveStats;
		UtilFichiers utilFichiers;
		
		JTextArea label;
		
		JTextField champNom;
		
		JButton bouton;
		
		public Container5 (TailleDesPolices f) {
			super ();

			utilFichiers = new UtilFichiers ();

			tabSauveStats = new int [7];

			s = "";
			
			champNom = new JTextField ();
			this.add(champNom);
			
			label = new JTextArea ("Taille des polices : \n(Par défaut : 12)");
			
			Font font = new Font("Serif", Font.PLAIN, 16);
			
			couleur = new Color(-7232910);
			
			label.setFont(font);
			label.setEditable(false);
			label.setBackground(couleur);
			label.setForeground(Color.BLACK);
			label.setWrapStyleWord(true);
			this.add(label);
			
			bouton = new JButton("Ok");

			clique = new Clique3(1);
			bouton.addActionListener(clique);
			this.add(bouton);
			
			this.f = f;
		}
		
		public void paintComponent (Graphics g) {
			int getWidth = this.getWidth();
			int getHeight = this.getHeight();
			
			g.setColor(couleur);	
			g.fillRect(0,0,getWidth,getHeight);

			label.setBounds(getWidth/2-150/2,getHeight/2-50/2-25*2, 150,25*2);
			champNom.setBounds(getWidth/2-150/2,getHeight/2-50/2, 150,35);
			bouton.setBounds(getWidth/2-75/2,getHeight-50-15, 75,35);
			
			//System.out.println("OK.");
			
		}
		
		class Clique3 implements ActionListener {
			int n;
			
			int i;
			public Clique3(int n) {
				this.n = n;
			}
			public void actionPerformed(ActionEvent e) {
				if (n==1) { //Ok
					String s5 = champNom.getText();

					if (!utilFichiers.TestNombre(s5)) f.erreurEntier ();
					else {
						int n5 = utilFichiers.convertNombre(s5);

						if (n5>1 && n5<30) {
							setTailleDesPolices(n5);

							f.dispose ();
						}
						else f.erreurValeur ();
					}				
				}
				

			}
		}
	}

	public void sauvePartie () {
		int [] s5 = ff1.sauveParametres(n11,a,b,c,m11,h,ndco,nombreDePartiesJouées,coupsIllimités,premierCoups,tourEnCours,clm,heures,minutes,secondes,tailleDesPolices,avanceeDuTour,calculTemps()/1000,x);

		ff1.SauvegardePartie(1,tcoups,tabReponses,couleurs,t1,s5);
	}

	public void setTailleDesPolices (int n) {
		tailleDesPolices = n;

		System.out.println("tailleDesPolices = "+tailleDesPolices);

		if (tailleDesPolices!=12) {

			Font font2 = new Font("Calibri", Font.BOLD, tailleDesPolices);
			
			for (i=0; i<boutons.length; i++) boutons[i].setFont(font2);
			
			font2 = new Font("Calibri", Font.PLAIN, 16+(12-tailleDesPolices));
			
			for (i=0; i<4; i++) texteOptions[i].setFont(font2);
			
			font2 = new Font("Calibri", Font.PLAIN, 18+(12-tailleDesPolices));
			
			for (i=0; i<3; i++) texteTemps[i].setFont(font2);
		}
		else {
			Font font2 = new Font("Calibri", Font.BOLD, 13);
			
			for (i=0; i<boutons.length; i++) boutons[i].setFont(font2);
			
			font2 = new Font("Calibri", Font.PLAIN, 16+(12-13));
			
			for (i=0; i<4; i++) texteOptions[i].setFont(font2);
			
			font2 = new Font("Calibri", Font.PLAIN, 18+(12-13));
			
			for (i=0; i<3; i++) texteTemps[i].setFont(font2);
		}
	}

	public void enregistreParametres () {
		ff1.SauveParametresFichier (n11,a,b,c,m11,h,ndco,nombreDePartiesJouées,coupsIllimités,premierCoups,tourEnCours,clm,heures,minutes,secondes,tailleDesPolices,avanceeDuTour,calculTemps()/1000,x);
	}

	class CliqueOptions implements ActionListener {
		int n;
		public CliqueOptions (int n) {
			this.n = n;
		}

		public void actionPerformed(ActionEvent e) {
			if (n==0) { // Illimité

			}

			if (n==1) { // Définit

			}
		}
	}

	public void metAJourInfos () {
		String nbreDeCoups="";

		if (coupsIllimités) nbreDeCoups="Illimité";
		else nbreDeCoups=c+"";

		String modeDeJeu = "";

		if (m11==1) modeDeJeu = "Humain contre humain";
		if (m11==2) modeDeJeu = "Ordinateur contre humain";
		if (m11==3) modeDeJeu = "Humain contre ordinateur";
		if (m11==4) modeDeJeu = "Ordinateur contre ordinateur";

		String difficulté = "";

		if (h==1) difficulté = "Facile";
		if (h==2) difficulté = "Moyen";
		if (h==3) difficulté = "Difficile";

		infosDuJeu = "Mode de jeu : "+modeDeJeu+"   Nombre de cases : "+n11+"\nNombre de coups : "+nbreDeCoups+"   Difficulté : "+difficulté+"   Nombre de couleurs : "+ndco+"\nMode contre la montre : ";
		if (clm) infosDuJeu = infosDuJeu+"Activé";
		else infosDuJeu = infosDuJeu+"Désactivé";

		infosDuJeu = infosDuJeu+".";

		label.setText(infosDuJeu);
	}

	class JeuPause extends JPanel {
		public void paintComponent (Graphics g) {
			int getWidth = this.getWidth();
			int getHeight = this.getHeight();

			if (paused) {
				g.setColor(Color.BLACK);
				g.fillRect(0,0,getWidth,getHeight);
				
				g.drawImage(pause,getWidth/2-150/2,getHeight/2-140/2,150,140,null);
			}
		}
	}

	class PJeu extends JPanel {
		JeuPause jeuPause;
		Mastermind f;
		int x=0;
		public PJeu (Mastermind f) {
			super ();

			jeuPause = new JeuPause ();
			this.add(jeuPause);
			jeuPause.setVisible(false);

			this.f = f;
			
			this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

			this.setSize(new Dimension(560,600-tdpi));

			box = Box.createVerticalBox();

			coups = new Coup[c+2];

			coups[x] = new Coup(0,ldPJ);
			box.add(coups[x]);

			jsp1 = new JScrollPane(box);

			jsp1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
			
			this.add(jsp1);

			x++;
		}

		public void paintComponent (Graphics g) {
			int getWidth = this.getWidth();
			int getHeight = this.getHeight();

			if (paused) {
				jeuPause.setBounds(0,0,getWidth,getHeight);
			}
		}

		public void setVisibleJeuPause (boolean a) {
			jeuPause.setVisible(a);
		}
	}

	class Coup extends JPanel {


		int ldPJ; //longueur du panel de jeu.

		int n;

		int i;
		int j;
		
		public Coup(int n, int ldPJ) {
			super();

			this.n=n;

			this.ldPJ = ldPJ;

			tcvV = 50; //taille verticale de la case vide
			tcvH = 50; //taille horizontale de la case vide

			tdcdr = ((tdjpH-50)/(n11+1))*(n11-2); //taille du carre de réponses

			tdjpH = ldPJ-tdcdr-15; //taille du JPanel horizontale

			ndlC=1; //nombre de lignes de cases.
			j=0;

			for (int i=0; i<n11; i++) {
				j++;
				if ((tcvH+10)*(j+1)+10 > (tdjpH)) { ndlC++; j=0; }
			}

			this.setPreferredSize(new Dimension((tdjpH)-50,(tcvV+10)*ndlC+12));

			//n11=10;
		}
		
		public void paintComponent (Graphics g) {
			int width = this.getWidth();
			int height = this.getHeight();

			int ncrH = 0; //nombre de cercles de réponse horizontaux.


			g.clearRect(0, 0, this.getWidth(), this.getHeight());

			tdcdr = (width/(n11+1)*(n11/4)); //taille du carre de réponses

			int tcr = 18; //taille des cercle de réponse.

			if (tdcdr==0) tdcdr=(tdjpH/5)*2;
			
			g.setColor(new Color(-6384846));
			g.fillRect(0,0,width,height);
			g.setColor(Color.BLACK);
			g.fillRect(4,4,width-6,height-6);
			g.setColor(Color.WHITE);
			g.fillRect(7,7,width-12,height-12);

			//if (n11>50||x<2) {g.drawImage(carreDesReponses[2],width-tdcdr-9/2,5,tdcdr,height-9, null); /*System.out.println("carreDesReponses[2]");*/ }

			//else if ((n11>30)||(x<5)) { g.drawImage(carreDesReponses[1],width-tdcdr-9/2,6,tdcdr,height-11, null); /*System.out.println("carreDesReponses[1]");*/ }

			//else { g.drawImage(carreDesReponses[0],width-tdcdr-9/2,7,tdcdr,height-12, null); /*System.out.println("carreDesReponses[0]");*/ }

			//if (n11>50||x<2) {
			if (false) {
				g.setColor(new Color(-16776961));
				g.fillRect(width-tdcdr-9/2,5,tdcdr,height-9);
				//g.drawImage(bouton3d,width-tdcdr-9/2,5,tdcdr,height-9, null);

				/*System.out.println("carreDesReponses[2]");*/
			}
			//else if ((n11>30)||(x<5)) {
			else if (false) {
				g.setColor(new Color(-29576));
				g.fillRect(width-tdcdr-9/2,6,tdcdr,height-11);
				//g.drawImage(bouton3d,width-tdcdr-9/2,6,tdcdr,height-11, null);

				/*System.out.println("carreDesReponses[1]");*/
			}

			else {
				g.setColor(new Color(-13421569));
				g.fillRect(width-tdcdr-9/2,7,tdcdr,height-12);
				//g.drawImage(bouton3d,width-tdcdr-9/2,7,tdcdr,height-12, null);
				/*System.out.println("carreDesReponses[0]");*/
			}

			i=0;
			
			while (i*((tdcdr/50)*4+tcr)<tdcdr) {
				i++;
				ncrH++;
			}

			//System.out.println("ncrH = "+ncrH);

			int j=1;
			int k1=1;

			for (int i=0; i<n11; i++) {
				/*if (tabReponses[n][i]==0) g.setColor(new Color(-10066330));
				else if (tabReponses[n][i]==1) g.setColor(new Color(-65536));
				else if (tabReponses[n][i]==2) g.setColor(new Color(-1));
				else if (tabReponses[n][i]==3) g.setColor(new Color(-16711936));
			
				g.fillOval(width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1),tcr,tcr);*/

				if (tabReponses[n][i]==0 && imageChargée [1]) g.drawImage(caseReponseVide, width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1,null);
				else if (tabReponses[n][i]==0) {
					g.setColor(new Color(-13158601));
					g.fillOval(width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1);
				}
				else if (tabReponses[n][i]==1) g.drawImage(pionRouge, width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1,null);
				else if (tabReponses[n][i]==2) g.drawImage(pionBlanc, width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1,null);
				else if (tabReponses[n][i]==3) g.drawImage(pionJaune, width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1,null);
				
				//if (tabReponses[n][i]!=0) g.drawImage(petitPion3d,width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1,null);
				//else g.drawImage(caseVideMarron,width-tdcdr-9/2+(tdcdr/(ncrH))*j-tcr/2,7+((tdcdr/50)*5)*k1+tcr*(k1-1)+1,tcr,tcr-1,null);

				j++;

				if (j>=ncrH) { j=1; k1++; }
			}			

			int ndlCr=1; //nombre de lignes de cases réponses.
			j=0;

			for (int i=0; i<n11; i++) {
				j++;
				if ((13+5)*(j+1)+10 > (tdcdr)) { ndlCr++; j=0; }
			}

			if (ndlCr>ndlC) ndlC=ndlCr;
			
			for (i=0; i<ndlCr; i++) {
				//g.fillOval(width-tdcdr-9/2+2+(13+5)*i,7+2+,13,13); System.out.println("carreDesReponses[0]");
			}


			//g.drawImage(carreDesReponses,(width/n11)*(n11-2),7,(width/n11),height-12, null);
			//g.drawImage(carreDesReponses,tdjpH-52,6,tdcdr+56,height-11, null);

			tdjpH = width-ldpdt-tdcdr-15; //taille du JPanel horizontale

			ndlC=1; //nombre de lignes de cases.
			j=0;

			for (int i=0; i<n11; i++) {
				j++;
				if ((tcvH+10)*(j+1)+10 > (tdjpH)) { ndlC++; j=0; }
			}

			this.setPreferredSize(new Dimension((tdjpH)-50,(tcvV+10)*ndlC+12));

			j=0;
			int k=0;
			for (i=0; i<n11; i++) {
				g.drawImage(caseVide,(tcvH+10)*k+10,(tcvV+10)*j+12,tcvH,tcvV, null);

				//if (jeuCommence) {
				if (tcoups[n][i]!=0) {
					Color rond = new Color(t10[tcoups[n][i]-1][0],t10[tcoups[n][i]-1][1],t10[tcoups[n][i]-1][2]);

					g.setColor(rond);
					g.fillOval((tcvH+10)*k+10-2,(tcvV+10)*j+12-2,tcvH+2,tcvV+2);
					g.drawImage(grandPionTransparent,(tcvH+10)*k+10-2,(tcvV+10)*j+12-2,tcvH+2,tcvV+2, null);
				}
				//}

				k++;
				
				if (j<ndlC && ((tcvH+10))*(k+1)+10>=(tdjpH)) {
					j++;
					k=0;
				}
			}
		}
	}

	class RedimBonus implements MouseListener {
		public RedimBonus () {
			System.out.print("");
		}
		
		public void mousePressed(MouseEvent e)  {
			repaint ();

			reDim();
		}
		
		public void mouseClicked(MouseEvent e) {
			System.out.print("");
		}

		public void mouseEntered(MouseEvent e) {
			System.out.print("");
		}

		public void mouseExited(MouseEvent e) {
			System.out.print("");
		}

		public void mouseReleased(MouseEvent e) {
			System.out.print("");
		}
	}

	class BoutonTransparentAction implements MouseListener {
		int n;

		public BoutonTransparentAction (int n) {
			this.n = n;
		}
		
		public void mousePressed(MouseEvent e)  {
			if (reDimBonus) {
				repaint ();

				reDim();
			}

			if (!jeuCommence) {
				if (abt) {
					//System.out.println("BoutonTransparentAction "+(n+1));

					Color essai = JColorChooser.showDialog(null,"JColorChooser Sample", null);
					if (essai!=null) {
						int [] th = new int [3];

						th[0]=essai.getRed();
						th[1]=essai.getGreen();
						th[2]=essai.getBlue();

						if (VerifieDoublons(t10,th)) {
							for (int i=0; i<3; i++) t10[this.n][i]=th[i];
							System.out.println("Ok1");

							repaint();
							reDim ();
						}
						else {
							f.afficheErreurCouleurs ();
						}
					}
				}
				else {
					System.out.println("!BoutonTransparentAction "+(n+1));
				}
			}
			else {
				if (avanceeDuTour<n11 && (m11!=3 || (m11==3 && premierCoups)) && m11!=4) {
					if (tourEnCours) {
						tcoups[x][avanceeDuTour]=(n+1);
						avanceeDuTour++;

						repaint();

						reDim();

						System.out.println((n+1));
					}
				}

				if (x>=c) {
					jeuCommence=false;

					if (m11==3 || m11==4) reDimBonus = true;
					
					boolean g1 = utilJeu.VerifieSolution(t1,tcoups[x-1]);
					
					if (!g1) {
						System.out.println("\nPerdu.");
						f.affichePerdu();

						afficheResultat2 ();						
					}

					if (g1) {
						System.out.println("\n\nC'est gagne !\n");
						f.afficheJeuGagne(x,c);

						int chrono = 0;
						if (clm) chrono = 1;

						utilFichiers.ajouteStat (n11,ndco,m11,h,x,calculTemps()/1000,chrono,true,tailleDesPolices);

						finDuJeu ();
					}
					
					afficheSolutions(t1);
					
					if (g1) {
						System.out.print("\nCoup");
						if (x>1) System.out.print("s");
						System.out.print(" : "+x+"/"+c+".");
					}
				}
			}
		}
		
		public void mouseClicked(MouseEvent e) {
			System.out.print("");
		}

		public void mouseEntered(MouseEvent e) {
			System.out.print("");
		}

		public void mouseExited(MouseEvent e) {
			System.out.print("");
		}

		public void mouseReleased(MouseEvent e) {
			System.out.print("");
		}
	}

	class Clique implements ActionListener {
		int n;

		public Clique (int n) {

			r1=0;
			r2=0;
			r3=0;

			this.n = n;
		}

		public void actionPerformed(ActionEvent e) { 
			int i;

			if (n==-1) { // cacheInfo
				if (pia) {
					tdpi = 0;

					pia = false;
				}
				else {
					tdpi = 75;

					pia = true;
				}

				repaint ();

				//reDim ();
				f.reDim1 ();
			}

			if (n==0) { //Jouer

				//commenceTemps (10000);

				for (i=0; i<5; i++) boutons[i].setVisible(false);
				for (i=5; i<9; i++) boutons[i].setVisible(true);

				reDim ();
			}

			if (n==1) { //Options
				placementB[0]+=17;

				placementB[2]+=2;

				placementB[8] = 9; //Quitter

				for (i=0; i<5; i++) boutons[i].setVisible(false);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);

				boutons[34].setVisible(true);

				reDim ();
			}

			if (n==2) { //Instructions
				Instructions instructions = new Instructions ();
			}

			if (n==3) { //Scores
				reDim ();

				File ff2 = new File ("Sauvegardes"+File.separatorChar+"Statistiques.txt");

				if (!ff2.exists ()) f.afficheScoresNonTrouvés ();
				else {
					Scores scores = new Scores (0,0,0,false,tailleDesPolices);
				}
			}

			if (n==4) { //Crédits
				Credits credits = new Credits ();
			}

			if (n==5) { //Quitter
				if (f.exit ()==0) {
					if (!jeuCommence) {
						enregistreParametres ();

						System.exit(0);
					}
				}
			}

			if (n==6) { //Nouveau jeu
				//t10 = couleursAleat(63);

				placementB[0]+=10;

				System.out.println("ndco = "+ndco);

				for (i=0; i<ndco; i++) p2[i].setVisible(true);

				dessineCarreCouleurs = true;

				for (i=6; i<9; i++) boutons[i].setVisible(false);
				for (i=9; i<12; i++) boutons[i].setVisible(true);

				//for (i=0; i<ndco; i++) couleurs3d[i].setVisible(true);

				pJeu.setVisible(true);

				reDim ();
			}

			if (n==7) { //Charger une partie
				String [] s0 = ff1.detecteParties ();

				if ((s0.length==1) && (s0[0]=="")) f.afficheErreurPartieNonTrouvée ();
				else {
					cp = new ChargerPartie (tailleDesPolices);
				}
			}

			if (n==8) { // Retour

				//reinitialiseTemps ();

				for (i=5; i<9; i++) boutons[i].setVisible(false);
				for (i=0; i<6; i++) boutons[i].setVisible(true);

				reDim ();
			}

			if (n==9) { //Commencer
				x=0;

				if (clm) boutons[47].setVisible(true);

				/* Suppression du panel d'info */

				tdpi = 0;

				pia = false;

				repaint ();

				/*-----------------------------*/

				//reDim();
				f.reDim1 ();

				reDimBonus = false;

				if (m11==1 || m11==3) premierCoups=true; 

				tcoups = new int [c+1][n11];

				avanceeDuTour=0;

				if (m11!=1 && m11!=3) for (i=0; i<n11; i++) t1[i] = (int)(Math.random()*b+a);

				/*------------------------------------------------------------POUR LE TEST----------------------------------------------------------*/

				//for (i=0; i<n11; i++) System.out.println("t1["+i+"] = "+t1[i]); //affiche la réponse dans le terminal.

				/*----------------------------------------------------------------------------------------------------------------------------------*/

				if (avanceeDuTour<n11) if ((m11!=3 || (m11==3 && premierCoups)) && m11!=4) tourEnCours=true;
				

				r1=0;
				r2=0;
				r3=0;

				System.out.println("OK1");

				boutons[10].setBackground(couleurBouton);
				boutons[10].setEnabled(false);

				placementB[0]+=45;
				placementB[2]+=3;

				jeuCommence = true;

				if (clm) {
					reinitialiseTemps ();
					if (m11!=1 && m11!=3) commenceTemps(temps*1000);

					//System.out.println("temps*1000 = "+temps*1000);
				}

				reDim ();

				for (i=5; i<12; i++) if (i!=10) boutons[i].setVisible(false);
				for (i=30; i<34; i++) boutons[i].setVisible(true);

				if (m11==4) {
					if ((niveauDeLIA==3) && (n11<5 && b<5)){
						if (h!=3) niveauDeLIA=2; 
						else niveauDeLIA=1;
					}

					iaSMF = new IaNivFacile (n11,a,b);
					iaSMM = new IaNivMoyen (n11,a,b);
					if (n11<5 && b<5) iaCF = new IaCalculsFacile(n11,a,b); else iaCF = new IaCalculsFacile();
					if (n11<5 && b<5) iaCM = new IaCalculsMoyen(n11,a,b); else iaCM = new IaCalculsMoyen();
					if (n11<5 && b<5) iaCD = new IaCalculsDifficile(n11,a,b); else iaCD = new IaCalculsDifficile();


					t4 = new int [n11];
					th4 = new int [n11];
					t11 = new int [n11];

					finJeuIA = false;

					r1=0;
					r2=0;
					r3=0;


					while ((x<c) && (!utilJeu.VerifieSolution(t1,tcoups[x])) && !finJeuIA) {
						ia ();

						System.out.println("OK "+x);
					}

					//jeuT.stop();
				}
			}

			if (n==10) { //Changer les couleurs
				if (actb) {
					actb=false;
					abt=false;
					boutons[10].setBackground(couleurBouton);
				}
				else {
					actb=true;
					abt=true;
					boutons[10].setBackground(new Color(-16724941));
				}
			}

			if (n==11) { // Retour
				placementB[0]-=10;

				dessineCarreCouleurs = false;

				actb=false;
				abt=false;

				for (i=0; i<ndco; i++) p2[i].setVisible(false);

				for (i=6; i<9; i++) boutons[i].setVisible(true);
				for (i=9; i<12; i++) boutons[i].setVisible(false);

				//for (i=0; i<ndco; i++) couleurs3d[i].setVisible(false);

				f.reDim1 ();
				reDim ();
				f.reDim1 ();
			}

			if (n==12) { //nombre de cases
				boutons[34].setVisible(false);
				for (i=12; i<18; i++) boutons[i].setVisible(false);
				boutons[48].setVisible(false);


				boutons[39].setVisible(true);
				boutons[42].setVisible(true);

				champNombre [0].setVisible(true);
				texteOptions [0].setVisible(true);
				champNombre [0].setText(""+n11);
			}

			if (n==13) { //difficulté
				boutons[48].setVisible(false);
				for (i=12; i<18; i++) boutons[i].setVisible(false);
				for (i=18; i<22; i++) boutons[i].setVisible(true);

				reDim ();
			}

			if (n==14) { //mode de jeu
				placementB[0]+=35;

				boutons[48].setVisible(false);
				for (i=12; i<18; i++) boutons[i].setVisible(false);
				for (i=22; i<27; i++) boutons[i].setVisible(true);

				reDim ();
			}

			if (n==15) { // nombre de coups max
				boutons[34].setVisible(false);
				boutons[48].setVisible(false);
				for (i=12; i<18; i++) boutons[i].setVisible(false);


				boutons[41].setVisible(true);
				boutons[44].setVisible(true);
				boutons[46].setVisible(true);

				champNombre [2].setVisible(true);
				texteOptions [2].setVisible(true);
				champNombre [2].setText(c+"");
			}

			if (n==16) { //contre la montre
				for (i=12; i<18; i++) boutons[i].setVisible(false);

				boutons[34].setVisible(false);
				boutons[48].setVisible(false);

				boutons[29].setVisible(true);

				for (i=35; i<37; i++) boutons[i].setVisible(true);

				reDim ();
			}

			if (n==17) { // Retour
				placementB[0]-=17;

				placementB[2]-=2;

				placementB[8] = 7; //Quitter

				for (i=0; i<5; i++) boutons[i].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(false);
				boutons[48].setVisible(false);

				boutons[34].setVisible(false);

				reDim ();
			}

			if (n==18) { //Facile
				h=1;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=18; i<22; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==19) { //Moyen
				h=2;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=18; i<22; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==20) { //Difficile
				h=3;
				
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=18; i<22; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==21) { // Retour
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=18; i<22; i++) boutons[i].setVisible(false);

				reDim ();
			}

			if (n==22) { // h/h
				m11=1;

				placementB[0]-=35;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=22; i<27; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==23) { // h/o
				m11=2;

				placementB[0]-=35;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=22; i<27; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==24) { // o/h
				m11=3;

				placementB[0]-=35;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=22; i<27; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==25) { // o/o
				m11=4;

				placementB[0]-=35;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=22; i<27; i++) boutons[i].setVisible(false);

				metAJourInfos ();

				reDim ();
			}

			if (n==26) { // Retour
				placementB[0]-=35;

				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);
				for (i=22; i<27; i++) boutons[i].setVisible(false);

				reDim ();
			}

			if (n==27) { //Activer
				clm = true;

				ldpdt = 20;

				for (i=27; i<29; i++) boutons[i].setVisible(false);
				boutons[38].setVisible(false);

				for (i=35; i<37; i++) boutons[i].setVisible(true);
				boutons[29].setVisible(true);

				boutons[37].setVisible(false);

				barrePanel.setVisible(true);

				f.setClm(true);

				metAJourInfos ();

				repaint();

				f.reDim1 ();
			}

			if (n==28) { //Désactiver
				clm = false;

				ldpdt = 0;

				for (i=27; i<29; i++) boutons[i].setVisible(false);
				boutons[38].setVisible(false);

				for (i=35; i<37; i++) boutons[i].setVisible(true);
				boutons[29].setVisible(true);

				boutons[37].setVisible(false);

				barrePanel.setVisible(false);

				f.setClm(false);

				metAJourInfos ();

				repaint();

				f.reDim1 ();
			}

			if (n==29) { // Retour
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[34].setVisible(true);
				boutons[48].setVisible(true);

				for (i=35; i<37; i++) boutons[i].setVisible(false);
				boutons[29].setVisible(false);

				reDim ();
			}

			if (n==30) {  //Valider
				if (avanceeDuTour>=n11) {
					tourEnCours=false;
					avanceeDuTour=0;
				}

				if (!tourEnCours) {

					x++;

					if (premierCoups) {
						if (clm && (m11==1 || m11==3) && x==1) {
							commenceTemps(temps*1000);
							System.out.println("ok1.");
						}

						if (!tourEnCours) {
							x=0;

							for (i=0; i<n11; i++) t1[i] = tcoups[0][i];

							tcoups = new int [c+1][n11];

							remove(pJeu);

							pJeu = new PJeu(f);

							add(pJeu);

							premierCoups=false;

							for (i=0; i<n11; i++) System.out.println("t1["+i+"] = "+t1[i]);

							tourEnCours=true;

							repaint();

							//reDim();
							f.reDim1();
						}
					}else {

						System.out.println("x = "+x);
						tourEnCours=true;

						if (h==1) {
							utilJeu.VerifieFacile(t1,tcoups[x-1]);
							tabReponses[x-1] = utilJeu.VerifieFacileOrdi(t1,tcoups[x-1]);
						}

						if (h==2) {
							t11 = utilJeu.VerifieMoyen(a,b,n11,t1,tcoups[x-1]); r1= t11[0]; r2= t11[1];

							tabReponses[x-1] = compteReponses2 (r1,r2);
							
							int a6 = (n-(r1+r2));
							
							System.out.print("\nIl y a "+r1+" chiffre");
							
							if (r1>1) System.out.print("s");
							
							System.out.print(" bien place");
							
							if (r1>1) System.out.print("s");
							
							System.out.print(" et "+r2+" chiffre");
							
							if (r2>1) System.out.print("s");
							
							System.out.print(" mal place");
							
							if (r2>1) System.out.print("s");
							
							System.out.print(". Le reste ("+a6+" chiffre");
							
							if (a6>1) System.out.print("s");
							
							System.out.print(") n'est pas dans ");
							
							if (n>1) System.out.print("les solutions");
							
							else System.out.print("la solution");
							
							System.out.println(".");
							
							//Affichage des résultats pour le joueur.	
						}
						
						if (h==3) {
							r3 = utilJeu.VerifieDifficile(a,b,n11,t1,tcoups[x-1]);

							tabReponses[x-1] = compteReponses3 (r3);

							System.out.print("\nIl y a "+r3+" chiffre");
							
							if (r3>1) System.out.print("s");
							
							System.out.print(" bien ou mal place");
							
							if (r3>1) System.out.print("s");
							
							System.out.print(" dans ");
							
							if (n>1) System.out.print("les solutions");
							
							else System.out.print("la solution");
							
							System.out.println(".");

							//Affichage des résultats pour le joueur.
						}

						if (coupsIllimités) {
							if (x>c-2) {
								c=c*2;
								
								coups = agrandieTab(coups);
								tcoups = utilFenetre.agrandieTab(tcoups);
								tabReponses = utilFenetre.agrandieTab(tabReponses);
							}				
						}
						
						if ((x>=c) || (utilJeu.VerifieSolution(t1,tcoups[x-1]))) {
							jeuCommence=false;

							if (clm) {
								paused = false;
								boutons[47].setText("Pause");
								pJeu.setVisibleJeuPause(false);	
							}
							
							boolean g1 = utilJeu.VerifieSolution(t1,tcoups[x-1]);
							
							if (!g1) {
								System.out.println("\nPerdu.");

								if (clm) {
									tempsT.suspend();

									int tmp10 = calculTemps();

									String s50 = calculTempsS ();

									if (tmp10>0) f.affichePerduContreLaMontre(s50);
									else f.affichePerdu();

									reinitialiseTemps ();
								}
								else {
									f.affichePerdu();
								}

								afficheResultat2 ();							
							}

							if (g1) {
								System.out.println("\n\nC'est gagne !\n");

								int chrono = 0;
								if (clm) chrono = 1;

								utilFichiers.ajouteStat (n11,ndco,m11,h,x,calculTemps()/1000,chrono,true,tailleDesPolices);

								if (clm) {
									tempsT.suspend();

									int tmp10 = calculTemps();

									String s50 = calculTempsS ();

									if (tmp10>0) f.afficheJeuGagneContreLaMontrePlus(x,c,s50);
									else f.afficheJeuGagne(x,c);

									reinitialiseTemps ();
								}
								else {
									f.afficheJeuGagne(x,c);
								}

								finDuJeu ();
							}
							
							afficheSolutions(t1);
							
							if (g1) {
								System.out.print("\nCoup");
								if (x>1) System.out.print("s");
								System.out.print(" : "+x+"/"+c+".");
							}
						}

						nouveauCoup (x);
						//reDim();
						f.reDim1();

					}
				}

				if ((m11==3 && !premierCoups)) {
					if ((niveauDeLIA==3) && (n11<5 && b<5)){
						if (h!=3) niveauDeLIA=2; 
						else niveauDeLIA=1;
					}

					iaSMF = new IaNivFacile (n11,a,ndco);
					iaSMM = new IaNivMoyen (n11,a,ndco);
					if (n11<5 && b<5) iaCF = new IaCalculsFacile(n11,a,ndco); else iaCF = new IaCalculsFacile();
					if (n11<5 && b<5) iaCM = new IaCalculsMoyen(n11,a,ndco); else iaCM = new IaCalculsMoyen();
					if (n11<5 && b<5) iaCD = new IaCalculsDifficile(n11,a,ndco); else iaCD = new IaCalculsDifficile();


					t4 = new int [n11];
					th4 = new int [n11];
					t11 = new int [n11];

					finJeuIA = false;

					r1=0;
					r2=0;
					r3=0;

					//jeuT.start();

					while ((x<c) && (!utilJeu.VerifieSolution(t1,tcoups[x])) && !finJeuIA) {
						ia ();

						System.out.println("OK "+x);
					}

					//jeuT.stop();
				}
			}
			
			if (n==31) {  // Retour arrière
				if (avanceeDuTour>0) {
					tcoups[x][avanceeDuTour-1]=0;
					avanceeDuTour--;

					repaint();
					
					reDim();
				}

				System.out.println(avanceeDuTour);
			}

			if (n==32) {  // Arreter et voir les réponses
				if (clm) {
					tempsT.suspend();
					paused = true;
					boutons[47].setText("Reprendre");
					pJeu.setVisibleJeuPause(true);
				}

				afficheSolutions(t1);		

				int gjdfjk=f.quitteLeJeu ();

				if (gjdfjk==0) {
					if (clm) {
						reinitialiseTemps ();

						paused = false;
						boutons[47].setText("Pause");
						pJeu.setVisibleJeuPause(false);
					}	

					System.out.print("\nCoups");
					System.out.print(" avant abandon : "+x+"/"+c+".\n");

					f.afficheCoupsAvantAbandon(x,c);

					afficheResultat ();
				}

				if (clm) {
					paused = false;
					boutons[47].setText("Pause");
					pJeu.setVisibleJeuPause(false);
					tempsT.resume();
				}
			}

			if (n==33) {  // OK
				if (clm) reinitialiseTemps ();

				/* Activation du panel d'info */

				tdpi = 75;

				pia = true;

				repaint ();

				//reDim ();
				f.reDim1 ();

				/*-----------------------------*/

				finDuJeu ();
			}

			if (n==34) {  // Nombre de couleurs
				boutons[34].setVisible(false);
				boutons[48].setVisible(false);
				for (i=12; i<18; i++) boutons[i].setVisible(false);

				boutons[40].setVisible(true);
				boutons[43].setVisible(true);

				champNombre [1].setVisible(true);
				texteOptions [1].setVisible(true);
				champNombre [1].setText(""+ndco);
			}

			if (n==35) {  // Temps
				boutons[29].setVisible(false);
				for (i=35; i<37; i++) boutons[i].setVisible(false);

				boutons[37].setVisible(true);
				boutons[45].setVisible(true);

				for (i=0; i<3; i++) {
					champTemps[0].setText(heures+"");
					champTemps[1].setText(minutes+"");
					champTemps[2].setText(secondes+"");

					champTemps[i].setVisible(true);
					texteTemps[i].setVisible(true);
					texteOptions[3].setVisible(true);
				}
			}

			if (n==36) {  // Activer/Désactiver
				for (i=27; i<29; i++) boutons[i].setVisible(true);
				boutons[38].setVisible(true);

				for (i=35; i<37; i++) boutons[i].setVisible(false);
				boutons[29].setVisible(false);

				reDim ();
			}

			if (n==37) {  // Ok
				boutons[37].setVisible(false);

				boutons[45].setVisible(false);
				for (i=0; i<3; i++) {
					champTemps[i].setVisible(false);
					texteTemps[i].setVisible(false);
					texteOptions[3].setVisible(false);
				}

				boutons[29].setVisible(true);
				for (i=35; i<37; i++) boutons[i].setVisible(true);

				String [] champTempsS = new String [3];

				for (i=0; i<3; i++) champTempsS [i] = champTemps[i].getText();

				if (utilFenetre.TestNombre(champTempsS[0]) && utilFenetre.TestNombre(champTempsS[1]) && utilFenetre.TestNombre(champTempsS[2])) {
					heures = utilFenetre.convertNombre(champTempsS[0]);
					minutes = utilFenetre.convertNombre(champTempsS[1]);
					secondes = utilFenetre.convertNombre(champTempsS[2]);
				}
			}

			if (n==38) {  // Retour
				for (i=27; i<29; i++) boutons[i].setVisible(false);
				boutons[38].setVisible(false);

				for (i=35; i<37; i++) boutons[i].setVisible(true);
				boutons[29].setVisible(true);
			}

			if (n==39) {  // Retour
				boutons[34].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);

				boutons[39].setVisible(false);
				boutons[42].setVisible(false);

				champNombre [0].setVisible(false);
				texteOptions [0].setVisible(false);
			}

			if (n==40) {  // Retour
				boutons[34].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);

				boutons[40].setVisible(false);
				boutons[43].setVisible(false);

				champNombre [1].setVisible(false);
				texteOptions [1].setVisible(false);
			}

			if (n==41) {  // Retour
				boutons[34].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);

				boutons[41].setVisible(false);
				boutons[44].setVisible(false);
				boutons[46].setVisible(false);

				champNombre [2].setVisible(false);
				texteOptions [2].setVisible(false);			
			}

			if (n==42) {  // Ok
				boutons[34].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);

				boutons[39].setVisible(false);
				boutons[42].setVisible(false);

				champNombre [0].setVisible(false);
				texteOptions [0].setVisible(false);

				String flkfdm0 = champNombre [0].getText();

				if (!utilFenetre.TestNombre(flkfdm0)) {
					System.out.println(flkfdm0);

					f.afficheMessage ("Veuillez entrer un nombre de cases","Entrer un nombre de couleurs",'i');
				}
				else {
					int klgjlkd0 = utilFenetre.convertNombre (flkfdm0);

					if (klgjlkd0<1 || klgjlkd0>500) f.erreurOption("cases",3,500);
					else {
						System.out.println(klgjlkd0);

						p1 = new P1 (f,klgjlkd0,m11,ndco,h,c,clm,heures,minutes,secondes,nombreDePartiesJouées,coupsIllimités,tailleDesPolices);
					}
				}

				metAJourInfos ();
			}

			if (n==43) {  // Ok
				boutons[34].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);


				boutons[40].setVisible(false);
				boutons[43].setVisible(false);

				champNombre [1].setVisible(false);
				texteOptions [1].setVisible(false);

				String flkfdm1 = champNombre [1].getText();

				if (!utilFenetre.TestNombre(flkfdm1)) {
					System.out.println(flkfdm1);

					f.afficheMessage ("Veuillez entrer un nombre de couleurs","Entrer un nombre de couleurs",'i');
				}
				else {
					int klgjlkd1 = utilFenetre.convertNombre (flkfdm1);

					if (klgjlkd1<1 || klgjlkd1>56) f.erreurOption("couleurs",3,56);
					else {
						System.out.println(klgjlkd1);

						int ndco2 = klgjlkd1;

						ndco = ndco2;

						//p1 = new P1(f,n11,m11,h,c,clm,heures,minutes,secondes,ndco2);

						/* Ce bout de code, permet de mettre à jour
						*la taille de p2, qui n'est pas mise à jour par
						*le constructeur de p1.
						*/

						t10 = couleursAleat(ndco);

						actionBT = new BoutonTransparentAction [ndco];

						p2 = new P2 [ndco];

						couleurs3d = new JButton[ndco];

						for (i=0; i<ndco; i++) {
							//System.out.println("i = "+i);		
							p2[i]= new P2();
							actionBT[i] = new BoutonTransparentAction(i);
							add(p2[i]);
							p2[i].addMouseListener(actionBT[i]);
							p2[i].setVisible(false); 
						}

						/*---------------------------------------------------------*/

						System.out.println(ndco);
					}
				}

				metAJourInfos ();
			}


			if (n==44) {  // Ok
				boutons[34].setVisible(true);
				for (i=12; i<18; i++) boutons[i].setVisible(true);
				boutons[48].setVisible(true);

				boutons[41].setVisible(false);
				boutons[44].setVisible(false);
				boutons[46].setVisible(false);

				champNombre [2].setVisible(false);
				texteOptions [2].setVisible(false);

				String flkfdm2 = champNombre [2].getText();

				if (!utilFenetre.TestNombre(flkfdm2)) {
					System.out.println(flkfdm2);

					f.afficheMessage ("Veuillez entrer un nombre de coups","Entrer un nombre de couleurs",'i');
				}
				else {
					int klgjlkd2 = utilFenetre.convertNombre (flkfdm2);

					if (klgjlkd2<1) f.erreurOption("coups",1,100000000);
					else {
						System.out.println(klgjlkd2);

						c = klgjlkd2;

						System.out.println(c);

						tcoups = new int [c+1][n11];

						tabReponses = new int [c+1][n11];

						coups = new Coup [c+1];

						//p1 = new P1(f,n11,m11,h,c,clm,heures,minutes,secondes,ndco);
					}
				}

				metAJourInfos ();
			}

			if (n==45) {  // Retour
				boutons[37].setVisible(false);
				boutons[45].setVisible(false);

				for (i=0; i<3; i++) {
					champTemps[i].setVisible(false);
					texteTemps[i].setVisible(false);
					texteOptions[3].setVisible(false);
				}

				boutons[29].setVisible(true);
				for (i=35; i<37; i++) boutons[i].setVisible(true);
			}

			if (n==46) {  // Activer/Désactiver : nombre de coups illimité
				if (coupsIllimités) {
					coupsIllimités = false;
					boutons[46].setBackground(couleurBouton);
					f.setCoupsIllimités (false);
				}
				else  {
					coupsIllimités = true;
					boutons[46].setBackground(new Color(-16724941));
					f.setCoupsIllimités (true);
				}

				metAJourInfos ();
			}

			if (n==47) { //Pause
				if (!paused) {
					tempsT.suspend();
					paused = true;
					boutons[47].setText("Reprendre");
					pJeu.setVisibleJeuPause(true);
				}
				else {
					paused = false;
					boutons[47].setText("Pause");
					pJeu.setVisibleJeuPause(false);
					tempsT.resume();
				}

				repaint ();
			}

			if (n==48) { //Options graphiques
				TailleDesPolices ftaillesDesPolices = new TailleDesPolices();
			}
		}
	}

	public void ia () {
		int n = n11;

		if (h==1) {
			if (niveauDeLIA==1) {
				for (i=0; i<n11; i++) tcoups[x][i] = (int)(Math.random()*b+a);
			}

			if (niveauDeLIA==2) {
				th4 = iaSMF.iAs1Facile(th4,t4);

				for (i=0; i<th4.length; i++) System.out.println("th4["+i+"] = "+th4[i]);
				for (i=0; i<n11; i++) {
					if (th4[i]>ndco) tcoups[x][i] = ndco;
					else if (th4[i]<a) tcoups[x][i] = a;
					else tcoups[x][i] = th4[i];
				}
			}

			if (niveauDeLIA==3) {
				tcoups[x] = iaCF.ia(t4);
			}
		}

		if (h==2) {
			if (niveauDeLIA==1) {
				for (i=0; i<n11; i++) tcoups[x][i] = (int)(Math.random()*b+a);
			}

			if (niveauDeLIA==2) {
				th4 = iaSMM.iAs1Moyen(t11);

				for (i=0; i<th4.length; i++) System.out.println("th4["+i+"] = "+th4[i]);
				for (i=0; i<n11; i++) {	
					if (th4[i]>ndco) tcoups[x][i] = ndco;
					else if (th4[i]<a) tcoups[x][i] = a;
					else tcoups[x][i] = th4[i];
				}
			}

			if (niveauDeLIA==3) {
				tcoups[x] = iaCM.ia(t11);
			}

		}

		if (h==3) {
			if (niveauDeLIA==1) {
				for (i=0; i<n11; i++) tcoups[x][i] = (int)(Math.random()*b+a);
			}
			
			if (niveauDeLIA==2) {
				for (i=0; i<n11; i++) tcoups[x][i] = (int)(Math.random()*b+a);
			}

			if (niveauDeLIA==3) {
				tcoups[x] = iaCD.ia(r3);
			}
		}

		repaint();

		nouveauCoup (x);
		
		//reDim();

		for (i=0; i<tcoups[x].length; i++) System.out.println("tcoups["+x+"]["+i+"] = "+tcoups[x][i]);

		x++;

		if (h==1) {
			utilJeu.VerifieFacile(t1,th4);
			t4 = utilJeu.VerifieFacileOrdi(t1,th4);
			tabReponses[x-1] = t4;
			for (i=0; i<t4.length; i++) System.out.println("t4["+i+"] = "+t4[i]);
		}

		if (h==2) {
			t11 = utilJeu.VerifieMoyen(a,b,n11,t1,tcoups[x-1]); r1= t11[0]; r2= t11[1];
			
			tabReponses[x-1] = compteReponses2(r1,r2);

			int a6 = (n-(r1+r2));
			
			System.out.print("\nIl y a "+r1+" chiffre");
			
			if (r1>1) System.out.print("s");
			
			System.out.print(" bien place");
			
			if (r1>1) System.out.print("s");
			
			System.out.print(" et "+r2+" chiffre");
			
			if (r2>1) System.out.print("s");
			
			System.out.print(" mal place");
			
			if (r2>1) System.out.print("s");
			
			System.out.print(". Le reste ("+a6+" chiffre");
			
			if (a6>1) System.out.print("s");
			
			System.out.print(") n'est pas dans ");
			
			if (n>1) System.out.print("les solutions");
			
			else System.out.print("la solution");
			
			System.out.println(".");
			
			//Affichage des résultats pour le joueur.	
		}
		
		if (h==3) {
			r3 = utilJeu.VerifieDifficile(a,b,n11,t1,tcoups[x-1]);

			tabReponses[x-1] = compteReponses3(r3);

			System.out.print("\nIl y a "+r3+" chiffre");
			
			if (r3>1) System.out.print("s");
			
			System.out.print(" bien ou mal place");
			
			if (r3>1) System.out.print("s");
			
			System.out.print(" dans ");
			
			if (n>1) System.out.print("les solutions");
			
			else System.out.print("la solution");
			
			System.out.println(".");

			//Affichage des résultats pour le joueur.
		}

		if (coupsIllimités) {
			if (x>c-2) {
				c=c*2;
				
				coups = agrandieTab(coups);
				tcoups = utilFenetre.agrandieTab(tcoups);
				tabReponses = utilFenetre.agrandieTab(tabReponses);
			}							
		}

		if ((x>=c) || (utilJeu.VerifieSolution(t1,tcoups[x-1]))) {
			finJeuIA = true;

			if (clm) {
				paused = false;
				boutons[47].setText("Pause");
				pJeu.setVisibleJeuPause(false);	
			}

			boolean g1 = utilJeu.VerifieSolution(t1,tcoups[x-1]);
			
			if (!g1) {
				System.out.println("\nPerdu.");

				if (clm) {
					tempsT.suspend();

					int tmp10 = calculTemps();

					String s50 = calculTempsS ();

					if (tmp10>0) f.affichePerduContreLaMontre(s50);
					else f.affichePerdu();

					reinitialiseTemps ();
				}
				else {
					f.affichePerdu();
				}

				afficheResultat3 ();								
			}

			if (g1) {
				System.out.println("\n\nC'est gagne !\n");

				int chrono = 0;
				if (clm) chrono = 1;

				utilFichiers.ajouteStat (n11,ndco,m11,h,x,calculTemps()/1000,chrono, false,tailleDesPolices);

				if (clm) {
					tempsT.suspend();

					int tmp10 = calculTemps();

					String s50 = calculTempsS ();

					if (tmp10>0) f.afficheJeuGagneContreLaMontrePlus(x,c,s50);
					else f.afficheJeuGagne(x,c);

					reinitialiseTemps ();
				}
				else {
					f.afficheJeuGagne(x,c);
				}

				attendGangne ();
			}
			
			afficheSolutions(t1);
			
			if (g1) {
				System.out.print("\nCoup");
				if (x>1) System.out.print("s");
				System.out.print(" : "+x+"/"+c+".");
			}
		}
	}

	public void afficheResultat () {
		tcoups[x+1]=t1;

		coups[x+1] = new Coup(x+1,ldPJ);
		box.add(coups[x+1]);
		
		repaint();

		for (i=30; i<33; i++) boutons[i].setVisible(false);
		boutons[33].setVisible(true);

		reDim();
	}

	public void attendGangne () {
		for (i=30; i<33; i++) boutons[i].setVisible(false);
		boutons[33].setVisible(true);

		reDim();
	}

	public void afficheResultat2 () {
		tcoups[x]=t1;
		
		repaint();

		for (i=30; i<33; i++) boutons[i].setVisible(false);
		boutons[33].setVisible(true);

		reDim();
	}

	public void afficheResultat3 () {
		tcoups[x]=t1;

		coups[x] = new Coup(x,ldPJ);
		box.add(coups[x]);
		
		repaint();

		for (i=30; i<33; i++) boutons[i].setVisible(false);
		boutons[33].setVisible(true);

		reDim();
	}

	public void finDuJeu () {
		placementB[0]=145;
		placementB[2]=9;

		nombreDePartiesJouées++;

		if (clm) {
			paused = false;
			boutons[47].setText("Pause");
			pJeu.setVisibleJeuPause(false);	
		}
		
		dessineCarreCouleurs = false;
		
		actb=false;
		abt=false;
		
		for (i=0; i<ndco; i++) p2[i].setVisible(false);
		
		boutons[10].setEnabled(true);
		
		boutons[10].setVisible(false);
		if (clm) boutons[47].setVisible(false);

		for (i=30; i<34; i++) boutons[i].setVisible(false);		
		boutons[10].setVisible(false);

		for (i=0; i<6; i++) boutons[i].setVisible(true);
		
		jeuCommence=false;

		this.remove(pJeu);

		pJeu = new PJeu(f);

		this.add(pJeu);

		//reDim ();
		f.reDim1 ();

		finJeuIA = false;

		tcoups = new int[c+1][n11];
		tabReponses = new int[c+1][n11];

		//pJeu.setVisible(false);
		
		box.setLayout(new BoxLayout(pJeu, BoxLayout.Y_AXIS));

		if (clm) reinitialiseTemps ();

		//reDim ();
		f.reDim1 ();
	}

	public static int [] compteReponses2 (int r1, int r2) {
		int i, k=r1+r2;

		int [] t = new int [n11];

		for (i=0; i<r1; i++) t[i]=1;
		for (i=r1; i<k&&i<t.length; i++) t[i]=2;

		return t;
	}

	public static int [] compteReponses3 (int r3) {
		int i;

		int [] t = new int [n11];

		for (i=0; i<r3&&i<t.length; i++) t[i]=3;

		return t;
	}

	public void nouveauCoup (int n) {
		coups[x+1] = new Coup(n,ldPJ);
		box.add(coups[x+1]);

		JScrollBar bar = jsp1.getVerticalScrollBar();

		bar.setValue(jsp1.getHeight());

		repaint();
	}

	public static Coup [] agrandieTab (Coup [] t) {
		int i;

		Coup [] t1 = new Coup[t.length*2];

		for (i=0; i<t.length; i++) t1[i] = t[i];

		return t1;
	}

	public static int [][] couleursAleat (int n) {
		int i, j,k,l;
		int [] a1 = new int [3];

		int [][] t1 = new int [n][3];
		
		for (i=0; i<t1.length; i++) {
			while (!VerifieDoublons(t1,a1) || (a1[0]==0&&a1[1]==0&&a1[3]==0)) {
				for (j=0; j<3; j++) {
					a1[j] = (int)(Math.random()*256);
				}
			}

			for (k=0; k<a1.length; k++) t1[i][k]=a1[k];
		}

		return t1;
	}

	public void pause () {
		tempsT.suspend();
		paused = true;
		boutons[47].setText("Reprendre");
		pJeu.setVisibleJeuPause(true);
	}

	public void reprendre () {
		paused = false;
		boutons[47].setText("Pause");
		pJeu.setVisibleJeuPause(false);
		tempsT.resume();
	}

	public void reinitialiseTemps () {
		tempsT = new Thread(new Traitement());
		bar.setValue(maxTemps);

		int [] ttemps = new int [3];

		ttemps[0] = heures;
		ttemps[1] = minutes;
		ttemps[2] = secondes;

		temps = utilDate.convertitEnSecondes(ttemps);
	}

	public int calculTemps () {
		int n = (maxTemps-iTemps)*(temps/maxTemps);

		System.out.println("n = "+n);

		return n;
	}

	public String calculTempsS () {
		String s = utilDate.afficheTemps((utilDate.convertitSecondes((calculTemps ())/1000)));

		return s;
	}

	public void commenceTemps (int temps) {
		this.temps = temps;
		tempsT.start();
	}

	class Dors implements Runnable{  
		public void run(){
			int i;

			try {
				for (i=0; i<500; i++) {
					tempsT1.sleep(1);

					if (i%100==0) {
						revalidate ();

						//System.out.println(i);
					}
				}

			}

			catch (InterruptedException  e)  {
				e.printStackTrace();
			}
		}
	}
	
	class Traitement implements Runnable{   
		public void run(){
			for(iTemps=maxTemps; iTemps>-1; iTemps--){
				bar.setValue(iTemps);
				try {
					tempsT.sleep(temps/maxTemps);  
				} catch (InterruptedException  e)  {
					e.printStackTrace();
				}
			}

			jeuCommence = false;

			paused = false;
			boutons[47].setText("Pause");
			pJeu.setVisibleJeuPause(false);	

			if (x<c) f.affichePerduContreLaMontreCoupsRestants (x,c);
			else f.affichePerdu ();

			afficheResultat2 ();

			reinitialiseTemps ();

			//finDuJeu ();
		}    
	}

	class AfficheIA implements Runnable{   
		public void run(){
			while (jeuCommence) {

				try {
					jeuT.sleep(500); 
				} 
				catch (InterruptedException  e)  {
					System.out.println("Erreur avec : jeuT.sleep(500)");
					e.printStackTrace();
				}				

				repaint();

				reDim();
			}
		}    
	}

	public static void afficheSolutions (int[] t){
		System.out.print("\nVoici ");
		
		if (t.length>1) System.out.print("les solutions");

		else System.out.print("la solution");

		System.out.println(" : \n");

		for (int i=0; i<t.length; i++) { System.out.println("Nombre "+(i+1)+" = "+t[i]); }
	}

	public static boolean VerifieDoublons (int [][] t1, int [] t2) {
		int i, j, cmp=0;

		for (i=0; i<t1.length; i++) {
			cmp=0;

			for (j=0; j<t2.length; j++) {
				if (t1[i][j]==t2[j]) cmp++;
			}

			if (cmp==t2.length) return false;
		}

		return true;
	}

	public void dessineCarreCouleurs (Graphics g, int longueur, int h, int f, int getWidth, int getHeight) {
		//int getWidth = this.getWidth();
		//int getHeight = this.getHeight();
		//int longueur = placementB[0]+3;
		//int h = 230;
		//int f = ((getHeight*2+100)/20+15);

		Color gris = new Color(-3355444);

		//Graphics2D g2 = (Graphics2D)g;
		//GradientPaint grad = new GradientPaint(getWidth()/2,getHeight()/2,Color.WHITE,getWidth(),getHeight(),Color.BLACK);

		g.setColor(Color.BLUE);
		g.fillRect((getWidth-tcd)+tcd/2-(longueur)/2-2,(getHeight*2+50)/placementB[2]-55/2+f-2,longueur+4, h+4);
		g.setColor(gris);
		g.fillRect((getWidth-tcd)+tcd/2-(longueur)/2,(getHeight*2+50)/placementB[2]-55/2+f,longueur, h);
		g.setColor(Color.WHITE);
		g.fillRect((getWidth-tcd)+tcd/2-(longueur)/2+2,(getHeight*2+50)/placementB[2]-55/2+f+2,longueur-4, h-4);

		int ndl = 9; //nombre de lignes
		int ndc = 7; //nombre de colonnes

		int hh=0;
		
		for (int i=0; i<ndl; i++) {
			for (int j=0; j<ndc; j++) {

				//t10 = couleursAleat(63);

				Color c5 = new Color(-3355444);

				if (i*ndc+j<ndco) {
					Color rond = new Color(t10[i*ndc+j][0],t10[i*ndc+j][1],t10[i*ndc+j][2]);

					g.setColor(c5);
					g.fillOval((getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2,(getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2,13,13);  // Ombre
					
					g.setColor(rond);
					g.fillOval((getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2,(getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2,13,13);
					g.drawImage(petitPion3d, (getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2, (getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2, 13, 13+1, null);
					p2[hh].setBounds((getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2, (getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2, 13, 13+1);
					hh++;
				}
			}
		}

		/*int fff=0;

		for (int i=0; i<ndl; i++) {
			for (int j=0; j<ndc; j++) {

				//t10 = couleursAleat(63);

				Color c5 = new Color(-3355444);

				if (i*ndc+j<ndco) {
					Color rond = new Color(t10[i*ndc+j][0],t10[i*ndc+j][1],t10[i*ndc+j][2]);

					g.setColor(c5);
					g.fillOval((getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2,(getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2,13,13);  // Ombre
						
					g.setColor(rond);
					g.fillOval((getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2,(getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2,13,13);
					couleurs3d[fff].setBounds((getWidth-tcd)+tcd/2-(longueur)/2+(longueur/(ndc+1))*(j+1)-13/2, (getHeight*2+50)/placementB[2]-55/2+f+(h/(ndl+1))*(i+1)-13/2, 13, 13+1);
					fff++;
				}
			}
		}*/
	}

	public void premierCoupHvsH (Graphics g) {
		int getWidth = f.getWidth();
		int getHeight = getHeight();

		ldPJ = f.getWidth()-tcd-ldpdt;

		//tdjpH taille du JPanel horizontale

		//tcd taille de la colonne droite
		//ndlC nombre de lignes de cases.

		//g.clearRect(0, 0, this.getWidth(), this.getHeight());

		//g.setColor(new Color(-6384846));
		//g.fillRect(ldpdt,0,getWidth-tcd-ldpdt,getHeight);

		pJeu.setBounds(ldpdt,tdpi,ldPJ,getHeight-tdpi);
		pJeu.setPreferredSize(new Dimension(ldPJ,getHeight-tdpi));

		g.setColor(CouleurDuLabel);
		g.fillRect(ldpdt,0,ldPJ,tdpi);

		int adaptL = 8;
		int adaptH = 9;

		label.setBounds(ldpdt+adaptL,adaptH,ldPJ-adaptL,tdpi-adaptH);

		this.setPreferredSize(new Dimension(f.getWidth,(tcvV+10)*ndlC+12));	

		//System.out.println("ok5 "+(++cmp5));
	}

	public void paintComponent (Graphics g) {
		int getWidth = this.getWidth();
		int getHeight = this.getHeight();
		int longueur = placementB[0]+3;
		int h = 230;
		int f = ((getHeight*2+100)/20+15);

		g.clearRect(0,0,getWidth,getHeight);

		g.setColor(Color.green);
		g.fillRect((getWidth-tcd),0,getWidth,getHeight);

		g.drawImage(titreImg,(getWidth-tcd)+tcd/2-196/2,(getHeight*1+100)/14-45/2,196,70,null);

		//g.drawImage(cacheInfo,getWidth-tcd+24,8,16,16,null);

		cacheInfoB.setBounds(getWidth-tcd+24,8,16,16);

		//monLabel.setBounds((getWidth-tcd)+tcd/2-196/2,(getHeight*1+100)/14-45/2,196,70);
		//g.drawImage(bouton3d,(getWidth-tcd)+tcd/2-196/2,(getHeight*1+100)/14-45/2,196,70,null);

		barrePanel.setBounds(0,-5,20,getHeight+6);
		barrePanel.setPreferredSize(new Dimension(20,getHeight+6));

		bar.setPreferredSize(new Dimension(20,getHeight)); 

		for (i=0; i<ndb; i++) {
			if (i==10) boutons[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*2+50)/placementB[2]-55/2+f+h-placementB[1]-2,placementB[0],placementB[1]);
			else if (i==32||i==33)  boutons[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(placementB[i+3])+100)/placementB[2]-50/2+f,placementB[0],placementB[1]*2);
			else if (i==46) boutons[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(placementB[i+3])+100)/placementB[2]-50/2+f,placementB[0],placementB[1]*2);
			//else if (i==15) boutons[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(placementB[i+3])+100)/placementB[2]-50/2+f,placementB[0],placementB[1]*2);
			else boutons[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(placementB[i+3])+100)/placementB[2]-50/2+f,placementB[0],placementB[1]);
			//g.drawImage(bouton3d,(getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(placementB[i+3])+100)/placementB[2]-50/2+f,placementB[0],placementB[1],null);
		}

		for (i=0; i<3; i++) {
			if (i==2) champNombre[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*6+100)/placementB[2]-50/2+f,placementB[0],placementB[1]);
			else champNombre[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*5+100)/placementB[2]-50/2+f,placementB[0],placementB[1]);
			champTemps[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(i+4)+100)/placementB[2]-50/2+f,placementB[0]/3,placementB[1]);

			texteTemps[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2+placementB[0]/3+10,(getHeight*(i+4)+100)/placementB[2]-50/2+f,placementB[0],placementB[1]);
			if (i==2) texteOptions[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(3)+100)/placementB[2]-50/2+f,placementB[0]+10,placementB[1]*4);
			else texteOptions[i].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(2)+100)/placementB[2]-50/2+f,placementB[0]+10,placementB[1]*4);
		}

		texteOptions[3].setBounds((getWidth-tcd)+tcd/2-placementB[0]/2,(getHeight*(1)+100)/placementB[2]-50/2+f,placementB[0]+15,placementB[1]*4);

		if (dessineCarreCouleurs) {
			dessineCarreCouleurs(g,longueur,h,f,getWidth,getHeight);
		}

		premierCoupHvsH (g);
	}

	public void reDim () {
		f.reDim();
	}

	public boolean getJeuCommence () {
		return jeuCommence;
	}
}

# Scores.java

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/*Affiche les scores et les statistiques.*/

public class Scores extends JFrame {
	
	Container p1;
	
	boolean b1;
	UtilFichiers utilFichiers;

	public Scores (int i1, int i2, int i3, boolean classement, int tailleDesPolices) {
		super("Scores et statistiques");

		int i,j;

		utilFichiers = new UtilFichiers ();

		String [][] s;

		s = utilFichiers.litStat1Fichier ();
				
		p1 = new Container (this,s,classement,i1,i2,i3,tailleDesPolices);
		
		this.add(p1);
	
		this.setMinimumSize(new Dimension(750, 400));
		//this.setPreferredSize(new Dimension(600, 300));
		this.setLocationRelativeTo(null);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setVisible(true);		
	}
	
	public void reDim1 () {
		boolean dd = (getExtendedState()==this.MAXIMIZED_BOTH);

		int getWidth = this.getWidth();
		int getHeight = this.getHeight();

		resize(new Dimension(getWidth+1,getHeight+1));
		resize(new Dimension(getWidth,getHeight));

		if (dd) {
			this.setExtendedState(JFrame.MAXIMIZED_BOTH);
			b1 = true;
		}
	}

	public void reDim () {
 		this.revalidate();
	}

	public void afficheMessage (String message, String titre, char type) {
		JOptionPane fOptions = new JOptionPane();

		if (type=='i') fOptions.showMessageDialog(this, message,titre, JOptionPane.PLAIN_MESSAGE);
		else if (type=='w') fOptions.showMessageDialog(this, message,titre, JOptionPane.WARNING_MESSAGE);
		else fOptions.showMessageDialog(this, message,titre, JOptionPane.PLAIN_MESSAGE);
	}
	
	public int effacerTout () {
		JOptionPane fOptions = new JOptionPane();

		return fOptions.showConfirmDialog(this,"Voulez-vous vraiment effacer les scores et les statistiques ?","Effacer les scores et les statistiques ?",JOptionPane.WARNING_MESSAGE);
	}
	
	public static void main (String [] args) {

		int i,j;

		//String [][] s = new String [35][9];
		
		//for (int i=0; i<s.length; i++)for (int j=0; j<s[i].length; j++) s[i][j] = "bla";
		
		//s[0][6] = "blablablablablbalbal";

		//for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) System.out.println("s["+i+"]["+j+"] = "+s[i][j]);
		//for (i=0; i<s1.length; i++) System.out.println("s1["+i+"] = "+s1[i]);
		
		Scores f = new Scores (4,4,1,false,12);
	}
}

class Container extends JPanel {
	Scores f;
	Clique [] clique;
	int i;
	int tailleColonne;
	JScrollPane jsp;
	Color couleur;
	Color couleurDunBouton;
	Color couleurBouton;
	Color couleurBoutonSelected;
	CliqueSouris cliquePanel;

	boolean toutAfficher;
	
	static UtilFichiers utilFichiers;
	static UtilDate utilDate;
	
	int tdtH; //taille horizontale  du Tableau
	int tdtV; //taille verticale du Tableau		
	JTextArea [] label;
	
	JTextArea [] label2;
	
	JTextField [] champTexte;
	
	JButton [] boutons;
	
	JComboBox [] choix;
	
	boolean selected;
	
	TabScores tabScores;
	
	String [][] s; // Tableau des scores
	String [][] s7; // Tableau des scores
	String [] s1;
	String [] s2;
	
	String [] s4;
	String [] s5;

	String [][] s8;
	
	public Container (Scores f, String [][] s, boolean classement, int i1, int i2, int i3, int tailleDesPolices) {
		super ();

		int i,j;

		int length = 8;

		if (s.length>0) length = s[0].length; 

		s8 = new String [s.length][length];

		for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) {
			s8[i][j]=s[i][j]+"";
		}

		//System.out.println ("i1 = "+i1+"\ni2 = "+i2+"\ni3 = "+i3);

		//if (classement) s = utilFichiers.classTab3val(s,i1,i2,i3);

		couleurDunBouton = couleurBouton = UIManager.getColor("Button.background"); // attribution e la couleur d'origine des boutons (classe swing).
		
		utilFichiers = new UtilFichiers ();
		utilDate = new UtilDate ();
		
		cliquePanel = new CliqueSouris(1);
		
		this.addMouseListener(cliquePanel);
		
		this.f = f;
		
		int tdtH=10; //taille horizontale  du Tableau
		int tdtV=10; //taille verticale du Tableau

		s = utilFichiers.classTabDateD (s); 

		this.s = s; // Tableau des scores	

		classTabS ();
		
		//System.out.println("tailleColonne = "+tailleColonne);
		
		reDim ();
				
		tabScores = new TabScores();
		tabScores.setPreferredSize(new Dimension(tdtH,tdtV));
		this.add(tabScores);
						
		selected = false;
		
		couleurBouton = new Color(-2631721);
		couleurBoutonSelected = new Color(-6710887);
		
		champTexte = new JTextField [2];
		
		boutons = new JButton [7];
		
		clique = new Clique [7];
		
		label  = new JTextArea [5];
		
		label2 = new JTextArea [14];
				
		choix = new JComboBox [3];
				
		for (i=0; i<champTexte.length; i++) {
			champTexte [i]= new JTextField ();
			this.add(champTexte[i]);
		}
		
		Font font = new Font("Serif", Font.PLAIN, 16);
		if (tailleDesPolices!=12) font = new Font("Serif", Font.PLAIN, 16+(tailleDesPolices-12));
		
		couleur = new Color(238,177,88);
		
		s1 = nommeLabel (5);
		
		for (i=0; i<label.length; i++) {		
			label [i] = new JTextArea ();
			label  [i].setText(s1[i]);
			label  [i].setFont(font);
			label  [i].setEditable(false);
			label  [i].setBackground(couleur);
			label  [i].setForeground(Color.BLACK);
			label  [i].setEditable(false);
			label  [i].setWrapStyleWord(true);
			this.add(label [i]);
		}
		
		s4 = nommeStats (7);

		String [] s6 = new String [14];

		for (i=0; i<7; i++) s6 [i] = s4 [i];

		s4 = new String [14];

		for (i=0; i<7; i++) s4 [i] = s6 [i];

		s5 = attributStats (7,s);

		//for (i=0; i<7; i++) System.out.println("s5["+i+"] = "+s5[i]);
		
		for (i=0; i<7; i++) s4 [i+7] = s5 [i];
		
		for (i=0; i<label2.length; i++) {		
			label2 [i] = new JTextArea ();
			label2  [i].setText(s4[i]);
			label2  [i].setFont(font);
			label2  [i].setEditable(false);
			label2  [i].setBackground(new Color(-6710887));
			//label2  [i].setBackground(couleur);
			label2  [i].setForeground(Color.WHITE);
			label2  [i].setEditable(false);
			label2  [i].setWrapStyleWord(true);
			this.add(label2 [i]);
		}
		
		s2 = nomDesBoutons (7);

		font = new Font("Serif", Font.PLAIN, 16);
		if (tailleDesPolices!=12) font = new Font("Serif", Font.PLAIN, tailleDesPolices);
			
		for (i=0; i<boutons.length; i++) {	
			boutons [i]= new JButton(s2[i]);
			if (tailleDesPolices!=12) boutons [i].setFont(font);

			clique [i] = new Clique(i);

			boutons [i].addActionListener(clique [i]);
			this.add(boutons [i]);
		}
		
		if (!selected) {
			boutons [2].setBackground(couleurBoutonSelected);
			boutons [3].setBackground(couleurBouton);

			for (i=0; i<label2.length; i++) label2 [i].setVisible(false);	
		}
		else  {
			boutons [3].setBackground(couleurBoutonSelected);
			boutons [2].setBackground(couleurBoutonSelected);
		}
		
		for (i=0; i<choix.length; i++) {
			choix [i] = new JComboBox();
			if (tailleDesPolices!=12) choix [i].setFont(font);
			this.add(choix [i]);			
		}
		
		choix [0].addItem("Nombre de cases");	
		choix [0].addItem("Nombre de couleurs");
		choix [0].addItem("Mode de jeu");
		choix [0].addItem("Difficulté");
		choix [0].addItem("Score");
		choix [0].addItem("Temps");
		choix [0].addItem("Chronomètre");
		choix [0].addItem("Date");
			
		choix [1].addItem("Croissant         ");
		choix [1].addItem("Décroissant       ");
		
		choix [2].addItem("Humain contre humain");
		choix [2].addItem("Ordinateur contre humain");
		choix [2].addItem("Humain contre ordinateur");
		choix [2].addItem("Ordinateur contre ordinateur");

		boutons[4].setBackground(new Color(-16724941));
		toutAfficher = true;
		
		this.f = f;
	}

	public void classTabS () {
		int i,j;

		int length = 8;

		if (s.length>0) length = s[0].length; 

		s7 = new String [s.length][length];

		for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) {
			s7[i][j]=s[i][j]+"";
		}

		//for (i=0; i<s7.length; i++) for (j=0; j<s7[i].length; j++) System.out.println("s7["+i+"]["+j+"] = "+s7[i][j]);
	
		tailleColonne = compteLengthLigneEtColonne (s)*8;

		for (i=0; i<s7.length; i++) { // modes de jeu
			if (s7[i][3].equals("1")) s7[i][3] = "Humain contre humain";
			if (s7[i][3].equals("2")) s7[i][3] = "Ordinateur contre humain";
			if (s7[i][3].equals("4")) s7[i][3] = "Humain contre ordinateur";
			if (s7[i][3].equals("4")) s7[i][3] = "Ordinateur contre ordinateur";
		}

		for (i=0; i<s7.length; i++) { // difficulté
			if (s7[i][4].equals("1")) s7[i][4] = "Facile";
			if (s7[i][4].equals("2")) s7[i][4] = "Moyen";
			if (s7[i][4].equals("3")) s7[i][4] = "Difficile";
		}

		for (i=0; i<s7.length; i++) { // modes de jeu
			int [] t5 = new int [3];

			if (s7[i][7].equals("1")) t5 = utilDate.convertitSecondes(utilFichiers.convertNombre(s7[i][6]));

			s7[i][6] = "";

			if (t5[0]>0) s7[i][6]=t5[0]+" h ";
			if (t5[1]>0) s7[i][6]=s7[i][6]+t5[1]+" min ";

			s7[i][6] = s7[i][6]+t5[2]+" s";

			//s7[i][6] = t5[0]+" h "+t5[1]+" min "+t5[2]+" s";
		}

		for (i=0; i<s7.length; i++) { // chronomètre actif ou non.
			if (s7[i][7].equals("1")) s7[i][7] = "Activé";
			if (s7[i][7].equals("0")) {
				s7[i][6] = "-";
				s7[i][7] = "Désactivé";
			}
		}
	}
	
	class CliqueSouris implements MouseListener {
		int n;
		
		public CliqueSouris(int n) {
				this.n = n;
		}
		
		public void mouseClicked(MouseEvent e) {
				if (n==1) { //panel
					repaint ();
					
					reDim();
				}
		}
		
		public void mouseEntered(MouseEvent e) {
			System.out.print("");
		}
		
		public void mouseExited(MouseEvent e) {
			System.out.print("");
		}
		
		public void mousePressed(MouseEvent e) {
			System.out.print("");
		}
		
		public void mouseReleased(MouseEvent e) {
			System.out.print("");
		}
	}
	
	class TabScores extends JPanel {
		int i;
		
		Jtableau table;
		String [] entetes;
		String [][] donnees;
		CliqueSouris cliquePanel;

		public TabScores() {
						
			cliquePanel = new CliqueSouris(1);
		
			this.addMouseListener(cliquePanel);
						
				donnees = s7;
				
				entetes = new String [9]; 

				entetes [0] = "Nom du joueur";
				entetes [1] = "Nombre de cases";
				entetes [2] = "Nombre de couleurs";
				entetes [3] = "Mode de jeu";
				entetes [4] = "Difficulté";
				entetes [5] = "Score (nombre de coups)";
				entetes [6] = "Temps";
				entetes [7] = "Chronomètre actif ou non";
				entetes [8] = "Date";


				/*j+":"+n+":"+ndco+":"+m+":"+d+":"+score+":"+temps+":"+chrono+":"+date+":"*/


				table = new Jtableau(donnees, entetes);
				
				table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
																	
				jsp = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
																
				this.add(jsp);
				
				//this.add(table);
		}

		public void metAJourTab () {
				//table.getModel().fireTableDataChanged();
		}
		
		public void paintComponent (Graphics g) {
			int getWidth = this.getWidth();
			int getHeight = this.getHeight();
						
			this.setPreferredSize(new Dimension(tdtH,tdtV));
			//System.out.println("OK1 tdtH,tdtV"+tdtH+"\n"+tdtV);
			//table.setPreferredSize(new Dimension(getWidth,getHeight));
			
			int tailleColonneF=tailleColonne;
			
			if (getWidth/9>tailleColonne) tailleColonneF = getWidth/9;
			
			for (i=0; i<9; i++) table.getColumnModel().getColumn(i).setPreferredWidth(tailleColonneF);
			
			jsp.setPreferredSize(new Dimension(getWidth,getHeight));
			jsp.setBounds(0,0,getWidth,getHeight);
		}
		
	}

	class Jtableau extends JTable{
		public Jtableau(String [][] o, String[] e) {
			super(o, e);
		} 
		
		public boolean isCellEditable(int row, int column) {
			return false;
		}
	}
	
	public static String [] nommeStats (int n) {
		int i;
		
		String [] s = new String [n];
		
		s[0]="Nombre de parties \ngagnées : ";
		s[1]="Nombre de parties \njouées par \nl'ordinateur : ";
		s[2]="Nombre de parties \njouées par des \njoueurs humains : ";
		s[3]="Nombre de parties \njouées en mode \ncontre la montre : ";
		s[4]="Nombre de parties \njouées en mode \nhumain contre humain : ";
		s[5]="Nombre de parties \njouées en mode \nordinateur contre humain : ";
		s[6]="Nombre de parties \njouées en mode \nhumain contre ordinateur : ";

		return s;		
	}
	
	public String [] attributStats (int n, String [][] s) {
		int i,j;
		
		String [] s1 = new String [n];
		
		s1[0]=s8.length+"";
		s1[1]=(compteMode(s8,3)+compteMode(s8,4))+"";
		s1[2]=(compteMode(s8,1)+compteMode(s8,2))+"";
		s1[3]=compteCLM(s)+"";
		s1[4]=compteMode(s8,1)+"";
		s1[5]=compteMode(s8,2)+"";
		s1[6]=compteMode(s8,3)+"";
		
		return s1;		
	}
	
	public static int compteMode (String [][] s, int n) {
		int i, a=0, cmp=0;

		for (i=0; i<s.length; i++) {
			if (utilFichiers.TestNombre(s[i][3])) cmp = utilFichiers.convertNombre(s[i][3]);
			else {
				System.out.println("compteMode dit : Erreur");
				System.out.println("s[i][1] : "+s[i][1]);
				return -1;
			}

			if (cmp==n) a++;
		}

		return a;
	}

	public static int compteCLM (String [][] s) {
		int i, a=0, cmp=0;

		for (i=0; i<s.length; i++) {
			if (utilFichiers.TestNombre(s[i][7])) cmp = utilFichiers.convertNombre(s[i][7]);
			else {
				System.out.println("compteMode dit : Erreur");
				return -1;
			}

			if (cmp==1) a++;
		}

		return a;
	}
		
	public static String [] nomDesBoutons (int n) {
		int i;
		
		String [] s = new String [n];
		
		s[0]="Ok";
		s[1]="Ok";
		s[2]="Scores";
		s[3]="Statistques";
		s[4]="Tout afficher";
		s[5]="Ok";
		s[6]="Effacer tout";
		
		return s;		
	}
	
	public static String [] nommeLabel (int n) {
		int i;
		
		String [] s = new String [n];
		
		s[0]="Classer les \nscores selon le :";
		s[1]="par ordre :";
		s[2]="Nombre de \ncases :";
		s[3]="Mode de \njeu :";
		s[4]="Nombre de \ncouleurs :";
		
		return s;	
	}
	
	public void paintComponent (Graphics g) {
		int getWidth = this.getWidth();
		int getHeight = this.getHeight();
		
		g.setColor(couleur);	
		g.fillRect(0,0,getWidth,getHeight);

		boutons[0].setBounds(getWidth/45*32,getHeight/100*(2),120,35);
		boutons[1].setBounds(getWidth/100*85,getHeight/100*22,120,35);
		
		int thbc = getWidth/8; //taille horizontale des boutons de choix
		int thtbc = 99; //taille horizontale du texte des boutons de choix
		if (thbc<thtbc) thbc = thtbc;
		
		for (i=2; i<4; i++) boutons[i].setBounds(getWidth/45*1,getHeight/50*(16+(i-2)*17),thbc,getHeight/3);
		
		for (i=4; i<7; i++) boutons[i].setBounds(getWidth/30*(7+(i-4)*7),getHeight/14*9+getHeight/3-35,130,35);
		
		label [2].setBounds(getWidth/100*2,getHeight/100*20,70,25*2);
		champTexte [0].setBounds(getWidth/100*13,getHeight/100*23,50,25);
		label [3].setBounds(getWidth/100*21,getHeight/100*20,70,25*2);
		choix [2].setBounds(getWidth/100*31,getHeight/100*23,191,25);
		label [4].setBounds(getWidth/100*59,getHeight/100*20,70,25*2);
		champTexte [1].setBounds(getWidth/100*71,getHeight/100*23,50,25);
		
		label [0].setBounds(getWidth/45*1,getHeight/100*1,117,25*2);
		choix [0].setBounds(getWidth/45*9,getHeight/100*3,143,25);
		label [1].setBounds(getWidth/45*19,getHeight/100*3,65,25*2);
		choix [1].setBounds(getWidth/45*24,getHeight/100*3,118,25);

		label2 [0].setBounds(getWidth/100*19,getHeight/50*(17),17*7,25*2);
		label2 [1].setBounds(getWidth/100*19,getHeight/50*(17+7),17*7,23*3);
		label2 [2].setBounds(getWidth/100*19,getHeight/50*(17+16),17*7,23*3);
		label2 [3].setBounds(getWidth/100*43,getHeight/50*(17),17*7,25*3);
		label2 [4].setBounds(getWidth/100*43,getHeight/50*(17+11),20*7,25*3);
		label2 [5].setBounds(getWidth/100*71,getHeight/50*(17),23*7,25*3);
		label2 [6].setBounds(getWidth/100*71,getHeight/50*(17+11),23*7,25*3);

		label2 [7].setBounds(getWidth/100*36,getHeight/50*(17)+25-1,5*7,25);
		label2 [8].setBounds(getWidth/100*36,getHeight/50*(17+7)+25*3-25-4,5*7,25);
		label2 [9].setBounds(getWidth/100*36,getHeight/50*(17+16)+25*2-5,5*7,23);
		label2 [10].setBounds(getWidth/100*64,getHeight/50*(17)+25*2-4,5*7,25);
		label2 [11].setBounds(getWidth/100*64,getHeight/50*(17+11)+25*2-4,5*7,25);
		label2 [12].setBounds(getWidth/100*95,getHeight/50*(17)+25*2-5,5*7,25);
		label2 [13].setBounds(getWidth/100*95,getHeight/50*(17+11)+25*2-4,5*7,25);
		
		tdtH = getWidth-getWidth/100*17-15; //taille horizontale  du Tableau
		tdtV = getHeight-getHeight/50*(16)-15-45; //taille verticale du Tableau
		
		//System.out.println("tdtH,tdtV"+tdtH+"\n"+tdtV);
				
		tabScores.setSize(new Dimension(tdtH,tdtV));
		tabScores.setBounds(getWidth/100*17,getHeight/50*(16),tdtH,tdtV);
		
		if (!selected) {
			g.setColor(new Color(-6710887));	
			g.fillRect(getWidth/100*17,getHeight/50*(16),tdtH,tdtV);
		}
	}
		
	class Clique implements ActionListener {
		int n;
		
		int i,j;

		public Clique(int n) {
			this.n = n;
		}
		public void actionPerformed(ActionEvent e) {
			if (n==0) { //Ok
				//System.out.println(choix [0].getSelectedIndex());
				//System.out.println(choix [1].getSelectedIndex());

				int choic1 = choix [0].getSelectedIndex();
				choic1++;

				int choic2 = choix [1].getSelectedIndex();

				if (choic1==6) {
					if (choic2==1) s = utilFichiers.classTempsD (s); 
					if (choic2==0) s = utilFichiers.classTempsC (s);
				}


				if (choic1==8) {
					if (choic2==1) s = utilFichiers.classTabDateD (s); 
					if (choic2==0) s = utilFichiers.classTabDateC (s);
				}

				else {
					if (choic2==1) s = utilFichiers.classTabD (s,choic1);
					if (choic2==0) s = utilFichiers.classTabC (s,choic1);
				}

				classTabS ();

				//for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) System.out.println("s["+i+"]["+j+"] = "+s[i][j]);

				remove(tabScores);
				tabScores = new TabScores();
				tabScores.setPreferredSize(new Dimension(tdtH,tdtV));
				add(tabScores);

				selected = true;
				boutons [2].setBackground(couleurBoutonSelected);
				boutons [3].setBackground(couleurBouton);
				for (i=0; i<label2.length; i++) label2 [i].setVisible(false);

				//boutons[4].setBackground(couleurDunBouton);
										
				repaint ();

				reDim ();
			}
			
			if (n==1) { //Ok
				//System.out.println(champTexte [0].getText());
				//System.out.println(choix [2].getSelectedIndex());
				//System.out.println(champTexte [1].getText());

				String ss1 = champTexte [0].getText();
				int nn1 = choix [2].getSelectedIndex();
				nn1++;
				String ss2 = champTexte [1].getText();

				//System.out.println(ss1);
				//System.out.println(nn1);
				//System.out.println(ss2);

				if (ss1.equals("") || ss2.equals("")) f.afficheMessage("Veuillez entrer un entier.","Entrez un entier.",'w');
				else if (!utilFichiers.TestNombre(ss1) || !utilFichiers.TestNombre(ss2)) f.afficheMessage("Veuillez entrer un entier.","Entrez un entier.",'w');
				else {
					s = utilFichiers.classTab3val(s8,utilFichiers.convertNombre(ss1),utilFichiers.convertNombre(ss2),nn1);

					classTabS ();

					//for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) System.out.println("s["+i+"]["+j+"] = "+s[i][j]);
					//for (i=0; i<s7.length; i++) for (j=0; j<s7[i].length; j++) System.out.println("s7["+i+"]["+j+"] = "+s7[i][j]);

					remove(tabScores);
					tabScores = new TabScores();
					tabScores.setPreferredSize(new Dimension(tdtH,tdtV));
					add(tabScores);

					selected = true;
					boutons [2].setBackground(couleurBoutonSelected);
					boutons [3].setBackground(couleurBouton);
					for (i=0; i<label2.length; i++) label2 [i].setVisible(false);

					boutons[4].setBackground(couleurDunBouton);
					toutAfficher = false;
										
					repaint ();

					reDim ();
				}
			}
			
			if (n==2) { //Score
				selected = true;
				boutons [2].setBackground(couleurBoutonSelected);
				boutons [3].setBackground(couleurBouton);

				for (i=0; i<label2.length; i++) label2 [i].setVisible(false);
				
				jsp.setVisible(true);
				
				repaint ();
			}
			
			if (n==3) { //Statistiques
				selected = false;
				boutons [3].setBackground(couleurBoutonSelected);
				boutons [2].setBackground(couleurBouton);

				for (i=0; i<label2.length; i++) label2 [i].setVisible(true);
				
				jsp.setVisible(false);
				
				repaint ();
			}

			if (n==4) { //Tout afficher
					if (!toutAfficher) {
						toutAfficher = true;

						int length = 8;

						if (s8.length>0) length = s8[0].length; 

						s = new String [s8.length][length];

						for (i=0; i<s8.length; i++) for (j=0; j<s8[i].length; j++) {
							s[i][j]=s8[i][j]+"";
						}
	
						classTabS ();
	
						remove(tabScores);
						tabScores = new TabScores();
						tabScores.setPreferredSize(new Dimension(tdtH,tdtV));
						add(tabScores);
	
						selected = true;
							boutons [2].setBackground(couleurBoutonSelected);
						boutons [3].setBackground(couleurBouton);
						for (i=0; i<label2.length; i++) label2 [i].setVisible(false);
	
						boutons[4].setBackground(new Color(-16724941));
			
						repaint ();
	
						reDim ();
					}
			}
			
			if (n==5) { //Ok
				f.dispose();
			}
			
			if (n==6) { //Effacer tout
				int g = f.effacerTout ();
				
				if (g==0) {
					File ff1 = new File ("Sauvegardes"+File.separatorChar+"Statistiques.txt");

					ff1.delete ();

					f.afficheMessage("Tous les scores et les statistiques ont été supprimés.","Scores et statistiques supprimés.",'i');

					s = new String [0][0];

					s5 = attributStats (7,s);

					//for (i=0; i<7; i++) System.out.println("s5["+i+"] = "+s5[i]);
		
					for (i=0; i<7; i++) s4 [i+7] = s5 [i];

					for (i=0; i<label2.length; i++) label2  [i].setText(s4[i]);				

					classTabS ();

					remove(tabScores);
					tabScores = new TabScores();
					tabScores.setPreferredSize(new Dimension(tdtH,tdtV));
					add(tabScores);

					if (!selected) jsp.setVisible(false);
										
					repaint ();

					reDim ();
				}
			}
		}
	}
	
	public static int compteLengthLigneEtColonne (String [][] s) {
		int i, b=0, cmp=0;
		
		for (i=0; i<s.length; i++){
			cmp = compteLengthLigne (s[i]);
			if (cmp>b) b = cmp;				
		}
		
		return b;
	}
	
	public static int compteLengthLigne (String [] s) {
		int i, b=0, cmp=0;
		
		for (i=0; i<s.length; i++) {
			cmp = s[i].length();
			
			if (cmp>b) {
				b=cmp;
			}
		}
		
		return b;
	}
	
	public void reDim () {
		f.reDim ();
	}
}

# UtilDate.java

import java.util.Date;

class UtilDate {
	public static void main (String [] args){
		//CompteSeconde ();

		Date date = new Date ();

		String d=date.toString();

		System.out.println(d);

		System.out.println("Nous sommes le "+convertJour(str(d,0,3))+" "+convertNombre(str(d,8,10))+" "+convertMois(str(d,4,7))+" "+convertNombre(str(d,24,29))+".");

		System.out.println(convertitDateNombres ());
	}

	public static String afficheTemps (int [] t) {
		String s = t[0]+" h "+t[1]+" min "+t[2]+" s";

		return s;
	}

	public static int [] convertitSecondes (int secondes) {
		int tmp = secondes % 3600; 

		int [] temps = new int [3];

		temps [0] = (secondes-tmp)/3600; 

		temps[2] = tmp%60; 

		temps[1] = (tmp-temps[2])/60;

		//temps[0] : heures

		//temps[1] : minutes

		//temps[2] : secondes

		return temps;
	}	

	public static int convertitEnSecondes (int [] t) {
		int s = t[0]*3600+t[1]*60+t[2];

		return s;
	}

	public static int convertitEnSecondesBis (int h, int min, int s) {
		int s1 = h*3600+min*60+s;

		return s1;
	}

	public static boolean compareDateMax (String d1, String d2) { /*11/11/1111 55 h 55 min 55 s*/
		int a1,j1,mo1,h1,mi1,s1;
		int a2,j2,mo2,h2,mi2,s2;

		j1 = convertNombre(str(d1,0,2));
		j2 = convertNombre(str(d2,0,2));

		mo1 = convertNombre(str(d1,3,5));
		mo2 = convertNombre(str(d2,3,5));

		a1 = convertNombre(str(d1,6,10));
		a2 = convertNombre(str(d2,6,10));

		h1 = convertNombre(str(d1,11,13));
		h2 = convertNombre(str(d2,11,13));

		mi1 = convertNombre(str(d1,16,18));
		mi2 = convertNombre(str(d2,16,18));

		s1 = convertNombre(str(d1,23,25));
		s2 = convertNombre(str(d2,23,25));

		int ss1 = h1*3600+mi1*60+s1;
		int ss2 = h2*3600+mi2*60+s2;

		int [][] t = new int [2][7];

		if (a1!=a2) return (a1>a2);
		else if (mo1!=mo2) return (mo1>mo2);
		else if (j1!=j2) return (j1>j2);
		else if (ss1!=ss2) return (ss1>ss2);
		else return true;
	}

	public static boolean compareDateMin (String d1, String d2) { /*11/11/1111 55 h 55 min 55 s*/
		int a1,j1,mo1,h1,mi1,s1;
		int a2,j2,mo2,h2,mi2,s2;

		j1 = convertNombre(str(d1,0,2));
		j2 = convertNombre(str(d2,0,2));

		mo1 = convertNombre(str(d1,3,5));
		mo2 = convertNombre(str(d2,3,5));

		a1 = convertNombre(str(d1,6,10));
		a2 = convertNombre(str(d2,6,10));

		h1 = convertNombre(str(d1,11,13));
		h2 = convertNombre(str(d2,11,13));

		mi1 = convertNombre(str(d1,16,18));
		mi2 = convertNombre(str(d2,16,18));

		s1 = convertNombre(str(d1,23,25));
		s2 = convertNombre(str(d2,23,25));

		int ss1 = h1*3600+mi1*60+s1;
		int ss2 = h2*3600+mi2*60+s2;

		int [][] t = new int [2][7];

		if (a1!=a2) return (a1<a2);
		else if (mo1!=mo2) return (mo1<mo2);
		else if (j1!=j2) return (j1<j2);
		else if (ss1!=ss2) return (ss1<ss2);
		else return true;
	}  

	public static String captureMot (String s, int a, char c) {
		int i, slength = s.length();

		String s0 = "";

		for (i=a; (s.charAt(i)!=c && i<slength); i++) s0=s0+s.charAt(i)+"";

		return s0;
	}

	public static int captureMotRef (String s, int a, char c) {
		int i, slength = s.length();

		for (i=a; (s.charAt(i)!=c && i<slength); i++) System.out.print("");

		return i;
	}

	public static int compteOccurence (String s, char c) {
		int i, slength = s.length(), q=0;

		for (i=0; i<slength; i++) if (s.charAt(i)==c) q++;

		return q;
	}

	public static String convertitDateNombres () {
		Date date = new Date ();
		String d=date.toString();

		String s="";
		if (convertNombre(str(d,8,10))<10) s=s+"0";
		s=s+convertNombre(str(d,8,10));

		s=s+"/";

		if (convertMoisInt(str(d,4,7))<10) s=s+"0";
		s=s+convertMoisInt(str(d,4,7));

		s=s+"/";

		s=s+convertNombre(str(d,24,29))+" ";

		if (date.getHours()<10) s=s+"0";
		s=s+date.getHours()+" h ";

		if (date.getMinutes()<10) s=s+"0";
		s=s+date.getMinutes()+" min ";

		if (date.getSeconds()<10) s=s+"0";
		s=s+date.getSeconds()+" s";

		return s;
	}

	public static void CompteSeconde(){
		Date date;
		String d="";
		int n=0, n1=0;

		while (true){
			date = new Date ();
			d = date.toString();

			n1=convertNombre(str(d,17,19));
			
			if (n1!=n){
				n=n1;
				System.out.println(n);
			}
		}
	}

	public static String convertJour(String s){
		String a="";

		if (s.equals("Mon")) a="Lundi";
		if (s.equals("Tue")) a="Mardi";
		if (s.equals("Wed")) a="Mercredi";
		if (s.equals("Thu")) a="Jeudi";
		if (s.equals("Fri")) a="Vendredi";
		if (s.equals("Sat")) a="Samedi";
		if (s.equals("Sun")) a="Dimanche";

		return a;
	}

	public static String convertMois(String s){
		String a="";

		if (s.equals("Jan")) a="Janvier";
		if (s.equals("Feb")) a="Fevrier";
		if (s.equals("Mar")) a="Mars";
		if (s.equals("Apr")) a="Avril";
		if (s.equals("May")) a="Mai";
		if (s.equals("Jun")) a="Juin";
		if (s.equals("Jul")) a="Juillet";
		if (s.equals("Aug")) a="Aout";
		if (s.equals("Sep")) a="Septembre";
		if (s.equals("Oct")) a="Octobre";
		if (s.equals("Nov")) a="Novembre";
		if (s.equals("Dec")) a="Decembre";

		return a;
	}

	public static int convertMoisInt(String s){
		int n=0;

		if (s.equals("Jan")) n=1;
		if (s.equals("Feb")) n=2;
		if (s.equals("Mar")) n=3;
		if (s.equals("Apr")) n=4;
		if (s.equals("May")) n=5;
		if (s.equals("Jun")) n=6;
		if (s.equals("Jul")) n=7;
		if (s.equals("Aug")) n=8;
		if (s.equals("Sep")) n=9;
		if (s.equals("Oct")) n=10;
		if (s.equals("Nov")) n=11;
		if (s.equals("Dec")) n=12;

		return n;
	}

	public static int convertNombre (String s){
		int i, a = s.length(), c=0, d=0;

		if (s.equals("")) {
			System.out.println("\n\n//Le string est null : convertion impossible.\n");
		}

		if (a==1) {
			if (s.charAt(0)=='0') c=0;
			if (s.charAt(0)=='1') c=1;
			if (s.charAt(0)=='2') c=2;
			if (s.charAt(0)=='3') c=3;
			if (s.charAt(0)=='4') c=4;
			if (s.charAt(0)=='5') c=5;
			if (s.charAt(0)=='6') c=6;
			if (s.charAt(0)=='7') c=7;
			if (s.charAt(0)=='8') c=8;
			if (s.charAt(0)=='9') c=9;

			d=c;
		}else {
			for (i=0; i<a; i++) {
				c=-1;
				if (s.charAt(i)=='0') c=0;
				if (s.charAt(i)=='1') c=1;
				if (s.charAt(i)=='2') c=2;
				if (s.charAt(i)=='3') c=3;
				if (s.charAt(i)=='4') c=4;
				if (s.charAt(i)=='5') c=5;
				if (s.charAt(i)=='6') c=6;
				if (s.charAt(i)=='7') c=7;
				if (s.charAt(i)=='8') c=8;
				if (s.charAt(i)=='9') c=9;
	
				if (c!=-1) d=d*10+c;	
			}
		}

		if (d<0) System.out.println("\n//Le nombre est trop grand");

		return d;

	}

	public static String str(String s, int a, int b){
		String s1="";

		for (int i=a; i<b; i++) {
			if (i<s.length()) s1=s1+s.charAt(i);
		}

		return s1;
	}

}
# UtilFenetre.java

import java.awt.Color;

class UtilFenetre {
	public UtilFenetre () {

	}

	public static int [] agrandieTab (int [] t) {
		int i;

		int [] t1 = new int[t.length*2];

		for (i=0; i<t.length; i++) t1[i] = t[i];

		return t1;
	}

	public static int [][] agrandieTab (int [][] t) {
		int i,j;

		int [][] t1 = new int[t.length*2][t[0].length];

		for (i=0; i<t.length; i++) for (j=0; j<t[0].length; j++) t1[i][j] = t[i][j];

		return t1;
	}

	public int [] placementBoutons (int n) {
		int [] t = new int [n];

		t[0] = 145;  //taille horizontale
		t[1] = 34;  //taille verticale
		t[2] = 9;   //nombre de boutons
		t[3] = 1; //Jouer
		t[4] = 2; //Options
		t[5] = 3; //Instructions
		t[6] = 4; //Scores
		t[7] = 5; //Crédits
		t[8] = 7; //Quitter
		t[9] = 1; //Nouveau Jeu
		t[10] = 2; //Charger Partie
		t[11] = 6; //Retour
		t[12] = 1; //Commencer
		t[13] = 5; //Changer les couleurs
		t[14] = 6; //Retour
		t[15] = 1; //Nombre de cases
		t[16] = 3; //Difficulté
		t[17] = 4; //Mode de jeu
		t[18] = 5; //nombre de coup max
		t[19] = 6; //Contre la montre
		t[20] = 8; //Retour
		t[21] = 1; //Facile
		t[22] = 2; //Moyen
		t[23] = 3; //Difficile
		t[24] = 6; //Retour
		t[25] = 1; // h/h
		t[26] = 2; // h/o
		t[27] = 3; // o/h
		t[28] = 4; // o/o
		t[29] = 6; //Retour
		t[30] = 2; //Activer
		t[31] = 3; //Désactiver
		t[32] = 8; //Retour
		t[33] = 7; //Valider
		t[34] = 8; //Retour arrière
		t[35] = 9; //Arreter et voir les réponses
		t[36] = 9; //Ok
		t[37] = 2; //Nombre de couleurs
		t[38] = 3; //Temps
		t[39] = 2; //Activé/Désactivé
		t[40] = 7; //Ok
		t[41] = 8; //Retour
		t[42] = 7; //Retour
		t[43] = 7; //Retour
		t[44] = 8; //Retour
		t[45] = 6; //Ok
		t[46] = 6; //Ok
		t[47] = 7; //Ok
		t[48] = 8; //Retour
		t[49] = 1; //Activer/Désactiver : nombre de coups illimité
		t[50] = 1; //Pause
		t[51] = 7; //Options graphiques

		return t;
	}

	public static Color [] attributDefaut () {
		Color [] c = new Color [6];

		c[0] = Color.GREEN; //barre de droite
		/*c[1] = ; //pions de réponse
		c[2] = ; //carré de réponses
		c[3] = ; //fond des coups
		c[4] = ; //bordure des coups
		c[5] = ; //fond arrière JPanel des coups*/

		return c;
	}

	public String [] tabBouttons(int n) {
		int i,j;

		String [] s = new String [n];

		for (i=0; i<s.length; i++) s[i]="";

		s[0] = "Jouer";
		s[1] = "Options";
		s[2] = "Instructions";
		s[3] = "Scores";
		s[4] = "Crédits";
		s[5] = "Quitter";
		s[6] = "Nouveau jeu";
		s[7] = "Charger une partie";
		s[8] = "Retour";
		s[9] = "Commencer";
		s[10] = "Changer les couleurs";
		s[11] = "Retour";
		s[12] = "Nombre de cases";
		s[13] = "Difficulté";
		s[14] = "Mode de jeu";
		//s[15] = "<html><p>Nombre de coups<br>maximum</p></html>";
		s[15] = "Nombre de coups";
		s[16] = "Mode contre la montre";
		s[17] = "Retour";
		s[18] = "Facile";
		s[19] = "Moyen";
		s[20] = "Difficile";
		s[21] = "Retour";
		s[22] = "Humain contre humain";
		s[23] = "Ordinateur contre humain";
		s[24] = "Humain contre ordinateur";
		s[25] = "Ordinateur contre ordinateur";
		s[26] = "Retour";
		s[27] = "Activer";
		s[28] = "Désactiver";
		s[29] = "Retour";
		s[30] = "Valider";
		s[31] = "";
		s[32] = "Arrêter et voir \nles réponses";
		s[33] = "OK";
		s[34] = "Nombre de couleurs";
		s[35] = "Temps";
		s[36] = "Activer/Désactiver";
		s[37] = "Ok";
		s[38] = "Retour";
		s[39] = "Retour";
		s[40] = "Retour";
		s[41] = "Retour";
		s[42] = "Ok";
		s[43] = "Ok";
		s[44] = "Ok";
		s[45] = "Retour";
		s[46] = "<html><p>Activer/Désactiver<br> le nombre de coups illimité.</p></html>";
		s[47] = "Pause";
		s[48] = "Options graphiques";

		return s;
	}

	public static String [] texteDesOptions () {
		int i;

		String [] s = new String [4];

		for (i=0; i<4; i++) s[i] = "";

		s[0] = "\nNombre de cases : \n\nMoins de 5 : Facile\nEntre 5 et 7 : Moyen\nPlus de 7 : Difficile\nPlus de 10 : Très difficile.";
		s[1] = "\nNombre de couleurs : \n\nMoins de 6 : Facile\nEntre 6 et 8 : Moyen\nPlus de 10 : Difficile\nPlus de 15 : Très difficile.";
		s[2] = "\nNombre de coups max : \n\n30 : Facile\n12 : Moyen\n6 : Difficile\nMoins de 5 : Très difficile.";
		s[3] = "\nTemps : \n\nPlus de 20 min : Très facile\n15 min : Facile\n5 min : Moyen\nMoins de 5 min : difficile.";

		return s;
	}

	public static boolean TestNombre (String s){
		int i, a = s.length(), c=0;

		if (s.equals("")) {
			System.out.println("La fonction 'TestNombre' dit : "+'"'+" Le string est null : convertion impossible."+'"');
 		}

		for (i=0; i<a; i++) {
				if (s.charAt(i)=='0' ||
				s.charAt(i)=='1' ||
				s.charAt(i)=='2' ||
				s.charAt(i)=='3' ||
				s.charAt(i)=='4' ||
				s.charAt(i)=='5' ||
				s.charAt(i)=='6' ||
				s.charAt(i)=='7' ||
				s.charAt(i)=='8' ||
				s.charAt(i)=='9') c++;
		}

		return (c>=a);
	}

	public static int convertNombre (String s){
		int i, a = s.length(), c=0, d=0;

		if (s.equals("")) {
			System.out.println("\n\n//Le string est null : convertion impossible.\n");
		}

		if (a==1) {
			if (s.charAt(0)=='0') c=0;
			if (s.charAt(0)=='1') c=1;
			if (s.charAt(0)=='2') c=2;
			if (s.charAt(0)=='3') c=3;
			if (s.charAt(0)=='4') c=4;
			if (s.charAt(0)=='5') c=5;
			if (s.charAt(0)=='6') c=6;
			if (s.charAt(0)=='7') c=7;
			if (s.charAt(0)=='8') c=8;
			if (s.charAt(0)=='9') c=9;

			d=c;
		}else {
			for (i=0; i<a; i++) {
				c=-1;
				if (s.charAt(i)=='0') c=0;
				if (s.charAt(i)=='1') c=1;
				if (s.charAt(i)=='2') c=2;
				if (s.charAt(i)=='3') c=3;
				if (s.charAt(i)=='4') c=4;
				if (s.charAt(i)=='5') c=5;
				if (s.charAt(i)=='6') c=6;
				if (s.charAt(i)=='7') c=7;
				if (s.charAt(i)=='8') c=8;
				if (s.charAt(i)=='9') c=9;
	
				if (c!=-1) d=d*10+c;	
			}
		}

		if (d<0) System.out.println("\n//Le nombre est trop grand");

		return d;

	}
}
# UtilFichiers.java

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Scanner;

class UtilFichiers extends EnregistrementFichiers {
	static UtilDate utilDate;

	public UtilFichiers () {
		utilDate = new UtilDate();
	}

	public UtilFichiers (int m) {
		int i,j;

		//StatsFichier(sauveStat1("Joueur025", 5, 4, 3, 39, 55, 0));
		//for (int i=0; i<50; i++) StatsFichier(sauveStat1("Joueur025", 5, 4, 3, 39, 55, 0));

		String [][] t = new String [1][1];

		t = litStat1Fichier ();

		for (i=0; i<t.length; i++) for (j=0; j<t[i].length; j++) System.out.println("t["+i+"]["+j+"] = "+t[i][j]);

		String s[][] = classTab3val(t,3,3,1); //recherche(t,1,"5");

		for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) System.out.println("s["+i+"]["+j+"] = "+s[i][j]);
	}


	public int [] demandeOptions () {
		int n=0, ndco=0, m=0;
		Scanner sc = new Scanner(System.in);

		System.out.print("n = ");
		n = sc.nextInt();

		System.out.print("ndco = ");
		ndco = sc.nextInt();

		System.out.print("m = ");
		m = sc.nextInt();

		int [] t = new int [3];

		t[0]=n;
		t[1]=ndco;
		t[2]=m;

		return t;
	}

	public String [][] recherche (String [][] s, int n, String a) {
		int i, j=0, k=0;


		int [] s1 = new int [s.length];		

		for (i=0; i<s.length; i++) {
			//System.out.println("s[i][n] = "+s[i][n]+"\n"+s[i][n].equals(a));
			if (s[i][n].equals(a)) {
				s1[i]=1;
			}
		}

		int length = 8;

		if (s.length>0) length = s[0].length;

		String [][] s2 = new String [s.length][length];

		for (i=0; i<s.length; i++) for (j=0; j<s[i].length; j++) s2[i][j]="";

		k=0;

		for (i=0; i<s.length; i++) {
			if (s1[i]!=0) {
				for (j=0; j<s[i].length; j++){
					s2[k][j]=s[i][j];
				}
				if (k<s2.length-1) k++;
			}
		}

		return s2;
	}

	public static String [][] nettoieTab (String [][] s) {
		int i,j, cmp=0, k=0;

		for (i=0; i<s.length; i++) if (s[i][0]!="") cmp++;

		int length = 8;

		if (s.length>0) length = s[0].length; 

		String [][] s1 = new String [cmp][length];


		for (i=0; i<s1.length; i++) for (j=0; j<s1[i].length; j++) s1[i][j]="";

		for (i=0; i<s.length; i++) {
			for (j=0; j<s[i].length; j++) {
				if (s[i][0]!="") s1[k][j]=s[i][j];
			}
			if (k<s1.length-1) k++;
		}

		return s1;
	}

	public String [][] classTab3val (String [][] s, int n, int ndco, int m) {
		//int [] t = demandeOptions ();

		int [] t = new int [3];

		t[0] = n;
		t[1] = ndco;
		t[2] = m;

		String [][] s0=recherche(s,1,""+t[0]);

		//System.out.println("Ok1");

		String [][] s1=recherche(s0,2,""+t[1]);

		//System.out.println("Ok1");

		String [][] s2=recherche(s1,3,""+t[2]);

		//System.out.println("Ok1");

		return nettoieTab(s2);
	}

	public static void StatsFichier (String s1) {
		creeRepertoires();
		boolean fe = false; // fichier existe

		int i;

		File f1 = new File("Sauvegardes"+File.separatorChar+"Statistiques.txt");
		int g=0;
		String [] s = new String [1];

		s[0] = "";

		boolean a = false;

		try{
			a = f1.exists();		
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
		}

		String [] s2 = new String [1];
		s2 [0] = "";

		if (a) {
			fe = true; // fichier existe

			s = litTableauString(lireFichier("Sauvegardes"+File.separatorChar+"Statistiques.txt"),',');
			s2 = new String [s.length+1];
			for (i=0; i<s.length; i++) s2[i]=s[i];	
			s2[i]=s1;		
		}
		else {
			//s2[1]=s1;
		}

		int ggg1 = s.length;
		if (!fe) ggg1 = 0;

		s2 = new String [ggg1+1];

		for (i=0; i<ggg1; i++) s2[i]=s[i];	
		s2[i]=s1;

		String s0 = sauveTableauString(s2,"stats",',');

		effaceFichier("Sauvegardes"+File.separatorChar+"Statistiques.txt");

		try{
			f1.createNewFile();		
		}
	
		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
		}

		try {
			PrintWriter pw = new PrintWriter(new FileWriter(f1));
		   	pw.println(s0);
			pw.flush();
			pw.close();
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : écriture dans le fichier.");
		}
		
	}

	public static String [] genereAleatSats () {
		int i;

		String [] s = new String [100];

		String [][] t = new String [9][100];

		for (i=0; i<t[0].length; i++) {
			t[0][i] = "Joueur "+(int)(Math.random()*100+1);
			t[1][i] = ""+(int)(Math.random()*500+1); //n
			t[2][i] = ""+(int)(Math.random()*500+1); //nombre de couleurs
			t[3][i] = ""+(int)(Math.random()*4+1); //m
			t[4][i] = ""+(int)(Math.random()*3+1); //d
			t[5][i] = ""+(int)(Math.random()*500+3); //score
			t[6][i] = ""+(int)(Math.random())+" h "+(int)(Math.random()*60+1)+" min "+(int)(Math.random()*60+1)+" s"; //temps
			t[7][i] = ""+(int)(Math.random()); //chrono
			t[8][i] = ""+(int)(Math.random()*30+1)+"/"+(int)(Math.random()*11+1)+"/"+(2013-(int)(Math.random()*12)); //date

			s[i] = ""+t[0][i]+":"+t[1][i]+":"+t[2][i]+":"+t[3][i]+":"+t[4][i]+":"+t[5][i]+":"+t[6][i]+":"+t[7][i]+":";
		}

		return s;
	}

	public static String sauveStat1 (String j, int n, int ndco, int m, int d, int score, int temps, int chrono) {
		String date = utilDate.convertitDateNombres ();

		String s = j+":"+n+":"+ndco+":"+m+":"+d+":"+score+":"+temps+":"+chrono+":"+date+":";

		return s;
	}

	public static void ajouteStat (int n, int ndco, int m, int d, int score, int temps, int chrono, boolean humain, int tailleDesPolices) {
		int [] t = new int [7];

		t[0] = n;
		t[1] = ndco;
		t[2] = m;
		t[3] = d;
		t[4] = score;
		t[5] = temps;
		t[6] = chrono;

		if (humain) {
			EntrerNom f5 = new EntrerNom (tailleDesPolices);

			f5.setTabSauveStats (t);
		}
		else {
			String s1 = sauveStat1("Ordinateur",t[0],t[1],t[2],t[3],t[4],t[5],t[6]);

			StatsFichier (s1);
		}
	}

	/*
		|Nom du joueur|nombre de chiffres|nombre de couleurs|mode de jeu|score (nombre de coups)|temps|chrono actif ou non|date| => 0<n<7.
	*/

 	public static String [][] litStat1Fichier () {
		creeRepertoires();

		int i,j;

		File f1 = new File("Sauvegardes"+File.separatorChar+"Statistiques.txt");

		String [] s = new String [1];

		s[0] = "";

		boolean a = false;

		try{
			a = f1.exists();		
		}

		catch(Exception e){
			e.printStackTrace();
			System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
		}

		if (a) {
			s = litTableauString(lireFichier("Sauvegardes"+File.separatorChar+"Statistiques.txt"),',');

			String [][] t = new String [s.length][0];

			for (i=0; i<s.length; i++) t[i] = litStat1(s[i]);

			return t;
		}

		else {
			s = genereAleatSats ();

			String s0 = sauveTableauString(s,"stats",',');

			try{
				f1.createNewFile();		
			}
	
			catch(Exception e){
				e.printStackTrace();
				System.out.println("Echec de la sauvegarde : enregistrement du fichier.");
			}

			try {
				PrintWriter pw = new PrintWriter(new FileWriter(f1));
			   	pw.println(s0);
				pw.flush();
				pw.close();
			}

			catch(Exception e){
				e.printStackTrace();
				System.out.println("Echec de la sauvegarde : écriture dans le fichier.");
			}

			System.out.println("litStat1Fichier dit : Sauvegarde créée.");

			String [][] t1 = new String [1][1];

			t1[0][0]="";

			return (t1);
		}		
	}		

	public static String [][] classTabC (String [][] t, int n) {
		int i,j;
		String [] t1;

		for (i=0; i<t.length; i++) {
			for (j=i+1; j<t.length; j++) {
				if (convertNombre(t[i][n])>convertNombre(t[j][n])) { t1=t[j]; t[j]=t[i]; t[i]=t1; }
			}
		}

		return t;
	}

	public static String [][] classTabD (String [][] t, int n) {
		int i,j;
		String [] t1;

		for (i=0; i<t.length; i++) {
			for (j=i+1; j<t.length; j++) {
				if (convertNombre(t[i][n])<convertNombre(t[j][n])) { t1=t[j]; t[j]=t[i]; t[i]=t1; }
			}
		}

		return t;
	}

	public static String [][] classTabDateC (String [][] t) {
		int i,j;
		String [] t1;
		int n=8; //date

		for (i=0; i<t.length; i++) {
			for (j=i+1; j<t.length; j++) {
				if (utilDate.compareDateMax(t[i][n],t[j][n])) { t1=t[j]; t[j]=t[i]; t[i]=t1; }
			}
		}

		return t;
	}

	public static String [][] classTabDateD (String [][] t) {
		int i,j;
		String [] t1;
		int n=8; //date

		for (i=0; i<t.length; i++) {
			for (j=i+1; j<t.length; j++) {
				if (utilDate.compareDateMin(t[i][n],t[j][n])) { t1=t[j]; t[j]=t[i]; t[i]=t1; }
			}
		}

		return t;
	}

	public static String [][] classTempsC (String [][] t) {
		int i,j, a=0, b=0;
		String [] t1;
		int n=6;

		for (i=0; i<t.length; i++) {
			for (j=i+1; j<t.length; j++) {

				a=0;
				b=0;

				if (convertNombre(t[i][n+1])!=0) {
					a = convertNombre(t[i][n]);
					b = convertNombre(t[j][n]);
				}

				if (a>b) { t1=t[j]; t[j]=t[i]; t[i]=t1; }
			}
		}

		return t;
	}

	public static String [][] classTempsD (String [][] t) {
		int i,j, a=0, b=0;
		String [] t1;
		int n=6;

		for (i=0; i<t.length; i++) {
			for (j=i+1; j<t.length; j++) {

				a=0;
				b=0;

				if (convertNombre(t[i][n+1])!=0) {
					a = convertNombre(t[i][n]);
					b = convertNombre(t[j][n]);
				}

				if (a<b) { t1=t[j]; t[j]=t[i]; t[i]=t1; }
			}
		}

		return t;
	}


 	public static String [] litStat1 (String s1) {
		int i,j=0,s1length=s1.length(), cmp=0;

		for (i=0; i<s1length; i++) if (s1.charAt(i)==':') cmp++;

		String [] s0 = new String [cmp];

		for (i=0; i<s0.length; i++) s0[i] = "";

		i=0;
		j=0;
		while (i<s1length) {
			while (s1.charAt(i)!=':') {
				s0[j]=s0[j]+s1.charAt(i);

				i++;
			}

			i++;

			if (j<s0.length) j++;
		}

		return s0;
	}

	public static int convertDateJour (String s) {
		int i, slength = s.length();
		String s0 = "";

		for (i=0; s.charAt(i)!='/'; i++) {
			s0=s0+s.charAt(i);			
		}

		if (s0.length()>0) return (convertNombre(s0));
		else {
			System.out.println("convertDate dit : Erreur, string trouvé nul");
			return -1;
		}
	}

	public static int convertDateMois (String s) {
		int i, slength = s.length();
		String s0 = "";

		for (i=0; (s.charAt(i)!='/'||i<slength); i++) {			
		}

		i++;

		for (i=0; (s.charAt(i)!='/'||i<slength); i++) {
			s0=s0+s.charAt(i);			
		}

		if (s0.length()>0) return (convertNombre(s0));
		else {
			System.out.println("convertDate dit : Erreur, string trouvé nul");
			return -1;
		}
	}

	public static int convertDateAnnee (String s) {
		int i, slength = s.length();
		String s0 = "";

		for (i=0; (s.charAt(i)!='/'||i<slength); i++) {			
		}

		i++;

		for (i=0; (s.charAt(i)!='/'||i<slength); i++) {			
		}

		i++;

		for (i=0; (s.charAt(i)!='/'||i<slength); i++) {
			s0=s0+s.charAt(i);			
		}

		if (s0.length()>0) return (convertNombre(s0));
		else {
			System.out.println("convertDate dit : Erreur, string trouvé nul");
			return -1;
		}
	}

	public static Object [] convertObject (String [] s1) {
		int i;

		Object [] t = new Object[s1.length];

		for (i=0; i<s1.length; i++) {
			if (TestNombre(s1[i])) t[i] = convertNombre(s1[i]);
			else t[i] = s1[i];
		}

		for (i=0; i<t.length; i++) System.out.println("t["+i+"] = "+t[i]);

		return t;
	}

	public static String maxDate (String a, String b) {
		int i;

		int [][] t = new int [2][3];

		t[0][0] = convertDateJour(a);
		t[0][1] = convertDateMois(a);
		t[0][2] = convertDateAnnee(a);
		t[1][0] = convertDateJour(b);
		t[1][1] = convertDateMois(b);
		t[1][2] = convertDateAnnee(b);

		if (t[0][0]!=t[1][0]) {
			if (t[0][1]!=t[1][1]) {
				if (t[0][2]>t[1][2]) return a;
				else return b;
			}
			else {
				if (t[0][1]>t[1][1]) return a;
				else return b;
			}
		}
		else {
			if (t[0][0]>t[1][0]) return a;
			else return b;
		}
	}

	public static boolean maxDateB (String a, String b) {
		int i;

		int [][] t = new int [2][3];

		t[0][0] = convertDateJour(a);
		t[0][1] = convertDateMois(a);
		t[0][2] = convertDateAnnee(a);
		t[1][0] = convertDateJour(b);
		t[1][1] = convertDateMois(b);
		t[1][2] = convertDateAnnee(b);

		if (t[0][2]!=t[1][2]) return (t[0][2]>t[1][2]);
		else if (t[0][1]!=t[1][1]) return (t[0][1]>t[1][1]);
		else if (t[0][0]!=t[1][0]) return (t[0][0]>t[1][0]);
		else return true;
	}

	public static String minDate (String a, String b) {
		int i;

		int [][] t = new int [2][3];

		t[0][0] = convertDateJour(a);
		t[0][1] = convertDateMois(a);
		t[0][2] = convertDateAnnee(a);
		t[1][0] = convertDateJour(b);
		t[1][1] = convertDateMois(b);
		t[1][2] = convertDateAnnee(b);

		if (t[0][0]!=t[1][0]) {
			if (t[0][1]!=t[1][1]) {
				if (t[0][2]<t[1][2]) return a;
				else return b;
			}
			else {
				if (t[0][1]<t[1][1]) return a;
				else return b;
			}
		}
		else {
			if (t[0][0]<t[1][0]) return a;
			else return b;
		}
	}

	public static boolean minDateB (String a, String b) {
		int i;

		int [][] t = new int [2][3];

		t[0][0] = convertDateJour(a);
		t[0][1] = convertDateMois(a);
		t[0][2] = convertDateAnnee(a);
		t[1][0] = convertDateJour(b);
		t[1][1] = convertDateMois(b);
		t[1][2] = convertDateAnnee(b);


		if (t[0][2]!=t[1][2]) return (t[0][2]<t[1][2]);
		else if (t[0][1]!=t[1][1]) return (t[0][1]<t[1][1]);
		else if (t[0][0]!=t[1][0]) return (t[0][0]<t[1][0]);
		else return true;
	}

	public static boolean TestNombre (String s){
		int i, a = s.length(), c=0;

		if (s.equals("")) {
			System.out.println("La fonction 'TestNombre' dit : "+'"'+" Le string est null : convertion impossible."+'"');
 		}

		for (i=0; i<a; i++) {
				if (s.charAt(i)=='0' ||
				s.charAt(i)=='1' ||
				s.charAt(i)=='2' ||
				s.charAt(i)=='3' ||
				s.charAt(i)=='4' ||
				s.charAt(i)=='5' ||
				s.charAt(i)=='6' ||
				s.charAt(i)=='7' ||
				s.charAt(i)=='8' ||
				s.charAt(i)=='9') c++;
		}

		return (c>=a);
	}

	public static void main (String [] args) {
		UtilFichiers t1 = new UtilFichiers(5);
	}
}






# UtilIA.java

class UtilIA {
	public UtilIA () {

	}
}
# UtilJeu.java

class UtilJeu {
	public UtilJeu () {

	}

	public static boolean Verifie2 (int [] t, int a){
		for (int i=0; i<t.length; i++) { if (t[i]==a) return true; }

		return false;
	}


	public static boolean VerifieSolution (int [] t1, int [] t2) {
		for (int i=0; i<t1.length; i++) { if (t1[i]!=t2[i]) return false; }

		return true;
	}

	public static void VerifieFacile (int [] t1, int [] t2){
		System.out.println();
		for (int i=0; i<t2.length; i++) {
			if (t1[i]==t2[i]) System.out.println("Nombre "+(i+1)+" est bien place.");
			if ((t1[i]!=t2[i]) && (Verifie2(t1,t2[i]))) System.out.println("Nombre "+(i+1)+" est mal place (il y en a un ou plus dans les solutions).");
			if ((t1[i]!=t2[i]) && (!Verifie2(t1,t2[i]))) System.out.println("Nombre "+(i+1)+" est faux (il n'est pas dans les solutions).");
		}
	}

	public static int [] VerifieFacileOrdi (int [] t111, int [] t211){
		int [] t112 = new int [t211.length];

		for (int i=0; i<t211.length; i++) {
			if (t111[i]==t211[i]) t112[i]=1;
			if ((t111[i]!=t211[i]) && (Verifie2(t111,t211[i]))) t112[i]=2;
			if ((t111[i]!=t211[i]) && (!Verifie2(t111,t211[i]))) t112[i]=0;
		}

		return t112;
	}

	/**
		Fonction qui vérifie la combinaison entrée en mode Moyen :
		elle donne juste le nombre de chiffres bien placés et le nombre chiffres mal placés.

		r1 = nombre de chiffres bien placés.
		r2 = nombre de chiffre mal placés.
	**/


	public static int [] VerifieMoyen (int a, int b, int n, int [] t1, int [] t2){
		int i, j, r1=0,r2=0, occ=0, occV=0;

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieMoyen'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return new int[2];
		}

		int [] t10 = new int [2];
		
		int [][] t11 = new int [2][t1.length];

		for (i=0; i<t1.length; i++) {
			t11[0][i] = t1[i];

			t11[1][i] = 1;
		}

		for (i=0; i<t1.length; i++) {
			if (t1[i]==t2[i]) {
				r1++;

				t11[1][i] = 2;
			}
			else {
				for (j=0; j<t1.length; j++) {
					if (t2[j]==t1[i]) {
						if (t11[1][j]==1) {r2++; t11[1][j] = 0; }
					}
				}
			}
		}


		t10[0] = r1;
		t10[1] = r2;

		return t10;
	}

	/**
		Fonction qui vérifie la combinaison entrée en mode Difficile :
		elle donne juste le nombre de chiffres bien ou mal placés.
	**/

	public static int VerifieDifficile (int a, int b, int n, int [] t1, int [] t2){
		int i, j, r1=0,r2=0, occ=0, occV=0;

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieMoyen'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return 0;
		}

		
		int [][] t11 = new int [2][t1.length];

		for (i=0; i<t1.length; i++) {
			t11[0][i] = t1[i];

			t11[1][i] = 1;
		}

		for (i=0; i<t1.length; i++) {
			if (t1[i]==t2[i]) {
				r1++;

				t11[1][i] = 2;
			}
			else {
				for (j=0; j<t1.length; j++) {
					if (t2[j]==t1[i]) {
						if (t11[1][j]==1) {r2++; t11[1][j] = 0; }
					}
				}
			}
		}

		return (r1+r2);
	}
}
# UtilJeu1.java

class UtilJeu {
	public UtilJeu () {

	}

	public static int compteOccurences (int [] t, int a) {
		int i, b=0;

		for (i=0; i<t.length; i++) if (t[i]==a) b++;
		
		return b;
    	}

	public static boolean Verifie2 (int [] t, int a){
		for (int i=0; i<t.length; i++) { if (t[i]==a) return true; }

		return false;
	}


	public static boolean VerifieSolution (int [] t1, int [] t2) {
		for (int i=0; i<t1.length; i++) { if (t1[i]!=t2[i]) return false; }

		return true;
	}

	public static void VerifieFacile (int [] t1, int [] t2){
		System.out.println();
		for (int i=0; i<t2.length; i++) {
			if (t1[i]==t2[i]) System.out.println("Nombre "+(i+1)+" est bien place.");
			if ((t1[i]!=t2[i]) && (Verifie2(t1,t2[i]))) System.out.println("Nombre "+(i+1)+" est mal place (il y en a un ou plus dans les solutions).");
			if ((t1[i]!=t2[i]) && (!Verifie2(t1,t2[i]))) System.out.println("Nombre "+(i+1)+" est faux (il n'est pas dans les solutions).");
		}
	}

	public static int [] VerifieFacileOrdi (int [] t111, int [] t211){
		int [] t112 = new int [t211.length];

		for (int i=0; i<t211.length; i++) {
			if (t111[i]==t211[i]) t112[i]=1;
			if ((t111[i]!=t211[i]) && (Verifie2(t111,t211[i]))) t112[i]=2;
			if ((t111[i]!=t211[i]) && (!Verifie2(t111,t211[i]))) t112[i]=0;
		}

		return t112;
	}

	public static int [] VerifieMoyen (int a, int b, int n, int [] t1, int [] t2) {
		int i, j, r1=0,r2=0, occ=0, occV=0;

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieMoyen'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return new int[2];
		}

		int [] t10 = new int [2];
		
		int [] t11 = new int [t1.length];

		for (i=0; i<t1.length; i++) if (t1[i]==t2[i]) r1++;
		else {
			for (i=0; i<t1.length; i++) {
				occ = compteOccurences(t1,t2[i]);

				for (j=0; j<t1.length; j++) if (t2[j]==t1[i]) {
					if (t11[i]<occ) {
						t11[i]++;
	
						r2++;
					}
				}
			}
		}

		t10[0] = r1;
		t10[1] = r2;

		return t10;
	}

	/**
		Fonction qui vérifie la combinaison entrée en mode Moyen :
		elle donne juste le nombre de chiffres bien placés et le nombre chiffres mal placés.

		r1 = nombre de chiffres bien placés.
		r2 = nombre de chiffre mal placés.
	**/

	/*public static int [] VerifieMoyen (int a, int b, int n, int [] t1, int [] t2){
		int i, j, r1=0, r2=0, bn;

		if (n>b) bn=n; else bn=b;

		int t10[] = new int[2]; 
		int [][] t0 = new int [2][bn];
		int [][] t3 = new int [2][bn];

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieMoyen'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return t10;
		}
		
		for (i=0; i<bn; i++) t0[0][i]=i+a;
		for (i=0; i<bn; i++) t3[0][i]=i+a;

		for (i=0; i<bn; i++) t0[1][i]=-1;
		for (i=0; i<bn; i++) t3[1][i]=-2;

		
		for (i=0; i<n; i++) if (t1[i]==t2[i]) r1++;

		for (i=0; i<n; i++) for (j=0; j<bn; j++) if (t1[i]==t3[0][j]) if (t3[1][j]==-2) t3[1][j]=1; else t3[1][j]++;

		for (i=0; i<n; i++) for (j=0; j<bn; j++) if (t2[i]==t0[0][j]) if (t0[1][j]==-1) t0[1][j]=1; else t0[1][j]++;

		for (i=0; i<bn; i++) if (t3[1][i]==t0[1][i]) r2=r2+t0[1][i]; if (r2>=r1) r2=r2-r1;

		//for (i=0; i<n; i++) System.out.println("t1["+(i+1)+"] = "+t1[i]);
		//for (i=0; i<bn; i++) System.out.println("t0["+(i+1)+"] = "+t0[1][i]);
		//for (i=0; i<bn; i++) System.out.println("t3["+(i+1)+"] = "+t3[1][i]);

		t10[0]=r1; t10[1]=r2;

		return t10;
	}*/

	/**
		Fonction qui vérifie la combinaison entrée en mode Difficile :
		elle donne juste le nombre de chiffres bien ou mal placés.
	**/

	public static int VerifieDifficile (int a, int b, int n, int [] t1, int [] t2){
		int i, j, r1=0, r2=0, bn;

		if (n>b) bn=n; else bn=b;

		int [][] t0 = new int [2][bn];
		int [][] t3 = new int [2][bn];

		if (t1.length!=t2.length) {
			System.out.println("La fonction ''verifieMoyen'' dit : ''Les tableaux ne sont pas de la meme taille.''");
			return 0;
		}
		
		for (i=0; i<bn; i++) t0[0][i]=i+a; //remplissage de la ligne qui contient les numéros.
		for (i=0; i<bn; i++) t3[0][i]=i+a; //remplissage de la ligne qui contient les numéros.

		for (i=0; i<bn; i++) t0[1][i]=-1; //il faut que t0[1][i] et t3[1][i] soit différents pour l'étape de la vérification.
		for (i=0; i<bn; i++) t3[1][i]=-2;

		
		for (i=0; i<n; i++) if (t1[i]==t2[i]) r1++; //analyse des chiffres bien placés.

		for (i=0; i<n; i++) for (j=0; j<bn; j++) if (t1[i]==t3[0][j]) if (t3[1][j]==-2) t3[1][j]=1; else t3[1][j]++; //On compte le nombre d'occurences de chaque chiffre dans les deux tableaux.

		for (i=0; i<n; i++) for (j=0; j<bn; j++) if (t2[i]==t0[0][j]) if (t0[1][j]==-1) t0[1][j]=1; else t0[1][j]++;

		for (i=0; i<bn; i++) if (t3[1][i]==t0[1][i]) r2=r2+t0[1][i]; if (r2>=r1) r2=r2-r1; //On compare les deux tableaux puis on enlève le nombre de chiffres bien placés.

		//for (i=0; i<n; i++) System.out.println("t1["+(i+1)+"] = "+t1[i]);
		//for (i=0; i<bn; i++) System.out.println("t0["+(i+1)+"] = "+t0[1][i]);
		//for (i=0; i<bn; i++) System.out.println("t3["+(i+1)+"] = "+t3[1][i]);

		return (r1+r2);
	}
}
# Tree du dossier

.
âââ Container$Clique.class
âââ Container$CliqueSouris.class
âââ Container$Jtableau.class
âââ Container$TabScores.class
âââ Container3$Clique.class
âââ Container3.class
âââ Container4$Clique.class
âââ Container4.class
âââ Container5$Clique3.class
âââ Container5.class
âââ Container.class
âââ Credits.class
âââ Credits.java
âââ EnregistrementFichiers.class
âââ EnregistrementFichiers.java
âââ EntrerNom$1.class
âââ EntrerNom.class
âââ EntrerNom.java
âââ generate_javadoc.bat
âââ IaCalculsDifficile.class
âââ IaCalculsDifficile.java
âââ IaCalculsFacile.class
âââ IaCalculsFacile.java
âââ IaCalculsMoyen.class
âââ IaCalculsMoyen.java
âââ IaNivFacile.class
âââ IaNivFacile.java
âââ IaNivMoyen.class
âââ IaNivMoyen.java
âââ Images
âÂ Â  âââ CacheInfo.png
âÂ Â  âââ CaseReponseVide.png
âÂ Â  âââ CaseVideNoire.png
âÂ Â  âââ FlecheGauche.png
âÂ Â  âââ GrandPionTransparent.png
âÂ Â  âââ Pause.png
âÂ Â  âââ PetitPionTransparent.png
âÂ Â  âââ PionBlanc.png
âÂ Â  âââ PionJaune.png
âÂ Â  âââ PionRouge.png
âÂ Â  âââ Titre.png
âââ Instructions.class
âââ Instructions.java
âââ javadoc
âÂ Â  âââ allclasses-frame.html
âÂ Â  âââ allclasses-noframe.html
âÂ Â  âââ constant-values.html
âÂ Â  âââ deprecated-list.html
âÂ Â  âââ help-doc.html
âÂ Â  âââ index-all.html
âÂ Â  âââ index.html
âÂ Â  âââ Mastermind.Dors.html
âÂ Â  âââ Mastermind.html
âÂ Â  âââ overview-tree.html
âÂ Â  âââ P1.AfficheIA.html
âÂ Â  âââ P1.Boutons.html
âÂ Â  âââ P1.BoutonTransparentAction.html
âÂ Â  âââ P1.ChargerPartie.html
âÂ Â  âââ P1.Clique.html
âÂ Â  âââ P1.CliqueOptions.html
âÂ Â  âââ P1.Container1.Clique.html
âÂ Â  âââ P1.Container1.CliqueSouris.html
âÂ Â  âââ P1.Container1.html
âÂ Â  âââ P1.Container1.Parties.CliqueSouris.html
âÂ Â  âââ P1.Container1.Parties.html
âÂ Â  âââ P1.Container5.Clique3.html
âÂ Â  âââ P1.Container5.html
âÂ Â  âââ P1.Coup.html
âÂ Â  âââ P1.Dors.html
âÂ Â  âââ P1.html
âÂ Â  âââ P1.JeuPause.html
âÂ Â  âââ P1.PJeu.html
âÂ Â  âââ P1.RedimBonus.html
âÂ Â  âââ P1.TailleDesPolices.html
âÂ Â  âââ P1.Traitement.html
âÂ Â  âââ P2.html
âÂ Â  âââ package-frame.html
âÂ Â  âââ package-list
âÂ Â  âââ package-summary.html
âÂ Â  âââ package-tree.html
âÂ Â  âââ script.js
âÂ Â  âââ serialized-form.html
âÂ Â  âââ stylesheet.css
âââ Jouer.bat
âââ Jouer.sh
âââ LectureFichiers.class
âââ LectureFichiers.java
âââ Makefile
âââ Mastermind$1.class
âââ Mastermind$2.class
âââ Mastermind$Dors.class
âââ Mastermind.bat
âââ Mastermind.class
âââ Mastermind.java
âââ Mastermind.sh
âââ P1$AfficheIA.class
âââ P1$Boutons.class
âââ P1$BoutonTransparentAction.class
âââ P1$ChargerPartie.class
âââ P1$Clique.class
âââ P1$CliqueOptions.class
âââ P1$Container1$Clique.class
âââ P1$Container1$CliqueSouris.class
âââ P1$Container1$Parties$CliqueSouris.class
âââ P1$Container1$Parties.class
âââ P1$Container1.class
âââ P1$Container5$Clique3.class
âââ P1$Container5.class
âââ P1$Coup.class
âââ P1$Dors.class
âââ P1$JeuPause.class
âââ P1$PJeu.class
âââ P1$RedimBonus.class
âââ P1$TailleDesPolices$1.class
âââ P1$TailleDesPolices.class
âââ P1$Traitement.class
âââ P1.class
âââ P2.class
âââ projet.txt
âââ Sauvegardes
âÂ Â  âââ Parametres.txt
âÂ Â  âââ Parties
âÂ Â  âââ Statistiques.txt
âââ Scores.class
âââ Scores.java
âââ UtilDate.class
âââ UtilDate.java
âââ UtilFenetre.class
âââ UtilFenetre.java
âââ UtilFichiers.class
âââ UtilFichiers.java
âââ UtilIA.java
âââ UtilJeu1.java
âââ UtilJeu.class
âââ UtilJeu.java

5 directories, 131 files
